using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ArasDocumentExport.Models;

public partial class ArasContext : DbContext
{
    public ArasContext()
    {
    }

    public ArasContext(DbContextOptions<ArasContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AcPolicyaccessattrdefinition> AcPolicyaccessattrdefinitions { get; set; }

    public virtual DbSet<AcPolicyaccessitemattribute> AcPolicyaccessitemattributes { get; set; }

    public virtual DbSet<Access> Accesses { get; set; }

    public virtual DbSet<AccessExplicitdefine> AccessExplicitdefines { get; set; }

    public virtual DbSet<AccessItemclassification> AccessItemclassifications { get; set; }

    public virtual DbSet<AccessPropertyvalue> AccessPropertyvalues { get; set; }

    public virtual DbSet<Action> Actions { get; set; }

    public virtual DbSet<Activeuser> Activeusers { get; set; }

    public virtual DbSet<Activity> Activities { get; set; }

    public virtual DbSet<ActivityAssignment> ActivityAssignments { get; set; }

    public virtual DbSet<ActivityEmail> ActivityEmails { get; set; }

    public virtual DbSet<ActivityMethod> ActivityMethods { get; set; }

    public virtual DbSet<ActivityTask> ActivityTasks { get; set; }

    public virtual DbSet<ActivityTaskValue> ActivityTaskValues { get; set; }

    public virtual DbSet<ActivityTemplate> ActivityTemplates { get; set; }

    public virtual DbSet<ActivityTemplateAssignment> ActivityTemplateAssignments { get; set; }

    public virtual DbSet<ActivityTemplateEmail> ActivityTemplateEmails { get; set; }

    public virtual DbSet<ActivityTemplateMethod> ActivityTemplateMethods { get; set; }

    public virtual DbSet<ActivityTemplateTask> ActivityTemplateTasks { get; set; }

    public virtual DbSet<ActivityTemplateTransition> ActivityTemplateTransitions { get; set; }

    public virtual DbSet<ActivityTemplateVariable> ActivityTemplateVariables { get; set; }

    public virtual DbSet<ActivityTransition> ActivityTransitions { get; set; }

    public virtual DbSet<ActivityVariable> ActivityVariables { get; set; }

    public virtual DbSet<ActivityVariableValue> ActivityVariableValues { get; set; }

    public virtual DbSet<AffectedItem> AffectedItems { get; set; }

    public virtual DbSet<AffectedItemProperty> AffectedItemProperties { get; set; }

    public virtual DbSet<AffectedItemRelationship> AffectedItemRelationships { get; set; }

    public virtual DbSet<AffectedRelationship> AffectedRelationships { get; set; }

    public virtual DbSet<AffectedRelationshipProperty> AffectedRelationshipProperties { get; set; }

    public virtual DbSet<Alias> Aliases { get; set; }

    public virtual DbSet<AllowedPermission> AllowedPermissions { get; set; }

    public virtual DbSet<AllowedWorkflow> AllowedWorkflows { get; set; }

    public virtual DbSet<AppliedUpdate> AppliedUpdates { get; set; }

    public virtual DbSet<BaseNotificationMessage> BaseNotificationMessages { get; set; }

    public virtual DbSet<Board> Boards { get; set; }

    public virtual DbSet<Body> Bodies { get; set; }

    public virtual DbSet<BomInstance> BomInstances { get; set; }

    public virtual DbSet<BomSubstitute> BomSubstitutes { get; set; }

    public virtual DbSet<Cad> Cads { get; set; }

    public virtual DbSet<CadChange> CadChanges { get; set; }

    public virtual DbSet<CadInstance> CadInstances { get; set; }

    public virtual DbSet<CadParent> CadParents { get; set; }

    public virtual DbSet<CadPart> CadParts { get; set; }

    public virtual DbSet<CadStructure> CadStructures { get; set; }

    public virtual DbSet<Cadfile> Cadfiles { get; set; }

    public virtual DbSet<CanAdd> CanAdds { get; set; }

    public virtual DbSet<ChangeControlledItem> ChangeControlledItems { get; set; }

    public virtual DbSet<ChangeControlledRelationship> ChangeControlledRelationships { get; set; }

    public virtual DbSet<Chart> Charts { get; set; }

    public virtual DbSet<ChartSeries> ChartSeries { get; set; }

    public virtual DbSet<ClientEvent> ClientEvents { get; set; }

    public virtual DbSet<CmfAdditionalpropertytype> CmfAdditionalpropertytypes { get; set; }

    public virtual DbSet<CmfBaseview> CmfBaseviews { get; set; }

    public virtual DbSet<CmfComputedproperty> CmfComputedproperties { get; set; }

    public virtual DbSet<CmfComputedpropertydependency> CmfComputedpropertydependencies { get; set; }

    public virtual DbSet<CmfContentelementitem> CmfContentelementitems { get; set; }

    public virtual DbSet<CmfContentitem> CmfContentitems { get; set; }

    public virtual DbSet<CmfContentpropertyitem> CmfContentpropertyitems { get; set; }

    public virtual DbSet<CmfContenttype> CmfContenttypes { get; set; }

    public virtual DbSet<CmfContenttypeexportrel> CmfContenttypeexportrels { get; set; }

    public virtual DbSet<CmfContenttypeexportsetting> CmfContenttypeexportsettings { get; set; }

    public virtual DbSet<CmfContenttypeexporttoexcel> CmfContenttypeexporttoexcels { get; set; }

    public virtual DbSet<CmfContenttypegridlayout> CmfContenttypegridlayouts { get; set; }

    public virtual DbSet<CmfContenttypeview> CmfContenttypeviews { get; set; }

    public virtual DbSet<CmfDocumentlifecyclestate> CmfDocumentlifecyclestates { get; set; }

    public virtual DbSet<CmfElementallowedpermission> CmfElementallowedpermissions { get; set; }

    public virtual DbSet<CmfElementbinding> CmfElementbindings { get; set; }

    public virtual DbSet<CmfElementtype> CmfElementtypes { get; set; }

    public virtual DbSet<CmfExporttoexcelviewconfig> CmfExporttoexcelviewconfigs { get; set; }

    public virtual DbSet<CmfPropertyallowedpermission> CmfPropertyallowedpermissions { get; set; }

    public virtual DbSet<CmfPropertybinding> CmfPropertybindings { get; set; }

    public virtual DbSet<CmfPropertytype> CmfPropertytypes { get; set; }

    public virtual DbSet<CmfStyle> CmfStyles { get; set; }

    public virtual DbSet<CmfTabularview> CmfTabularviews { get; set; }

    public virtual DbSet<CmfTabularviewcolumn> CmfTabularviewcolumns { get; set; }

    public virtual DbSet<CmfTabularviewcolumngroup> CmfTabularviewcolumngroups { get; set; }

    public virtual DbSet<CmfTabularviewheaderrow> CmfTabularviewheaderrows { get; set; }

    public virtual DbSet<CmfTabularviewheaderrow1> CmfTabularviewheaderrows1 { get; set; }

    public virtual DbSet<CmfTabularviewtree> CmfTabularviewtrees { get; set; }

    public virtual DbSet<ColumnEvent> ColumnEvents { get; set; }

    public virtual DbSet<Command> Commands { get; set; }

    public virtual DbSet<Commandalias> Commandaliases { get; set; }

    public virtual DbSet<Commandbarbutton> Commandbarbuttons { get; set; }

    public virtual DbSet<Commandbarcheckbox> Commandbarcheckboxes { get; set; }

    public virtual DbSet<Commandbardropdown> Commandbardropdowns { get; set; }

    public virtual DbSet<Commandbaredit> Commandbaredits { get; set; }

    public virtual DbSet<Commandbaritem> Commandbaritems { get; set; }

    public virtual DbSet<Commandbarmenu> Commandbarmenus { get; set; }

    public virtual DbSet<Commandbarmenubutton> Commandbarmenubuttons { get; set; }

    public virtual DbSet<Commandbarmenucheckbox> Commandbarmenucheckboxes { get; set; }

    public virtual DbSet<Commandbarmenuseparator> Commandbarmenuseparators { get; set; }

    public virtual DbSet<Commandbarsection> Commandbarsections { get; set; }

    public virtual DbSet<Commandbarsectiondependency> Commandbarsectiondependencies { get; set; }

    public virtual DbSet<Commandbarsectionitem> Commandbarsectionitems { get; set; }

    public virtual DbSet<Commandbarseparator> Commandbarseparators { get; set; }

    public virtual DbSet<Commandbarshortcut> Commandbarshortcuts { get; set; }

    public virtual DbSet<ConfigurableGridEvent> ConfigurableGridEvents { get; set; }

    public virtual DbSet<Conversionrule> Conversionrules { get; set; }

    public virtual DbSet<Conversionruleeventhandler> Conversionruleeventhandlers { get; set; }

    public virtual DbSet<Conversionruleeventtemplate> Conversionruleeventtemplates { get; set; }

    public virtual DbSet<Conversionrulefiletype> Conversionrulefiletypes { get; set; }

    public virtual DbSet<Conversionserver> Conversionservers { get; set; }

    public virtual DbSet<Conversionserverconvertertype> Conversionserverconvertertypes { get; set; }

    public virtual DbSet<Conversionserverpriority> Conversionserverpriorities { get; set; }

    public virtual DbSet<Conversiontask> Conversiontasks { get; set; }

    public virtual DbSet<Conversiontaskdependency> Conversiontaskdependencies { get; set; }

    public virtual DbSet<Conversiontaskeventhandler> Conversiontaskeventhandlers { get; set; }

    public virtual DbSet<Conversiontaskhandlererror> Conversiontaskhandlererrors { get; set; }

    public virtual DbSet<Conversiontaskresult> Conversiontaskresults { get; set; }

    public virtual DbSet<Convertertype> Convertertypes { get; set; }

    public virtual DbSet<CoreGloballayout> CoreGloballayouts { get; set; }

    public virtual DbSet<CoreItemgridlayout> CoreItemgridlayouts { get; set; }

    public virtual DbSet<CoreRelgridlayout> CoreRelgridlayouts { get; set; }

    public virtual DbSet<CoreSearchcountmodeexception> CoreSearchcountmodeexceptions { get; set; }

    public virtual DbSet<Coresearchgridenabledediting> Coresearchgridenablededitings { get; set; }

    public virtual DbSet<CuiControl> CuiControls { get; set; }

    public virtual DbSet<CuiControlcommandbaritem> CuiControlcommandbaritems { get; set; }

    public virtual DbSet<CuiControleventhandler> CuiControleventhandlers { get; set; }

    public virtual DbSet<CuiDashboard> CuiDashboards { get; set; }

    public virtual DbSet<CuiEvent> CuiEvents { get; set; }

    public virtual DbSet<CuiLocation> CuiLocations { get; set; }

    public virtual DbSet<CuiPresentconfigwinsection> CuiPresentconfigwinsections { get; set; }

    public virtual DbSet<CuiWindowsection> CuiWindowsections { get; set; }

    public virtual DbSet<CuiWindowsectioncontrol> CuiWindowsectioncontrols { get; set; }

    public virtual DbSet<Cuidependency> Cuidependencies { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CwsEndpointconfiguration> CwsEndpointconfigurations { get; set; }

    public virtual DbSet<CwsItemtypereference> CwsItemtypereferences { get; set; }

    public virtual DbSet<CwsMethodreference> CwsMethodreferences { get; set; }

    public virtual DbSet<CwsWebservice> CwsWebservices { get; set; }

    public virtual DbSet<DacDomaindefinition> DacDomaindefinitions { get; set; }

    public virtual DbSet<DacSubdomainpermcompiled> DacSubdomainpermcompileds { get; set; }

    public virtual DbSet<DacSubdomainpermission> DacSubdomainpermissions { get; set; }

    public virtual DbSet<DacSubdomainpolicy> DacSubdomainpolicies { get; set; }

    public virtual DbSet<DacUiSubdomainpermission> DacUiSubdomainpermissions { get; set; }

    public virtual DbSet<Dashboard> Dashboards { get; set; }

    public virtual DbSet<DashboardChart> DashboardCharts { get; set; }

    public virtual DbSet<DashboardWidget> DashboardWidgets { get; set; }

    public virtual DbSet<DashboardWidgetTemplate> DashboardWidgetTemplates { get; set; }

    public virtual DbSet<DashboardWidgetTemplateProp> DashboardWidgetTemplateProps { get; set; }

    public virtual DbSet<Databaseupgrade> Databaseupgrades { get; set; }

    public virtual DbSet<Databaseupgradepatch> Databaseupgradepatches { get; set; }

    public virtual DbSet<DesignToGoal> DesignToGoals { get; set; }

    public virtual DbSet<Discussion> Discussions { get; set; }

    public virtual DbSet<Discussiondefinition> Discussiondefinitions { get; set; }

    public virtual DbSet<Discussiondefinitionview> Discussiondefinitionviews { get; set; }

    public virtual DbSet<Discussiontemplate> Discussiontemplates { get; set; }

    public virtual DbSet<Discussiontemplateview> Discussiontemplateviews { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<DocumentChange> DocumentChanges { get; set; }

    public virtual DbSet<DocumentFile> DocumentFiles { get; set; }

    public virtual DbSet<DrFamilyelement> DrFamilyelements { get; set; }

    public virtual DbSet<DrFamilyelementQryQueryitem> DrFamilyelementQryQueryitems { get; set; }

    public virtual DbSet<DrFamilyeventhandler> DrFamilyeventhandlers { get; set; }

    public virtual DbSet<DrRelationship> DrRelationships { get; set; }

    public virtual DbSet<DrRelationshipfamily> DrRelationshipfamilies { get; set; }

    public virtual DbSet<DrUiRelationshipfamily> DrUiRelationshipfamilies { get; set; }

    public virtual DbSet<Ecn> Ecns { get; set; }

    public virtual DbSet<EcnAffectedItem> EcnAffectedItems { get; set; }

    public virtual DbSet<EcnEcr> EcnEcrs { get; set; }

    public virtual DbSet<EcnFile> EcnFiles { get; set; }

    public virtual DbSet<Ecr> Ecrs { get; set; }

    public virtual DbSet<EcrAffectedItem> EcrAffectedItems { get; set; }

    public virtual DbSet<EcrFile> EcrFiles { get; set; }

    public virtual DbSet<EcrPr> EcrPrs { get; set; }

    public virtual DbSet<EffsExpression> EffsExpressions { get; set; }

    public virtual DbSet<EffsExpressioncontrolleditem> EffsExpressioncontrolleditems { get; set; }

    public virtual DbSet<EffsModel> EffsModels { get; set; }

    public virtual DbSet<EffsPartBomExpression> EffsPartBomExpressions { get; set; }

    public virtual DbSet<EffsScope> EffsScopes { get; set; }

    public virtual DbSet<EffsScopeItemtype> EffsScopeItemtypes { get; set; }

    public virtual DbSet<EffsScopeVariable> EffsScopeVariables { get; set; }

    public virtual DbSet<EffsVariable> EffsVariables { get; set; }

    public virtual DbSet<EmailMessage> EmailMessages { get; set; }

    public virtual DbSet<EngineeringEfficiency> EngineeringEfficiencies { get; set; }

    public virtual DbSet<EngineeringOptimization> EngineeringOptimizations { get; set; }

    public virtual DbSet<Exclusion> Exclusions { get; set; }

    public virtual DbSet<ExpressDco> ExpressDcos { get; set; }

    public virtual DbSet<ExpressDcoAffectedItem> ExpressDcoAffectedItems { get; set; }

    public virtual DbSet<ExpressDcoFile> ExpressDcoFiles { get; set; }

    public virtual DbSet<ExpressDcoSignoff> ExpressDcoSignoffs { get; set; }

    public virtual DbSet<ExpressEco> ExpressEcos { get; set; }

    public virtual DbSet<ExpressEcoAffectedItem> ExpressEcoAffectedItems { get; set; }

    public virtual DbSet<ExpressEcoEdr> ExpressEcoEdrs { get; set; }

    public virtual DbSet<ExpressEcoEdrGrouping> ExpressEcoEdrGroupings { get; set; }

    public virtual DbSet<ExpressEcoFile> ExpressEcoFiles { get; set; }

    public virtual DbSet<ExpressEcoImpactMatrix> ExpressEcoImpactMatrices { get; set; }

    public virtual DbSet<ExpressEcoSignoff> ExpressEcoSignoffs { get; set; }

    public virtual DbSet<ExpressEdr> ExpressEdrs { get; set; }

    public virtual DbSet<ExpressEdrAffectedItem> ExpressEdrAffectedItems { get; set; }

    public virtual DbSet<ExpressEdrFile> ExpressEdrFiles { get; set; }

    public virtual DbSet<ExpressEdrSignoff> ExpressEdrSignoffs { get; set; }

    public virtual DbSet<Favorite> Favorites { get; set; }

    public virtual DbSet<Favoritefolder> Favoritefolders { get; set; }

    public virtual DbSet<Favoritemustviewby> Favoritemustviewbies { get; set; }

    public virtual DbSet<FeatureLicense> FeatureLicenses { get; set; }

    public virtual DbSet<Feed> Feeds { get; set; }

    public virtual DbSet<Feedtemplate> Feedtemplates { get; set; }

    public virtual DbSet<Field> Fields { get; set; }

    public virtual DbSet<FieldEvent> FieldEvents { get; set; }

    public virtual DbSet<File> Files { get; set; }

    public virtual DbSet<Filecontaineritem> Filecontaineritems { get; set; }

    public virtual DbSet<Filecontainerlocator> Filecontainerlocators { get; set; }

    public virtual DbSet<Fileexchangepackage> Fileexchangepackages { get; set; }

    public virtual DbSet<Fileexchangepackagefile> Fileexchangepackagefiles { get; set; }

    public virtual DbSet<Fileexchangetxn> Fileexchangetxns { get; set; }

    public virtual DbSet<Fileexchangetxnstate> Fileexchangetxnstates { get; set; }

    public virtual DbSet<Filegroup> Filegroups { get; set; }

    public virtual DbSet<FilegroupFile> FilegroupFiles { get; set; }

    public virtual DbSet<Fileselector> Fileselectors { get; set; }

    public virtual DbSet<Fileselectortemplate> Fileselectortemplates { get; set; }

    public virtual DbSet<Filetype> Filetypes { get; set; }

    public virtual DbSet<FilterValue> FilterValues { get; set; }

    public virtual DbSet<Form> Forms { get; set; }

    public virtual DbSet<FormEvent> FormEvents { get; set; }

    public virtual DbSet<Forum> Forums { get; set; }

    public virtual DbSet<Forumitem> Forumitems { get; set; }

    public virtual DbSet<Forummessagegroup> Forummessagegroups { get; set; }

    public virtual DbSet<Forummustviewby> Forummustviewbies { get; set; }

    public virtual DbSet<Forumsearch> Forumsearches { get; set; }

    public virtual DbSet<Forumsharedwith> Forumsharedwiths { get; set; }

    public virtual DbSet<Forumwantviewby> Forumwantviewbies { get; set; }

    public virtual DbSet<FrRepresentation> FrRepresentations { get; set; }

    public virtual DbSet<FrRepresentationfile> FrRepresentationfiles { get; set; }

    public virtual DbSet<FrRepresentationtype> FrRepresentationtypes { get; set; }

    public virtual DbSet<FrReptypeCharacteristic> FrReptypeCharacteristics { get; set; }

    public virtual DbSet<FrSupportedfiletype> FrSupportedfiletypes { get; set; }

    public virtual DbSet<Frame> Frames { get; set; }

    public virtual DbSet<Frameset> Framesets { get; set; }

    public virtual DbSet<Globalpresentationconfig> Globalpresentationconfigs { get; set; }

    public virtual DbSet<GnConnectortype> GnConnectortypes { get; set; }

    public virtual DbSet<GnConnectortypeproperty> GnConnectortypeproperties { get; set; }

    public virtual DbSet<GnConnectorviewdefinition> GnConnectorviewdefinitions { get; set; }

    public virtual DbSet<GnConnectorviewtemplate> GnConnectorviewtemplates { get; set; }

    public virtual DbSet<GnGraphviewconnector> GnGraphviewconnectors { get; set; }

    public virtual DbSet<GnGraphviewdefinition> GnGraphviewdefinitions { get; set; }

    public virtual DbSet<GnGraphviewitemtype> GnGraphviewitemtypes { get; set; }

    public virtual DbSet<GnGraphviewnode> GnGraphviewnodes { get; set; }

    public virtual DbSet<GnGvdefaultcard> GnGvdefaultcards { get; set; }

    public virtual DbSet<GnNodetype> GnNodetypes { get; set; }

    public virtual DbSet<GnNodetypeproperty> GnNodetypeproperties { get; set; }

    public virtual DbSet<GnNodeviewdefinition> GnNodeviewdefinitions { get; set; }

    public virtual DbSet<GnNodeviewtemplate> GnNodeviewtemplates { get; set; }

    public virtual DbSet<GnSystemdefaultcard> GnSystemdefaultcards { get; set; }

    public virtual DbSet<GnViewcard> GnViewcards { get; set; }

    public virtual DbSet<Grid> Grids { get; set; }

    public virtual DbSet<GridColumn> GridColumns { get; set; }

    public virtual DbSet<GridEvent> GridEvents { get; set; }

    public virtual DbSet<GridLayout> GridLayouts { get; set; }

    public virtual DbSet<Help> Helps { get; set; }

    public virtual DbSet<HelpSeeAlso> HelpSeeAlsos { get; set; }

    public virtual DbSet<HideIn> HideIns { get; set; }

    public virtual DbSet<HideRelatedIn> HideRelatedIns { get; set; }

    public virtual DbSet<History> Histories { get; set; }

    public virtual DbSet<HistoryAction> HistoryActions { get; set; }

    public virtual DbSet<HistoryContainer> HistoryContainers { get; set; }

    public virtual DbSet<HistoryTemplate> HistoryTemplates { get; set; }

    public virtual DbSet<HistoryTemplateAction> HistoryTemplateActions { get; set; }

    public virtual DbSet<HistoryTemplateWhereUsed> HistoryTemplateWhereUseds { get; set; }

    public virtual DbSet<Historysecuremessage> Historysecuremessages { get; set; }

    public virtual DbSet<Identity> Identities { get; set; }

    public virtual DbSet<IdentityList> IdentityLists { get; set; }

    public virtual DbSet<IdentityListInfo> IdentityListInfos { get; set; }

    public virtual DbSet<Implement> Implements { get; set; }

    public virtual DbSet<InbasketTask> InbasketTasks { get; set; }

    public virtual DbSet<InheritedServerEvent> InheritedServerEvents { get; set; }

    public virtual DbSet<ItemAction> ItemActions { get; set; }

    public virtual DbSet<ItemReport> ItemReports { get; set; }

    public virtual DbSet<Itempresentationconfiguration> Itempresentationconfigurations { get; set; }

    public virtual DbSet<Itemtype> Itemtypes { get; set; }

    public virtual DbSet<ItemtypeLifeCycle> ItemtypeLifeCycles { get; set; }

    public virtual DbSet<ItemtypeXpropertydefinition> ItemtypeXpropertydefinitions { get; set; }

    public virtual DbSet<Itpresentationconfiguration> Itpresentationconfigurations { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<LifeCycleMap> LifeCycleMaps { get; set; }

    public virtual DbSet<LifeCycleState> LifeCycleStates { get; set; }

    public virtual DbSet<LifeCycleTransition> LifeCycleTransitions { get; set; }

    public virtual DbSet<List> Lists { get; set; }

    public virtual DbSet<Locale> Locales { get; set; }

    public virtual DbSet<Located> Locateds { get; set; }

    public virtual DbSet<Lockeditem> Lockeditems { get; set; }

    public virtual DbSet<Lockeduser> Lockedusers { get; set; }

    public virtual DbSet<Manufacturer> Manufacturers { get; set; }

    public virtual DbSet<ManufacturerManfPart> ManufacturerManfParts { get; set; }

    public virtual DbSet<ManufacturerPart> ManufacturerParts { get; set; }

    public virtual DbSet<ManufacturerPartFile> ManufacturerPartFiles { get; set; }

    public virtual DbSet<ManufacturerPartPart> ManufacturerPartParts { get; set; }

    public virtual DbSet<MeasurementUnit> MeasurementUnits { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<MessageAcknowledgement> MessageAcknowledgements { get; set; }

    public virtual DbSet<Method> Methods { get; set; }

    public virtual DbSet<Methodtemplate> Methodtemplates { get; set; }

    public virtual DbSet<Metric> Metrics { get; set; }

    public virtual DbSet<MetricValue> MetricValues { get; set; }

    public virtual DbSet<Model> Models { get; set; }

    public virtual DbSet<Morphae> Morphaes { get; set; }

    public virtual DbSet<MpMaccondition> MpMacconditions { get; set; }

    public virtual DbSet<MpMacpolicy> MpMacpolicies { get; set; }

    public virtual DbSet<MpMacpolicycontrolledtype> MpMacpolicycontrolledtypes { get; set; }

    public virtual DbSet<MpMacpolicyexemptidentity> MpMacpolicyexemptidentities { get; set; }

    public virtual DbSet<MpPolicyaccessenvattribute> MpPolicyaccessenvattributes { get; set; }

    public virtual DbSet<MpPolicyaccessitem> MpPolicyaccessitems { get; set; }

    public virtual DbSet<MpoMasspromotion> MpoMasspromotions { get; set; }

    public virtual DbSet<MpoMasspromotionrecord> MpoMasspromotionrecords { get; set; }

    public virtual DbSet<MppLocation> MppLocations { get; set; }

    public virtual DbSet<Myreport> Myreports { get; set; }

    public virtual DbSet<OldPassword> OldPasswords { get; set; }

    public virtual DbSet<Packagedefinition> Packagedefinitions { get; set; }

    public virtual DbSet<Packagedependson> Packagedependsons { get; set; }

    public virtual DbSet<Packageelement> Packageelements { get; set; }

    public virtual DbSet<Packagegroup> Packagegroups { get; set; }

    public virtual DbSet<Packagereferencedelement> Packagereferencedelements { get; set; }

    public virtual DbSet<Part> Parts { get; set; }

    public virtual DbSet<PartAlternate> PartAlternates { get; set; }

    public virtual DbSet<PartAml> PartAmls { get; set; }

    public virtual DbSet<PartBom> PartBoms { get; set; }

    public virtual DbSet<PartCad> PartCads { get; set; }

    public virtual DbSet<PartChange> PartChanges { get; set; }

    public virtual DbSet<PartDocument> PartDocuments { get; set; }

    public virtual DbSet<PartGoal> PartGoals { get; set; }

    public virtual DbSet<PartMultilevelBom> PartMultilevelBoms { get; set; }

    public virtual DbSet<Pdfwmconfiguration> Pdfwmconfigurations { get; set; }

    public virtual DbSet<Pdfwmtemplate> Pdfwmtemplates { get; set; }

    public virtual DbSet<PeDeviation> PeDeviations { get; set; }

    public virtual DbSet<PeMainpreference> PeMainpreferences { get; set; }

    public virtual DbSet<PeReverseitemsfedcad> PeReverseitemsfedcads { get; set; }

    public virtual DbSet<PeReverseitemsfedpart> PeReverseitemsfedparts { get; set; }

    public virtual DbSet<PeReworkOrder> PeReworkOrders { get; set; }

    public virtual DbSet<PeWaiver> PeWaivers { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<PermissionExplicitdefine> PermissionExplicitdefines { get; set; }

    public virtual DbSet<PermissionItemclassification> PermissionItemclassifications { get; set; }

    public virtual DbSet<PermissionPropertyvalue> PermissionPropertyvalues { get; set; }

    public virtual DbSet<Pr> Prs { get; set; }

    public virtual DbSet<PrFile> PrFiles { get; set; }

    public virtual DbSet<Preference> Preferences { get; set; }

    public virtual DbSet<Preferencetabtype> Preferencetabtypes { get; set; }

    public virtual DbSet<Preferencetype> Preferencetypes { get; set; }

    public virtual DbSet<Presentableitem> Presentableitems { get; set; }

    public virtual DbSet<Presentationcommand> Presentationcommands { get; set; }

    public virtual DbSet<Presentationcommandbarsection> Presentationcommandbarsections { get; set; }

    public virtual DbSet<Presentationconfiguration> Presentationconfigurations { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductInnovation> ProductInnovations { get; set; }

    public virtual DbSet<Property> Properties { get; set; }

    public virtual DbSet<QryQuerydefinition> QryQuerydefinitions { get; set; }

    public virtual DbSet<QryQuerydefinitionevent> QryQuerydefinitionevents { get; set; }

    public virtual DbSet<QryQueryitem> QryQueryitems { get; set; }

    public virtual DbSet<QryQueryitemselectproperty> QryQueryitemselectproperties { get; set; }

    public virtual DbSet<QryQueryitemsortproperty> QryQueryitemsortproperties { get; set; }

    public virtual DbSet<QryQueryparameter> QryQueryparameters { get; set; }

    public virtual DbSet<QryQueryreference> QryQueryreferences { get; set; }

    public virtual DbSet<QryStructureresolutionmodel> QryStructureresolutionmodels { get; set; }

    public virtual DbSet<RbColumndefinition> RbColumndefinitions { get; set; }

    public virtual DbSet<RbColumnmapping> RbColumnmappings { get; set; }

    public virtual DbSet<RbLocalstyle> RbLocalstyles { get; set; }

    public virtual DbSet<RbLocalstyledefinition> RbLocalstyledefinitions { get; set; }

    public virtual DbSet<RbParameterviewmodel> RbParameterviewmodels { get; set; }

    public virtual DbSet<RbQuerydefinitionparametermap> RbQuerydefinitionparametermaps { get; set; }

    public virtual DbSet<RbTreegridviewdefinition> RbTreegridviewdefinitions { get; set; }

    public virtual DbSet<RbTreerowdefinition> RbTreerowdefinitions { get; set; }

    public virtual DbSet<RbTreerowreference> RbTreerowreferences { get; set; }

    public virtual DbSet<RbUiActivatetgvdwizard> RbUiActivatetgvdwizards { get; set; }

    public virtual DbSet<RbUiCelleditor> RbUiCelleditors { get; set; }

    public virtual DbSet<RbUserinputdatasource> RbUserinputdatasources { get; set; }

    public virtual DbSet<Readpriority> Readpriorities { get; set; }

    public virtual DbSet<RelationshipGridEvent> RelationshipGridEvents { get; set; }

    public virtual DbSet<RelationshipView> RelationshipViews { get; set; }

    public virtual DbSet<Relationshiptype> Relationshiptypes { get; set; }

    public virtual DbSet<Replicationrule> Replicationrules { get; set; }

    public virtual DbSet<Replicationrulefiletype> Replicationrulefiletypes { get; set; }

    public virtual DbSet<Replicationruletargetvault> Replicationruletargetvaults { get; set; }

    public virtual DbSet<Replicationtxn> Replicationtxns { get; set; }

    public virtual DbSet<Replicationtxnlog> Replicationtxnlogs { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<Revision> Revisions { get; set; }

    public virtual DbSet<Runreportbyuser> Runreportbyusers { get; set; }

    public virtual DbSet<Savedsearch> Savedsearches { get; set; }

    public virtual DbSet<ScheduledTask> ScheduledTasks { get; set; }

    public virtual DbSet<Scopecachedependency> Scopecachedependencies { get; set; }

    public virtual DbSet<Search> Searches { get; set; }

    public virtual DbSet<SearchCriterion> SearchCriteria { get; set; }

    public virtual DbSet<Searchmode> Searchmodes { get; set; }

    public virtual DbSet<Securemessage> Securemessages { get; set; }

    public virtual DbSet<Securemessageaudio> Securemessageaudios { get; set; }

    public virtual DbSet<Securemessageflaggedby> Securemessageflaggedbies { get; set; }

    public virtual DbSet<Securemessagemarkup> Securemessagemarkups { get; set; }

    public virtual DbSet<Securemessagevideo> Securemessagevideos { get; set; }

    public virtual DbSet<Securemessageviewtemplate> Securemessageviewtemplates { get; set; }

    public virtual DbSet<Securemessagevisibilityfilter> Securemessagevisibilityfilters { get; set; }

    public virtual DbSet<Selfservicereport> Selfservicereports { get; set; }

    public virtual DbSet<Selfservicereportfeatured> Selfservicereportfeatureds { get; set; }

    public virtual DbSet<Selfservicereporthelp> Selfservicereporthelps { get; set; }

    public virtual DbSet<Selfservicereportsetting> Selfservicereportsettings { get; set; }

    public virtual DbSet<Selfservicereportsharedwith> Selfservicereportsharedwiths { get; set; }

    public virtual DbSet<Sequence> Sequences { get; set; }

    public virtual DbSet<ServerEvent> ServerEvents { get; set; }

    public virtual DbSet<Serviceprovider> Serviceproviders { get; set; }

    public virtual DbSet<SimpleEco> SimpleEcos { get; set; }

    public virtual DbSet<SimpleEcoAffectedItem> SimpleEcoAffectedItems { get; set; }

    public virtual DbSet<SimpleEcoFile> SimpleEcoFiles { get; set; }

    public virtual DbSet<SimpleEcoSignoff> SimpleEcoSignoffs { get; set; }

    public virtual DbSet<SimpleMco> SimpleMcos { get; set; }

    public virtual DbSet<SimpleMcoFile> SimpleMcoFiles { get; set; }

    public virtual DbSet<SimpleMcoPart> SimpleMcoParts { get; set; }

    public virtual DbSet<SimpleMcoSignoff> SimpleMcoSignoffs { get; set; }

    public virtual DbSet<Sql> Sqls { get; set; }

    public virtual DbSet<SqlDependency> SqlDependencies { get; set; }

    public virtual DbSet<SsvcNotificationMessage> SsvcNotificationMessages { get; set; }

    public virtual DbSet<SsvcPreference> SsvcPreferences { get; set; }

    public virtual DbSet<Ssvcemaildigestentry> Ssvcemaildigestentries { get; set; }

    public virtual DbSet<Ssvcitem> Ssvcitems { get; set; }

    public virtual DbSet<Ssvcpresentationconfiguration> Ssvcpresentationconfigurations { get; set; }

    public virtual DbSet<StateDistribution> StateDistributions { get; set; }

    public virtual DbSet<StateEmail> StateEmails { get; set; }

    public virtual DbSet<StateNotification> StateNotifications { get; set; }

    public virtual DbSet<Statistic> Statistics { get; set; }

    public virtual DbSet<Storedsecuremessage> Storedsecuremessages { get; set; }

    public virtual DbSet<Systemevent> Systemevents { get; set; }

    public virtual DbSet<Systemeventhandler> Systemeventhandlers { get; set; }

    public virtual DbSet<Systemeventlog> Systemeventlogs { get; set; }

    public virtual DbSet<Systemeventlogdescriptor> Systemeventlogdescriptors { get; set; }

    public virtual DbSet<Systemfilecontainer> Systemfilecontainers { get; set; }

    public virtual DbSet<Team> Teams { get; set; }

    public virtual DbSet<TeamIdentity> TeamIdentities { get; set; }

    public virtual DbSet<TimeToManufacturing> TimeToManufacturings { get; set; }

    public virtual DbSet<TimeZone> TimeZones { get; set; }

    public virtual DbSet<TimeZoneHistory> TimeZoneHistories { get; set; }

    public virtual DbSet<TocAccess> TocAccesses { get; set; }

    public virtual DbSet<TocView> TocViews { get; set; }

    public virtual DbSet<TpImage> TpImages { get; set; }

    public virtual DbSet<TpItem> TpItems { get; set; }

    public virtual DbSet<TpStylesheet> TpStylesheets { get; set; }

    public virtual DbSet<TpXmlschema> TpXmlschemas { get; set; }

    public virtual DbSet<TpXmlschemaelement> TpXmlschemaelements { get; set; }

    public virtual DbSet<TpXmlschemaoutputsetting> TpXmlschemaoutputsettings { get; set; }

    public virtual DbSet<TransitionDistribution> TransitionDistributions { get; set; }

    public virtual DbSet<TransitionEmail> TransitionEmails { get; set; }

    public virtual DbSet<UnidrDeparture> UnidrDepartures { get; set; }

    public virtual DbSet<UnidrDestination> UnidrDestinations { get; set; }

    public virtual DbSet<UnidrRelationship> UnidrRelationships { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Usermessage> Usermessages { get; set; }

    public virtual DbSet<UvpUservisibilityrule> UvpUservisibilityrules { get; set; }

    public virtual DbSet<Value> Values { get; set; }

    public virtual DbSet<Variable> Variables { get; set; }

    public virtual DbSet<Variable1> Variables1 { get; set; }

    public virtual DbSet<Vault> Vaults { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<VendorPart> VendorParts { get; set; }

    public virtual DbSet<View> Views { get; set; }

    public virtual DbSet<ViewWith> ViewWiths { get; set; }

    public virtual DbSet<Viewer> Viewers { get; set; }

    public virtual DbSet<Wmconfiguration> Wmconfigurations { get; set; }

    public virtual DbSet<Wmitemtype> Wmitemtypes { get; set; }

    public virtual DbSet<Wmset> Wmsets { get; set; }

    public virtual DbSet<Wmsetconfiguration> Wmsetconfigurations { get; set; }

    public virtual DbSet<Wmsetting> Wmsettings { get; set; }

    public virtual DbSet<Wmsettingcontent> Wmsettingcontents { get; set; }

    public virtual DbSet<Wmsettinglcstate> Wmsettinglcstates { get; set; }

    public virtual DbSet<Wmtype> Wmtypes { get; set; }

    public virtual DbSet<Workflow> Workflows { get; set; }

    public virtual DbSet<WorkflowMap> WorkflowMaps { get; set; }

    public virtual DbSet<WorkflowMapActivity> WorkflowMapActivities { get; set; }

    public virtual DbSet<WorkflowMapPath> WorkflowMapPaths { get; set; }

    public virtual DbSet<WorkflowMapPathPost> WorkflowMapPathPosts { get; set; }

    public virtual DbSet<WorkflowMapPathPre> WorkflowMapPathPres { get; set; }

    public virtual DbSet<WorkflowMapVariable> WorkflowMapVariables { get; set; }

    public virtual DbSet<WorkflowProcess> WorkflowProcesses { get; set; }

    public virtual DbSet<WorkflowProcessActivity> WorkflowProcessActivities { get; set; }

    public virtual DbSet<WorkflowProcessPath> WorkflowProcessPaths { get; set; }

    public virtual DbSet<WorkflowProcessPathPost> WorkflowProcessPathPosts { get; set; }

    public virtual DbSet<WorkflowProcessPathPre> WorkflowProcessPathPres { get; set; }

    public virtual DbSet<WorkflowProcessVariable> WorkflowProcessVariables { get; set; }

    public virtual DbSet<WorkflowTask> WorkflowTasks { get; set; }

    public virtual DbSet<WorkflowTaskContainerTypeId> WorkflowTaskContainerTypeIds { get; set; }

    public virtual DbSet<WorkflowTaskItemTypeId> WorkflowTaskItemTypeIds { get; set; }

    public virtual DbSet<Xclass> Xclasses { get; set; }

    public virtual DbSet<XclassClassificationPerm> XclassClassificationPerms { get; set; }

    public virtual DbSet<XclassXpropertyFlatten> XclassXpropertyFlattens { get; set; }

    public virtual DbSet<XclassXpropertyFlattenMatrix> XclassXpropertyFlattenMatrices { get; set; }

    public virtual DbSet<XclassXpropertydefinition> XclassXpropertydefinitions { get; set; }

    public virtual DbSet<XclassXpropvaluePerm> XclassXpropvaluePerms { get; set; }

    public virtual DbSet<XclassifiableitemXclass> XclassifiableitemXclasses { get; set; }

    public virtual DbSet<Xclassificationtree> Xclassificationtrees { get; set; }

    public virtual DbSet<XclassificationtreeItemtype> XclassificationtreeItemtypes { get; set; }

    public virtual DbSet<Xitemtypeallowedproperty> Xitemtypeallowedproperties { get; set; }

    public virtual DbSet<Xpropertycontaineritem> Xpropertycontaineritems { get; set; }

    public virtual DbSet<Xpropertydefinition> Xpropertydefinitions { get; set; }

    public virtual DbSet<Xpropertyvalue> Xpropertyvalues { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Chinese_Taiwan_Stroke_CI_AS");

        modelBuilder.Entity<AcPolicyaccessattrdefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AC_POLIC__3214EC27C985A57B");

            entity.ToTable("AC_POLICYACCESSATTRDEFINITION", "innovator");

            entity.HasIndex(e => e.DrRelationshipId, "C141").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefinedOnItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFINED_ON_ITEMTYPE_ID");
            entity.Property(e => e.DrRelationshipId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DR_RELATIONSHIP_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.AcPolicyaccessattrdefinitions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__AC_POLICY__SOURC__6BB9E75F");
        });

        modelBuilder.Entity<AcPolicyaccessitemattribute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AC_POLIC__3214EC27307C7F14");

            entity.ToTable("AC_POLICYACCESSITEMATTRIBUTE", "innovator");

            entity.HasIndex(e => e.Name, "C89").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Access>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACCESS__3214EC27C65A2761");

            entity.ToTable("ACCESS", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => new { e.SourceId, e.RelatedId }, "IX_Access_source_id_related_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CanChangeAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("CAN_CHANGE_ACCESS");
            entity.Property(e => e.CanDelete)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_DELETE");
            entity.Property(e => e.CanDiscover)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("CAN_DISCOVER");
            entity.Property(e => e.CanGet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_GET");
            entity.Property(e => e.CanUpdate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_UPDATE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("END_DATE");
            entity.Property(e => e.FromDate)
                .HasColumnType("datetime")
                .HasColumnName("FROM_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ShowPermissionsWarning)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHOW_PERMISSIONS_WARNING");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Accesses)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACCESS__RELATED___15261146");

            entity.HasOne(d => d.Source).WithMany(p => p.Accesses)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ACCESS__SOURCE_I__1431ED0D");
        });

        modelBuilder.Entity<AccessExplicitdefine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACCESS_E__3214EC2735CD73F7");

            entity.ToTable("ACCESS_EXPLICITDEFINE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => new { e.SourceId, e.RelatedId }, "IX_access_explicitdefine_source_id_related_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CanDefineExplicitly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_DEFINE_EXPLICITLY");
            entity.Property(e => e.CanGetIsdefinedExplicitly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_GET_ISDEFINED_EXPLICITLY");
            entity.Property(e => e.CanUndefineExplicitly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_UNDEFINE_EXPLICITLY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.AccessExplicitdefines)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACCESS_EX__RELAT__1E7A7156");

            entity.HasOne(d => d.Source).WithMany(p => p.AccessExplicitdefines)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACCESS_EX__SOURC__1D864D1D");
        });

        modelBuilder.Entity<AccessItemclassification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACCESS_I__3214EC2744C9A0FB");

            entity.ToTable("ACCESS_ITEMCLASSIFICATION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.SourceId, "IX_access_itemclassification_source_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CanClassify)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_CLASSIFY");
            entity.Property(e => e.CanGetIsclassified)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_GET_ISCLASSIFIED");
            entity.Property(e => e.CanUnclassify)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_UNCLASSIFY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.AccessItemclassifications)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACCESS_IT__RELAT__2062B9C8");

            entity.HasOne(d => d.Source).WithMany(p => p.AccessItemclassifications)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACCESS_IT__SOURC__1F6E958F");
        });

        modelBuilder.Entity<AccessPropertyvalue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACCESS_P__3214EC27D464AD30");

            entity.ToTable("ACCESS_PROPERTYVALUE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.SourceId, "IX_access_propertyvalue_source_id");

            entity.HasIndex(e => new { e.SourceId, e.RelatedId }, "IX_access_propertyvalue_source_id_related_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CanChangeAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_CHANGE_ACCESS");
            entity.Property(e => e.CanGet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_GET");
            entity.Property(e => e.CanUpdate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_UPDATE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.AccessPropertyvalues)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACCESS_PR__RELAT__224B023A");

            entity.HasOne(d => d.Source).WithMany(p => p.AccessPropertyvalues)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACCESS_PR__SOURC__2156DE01");
        });

        modelBuilder.Entity<Action>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTION__3214EC2771432107");

            entity.ToTable("ACTION", "innovator");

            entity.HasIndex(e => e.Name, "C2").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Body).HasColumnName("BODY");
            entity.Property(e => e.CanExecute)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_EXECUTE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemQuery)
                .HasDefaultValueSql("(N'___is_new___')")
                .HasColumnName("ITEM_QUERY");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.Location)
                .HasMaxLength(64)
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Method)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("METHOD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnComplete)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_COMPLETE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(64)
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Activeuser>(entity =>
        {
            entity.HasKey(e => e.ArasSessionId);

            entity.ToTable("ACTIVEUSER", "application");

            entity.Property(e => e.ArasSessionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS_SESSION_ID");
            entity.Property(e => e.LastActivityTime)
                .HasColumnType("datetime")
                .HasColumnName("LAST_ACTIVITY_TIME");
            entity.Property(e => e.LoginName)
                .HasMaxLength(32)
                .HasColumnName("LOGIN_NAME");
            entity.Property(e => e.LoginTime)
                .HasColumnType("datetime")
                .HasColumnName("LOGIN_TIME");
        });

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC271D17F62D");

            entity.ToTable("ACTIVITY", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ActiveDate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVE_DATE");
            entity.Property(e => e.CanDelegate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_DELEGATE");
            entity.Property(e => e.CanRefuse)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_REFUSE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClonedAs)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLONED_AS");
            entity.Property(e => e.ClosedDate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSED_DATE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ConsolidateOndelegate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONSOLIDATE_ONDELEGATE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EscalateTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESCALATE_TO");
            entity.Property(e => e.ExpectedDuration).HasColumnName("EXPECTED_DURATION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("ICON");
            entity.Property(e => e.IsAuto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_AUTO");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsEnd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_END");
            entity.Property(e => e.IsEscalated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_ESCALATED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsStart)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_START");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Message)
                .HasMaxLength(1024)
                .HasColumnName("MESSAGE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.ReminderCount).HasColumnName("REMINDER_COUNT");
            entity.Property(e => e.ReminderInterval).HasColumnName("REMINDER_INTERVAL");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Subflow)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBFLOW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TimeoutDuration).HasColumnName("TIMEOUT_DURATION");
            entity.Property(e => e.WaitForAllInputs)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WAIT_FOR_ALL_INPUTS");
            entity.Property(e => e.WaitForAllVotes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WAIT_FOR_ALL_VOTES");
        });

        modelBuilder.Entity<ActivityAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC276C275179");

            entity.ToTable("ACTIVITY_ASSIGNMENT", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => new { e.RelatedId, e.IsDisabled }, "IX_ACTIVITY_ASSIGNMENT_RELATED_ID_IS_DISABLED");

            entity.HasIndex(e => new { e.SourceId, e.IsDisabled }, "IX_Activity_assignment_source_id_is_disabled_related_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.ClaimedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMED_BY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClosedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLOSED_BY");
            entity.Property(e => e.ClosedOn)
                .HasColumnType("datetime")
                .HasColumnName("CLOSED_ON");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EscalateTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESCALATE_TO");
            entity.Property(e => e.ForAllMembers)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FOR_ALL_MEMBERS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDisabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_DISABLED");
            entity.Property(e => e.IsOverdue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_OVERDUE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Path)
                .HasMaxLength(32)
                .HasColumnName("PATH");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.RemindersSent)
                .HasDefaultValueSql("((0))")
                .HasColumnName("REMINDERS_SENT");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VotingWeight)
                .HasDefaultValueSql("((100))")
                .HasColumnName("VOTING_WEIGHT");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityAssignments)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__32B6742D");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityAssignments)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__31C24FF4");
        });

        modelBuilder.Entity<ActivityEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27D503A4E6");

            entity.ToTable("ACTIVITY_EMAIL", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AlternateIdentity)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALTERNATE_IDENTITY");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(64)
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityEmails)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__26509D48");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityEmails)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__255C790F");
        });

        modelBuilder.Entity<ActivityMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC2721B37B6C");

            entity.ToTable("ACTIVITY_METHOD", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityMethods)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__349EBC9F");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityMethods)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__33AA9866");
        });

        modelBuilder.Entity<ActivityTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27D46EA995");

            entity.ToTable("ACTIVITY_TASK", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(1024)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence).HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTasks)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__3592E0D8");
        });

        modelBuilder.Entity<ActivityTaskValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27AE12405E");

            entity.ToTable("ACTIVITY_TASK_VALUE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.CompletedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMPLETED_BY");
            entity.Property(e => e.CompletedOn)
                .HasColumnType("datetime")
                .HasColumnName("COMPLETED_ON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Task)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TASK");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTaskValues)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__246854D6");
        });

        modelBuilder.Entity<ActivityTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC276D1FDA3F");

            entity.ToTable("ACTIVITY_TEMPLATE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.CanDelegate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("CAN_DELEGATE");
            entity.Property(e => e.CanRefuse)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("CAN_REFUSE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ConsolidateOndelegate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONSOLIDATE_ONDELEGATE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EscalateTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESCALATE_TO");
            entity.Property(e => e.ExpectedDuration).HasColumnName("EXPECTED_DURATION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("ICON");
            entity.Property(e => e.IsAuto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_AUTO");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsEnd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_END");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsStart)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_START");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Message)
                .HasMaxLength(1024)
                .HasDefaultValueSql("(N'Please Review...')")
                .HasColumnName("MESSAGE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasDefaultValueSql("(N'Activity')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.ReminderCount).HasColumnName("REMINDER_COUNT");
            entity.Property(e => e.ReminderInterval).HasColumnName("REMINDER_INTERVAL");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Subflow)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBFLOW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TimeoutDuration).HasColumnName("TIMEOUT_DURATION");
            entity.Property(e => e.WaitForAllInputs)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WAIT_FOR_ALL_INPUTS");
            entity.Property(e => e.WaitForAllVotes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WAIT_FOR_ALL_VOTES");
            entity.Property(e => e.X).HasDefaultValueSql("((10))");
            entity.Property(e => e.Y).HasDefaultValueSql("((10))");
        });

        modelBuilder.Entity<ActivityTemplateAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC272E6656FA");

            entity.ToTable("ACTIVITY_TEMPLATE_ASSIGNMENT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EscalateTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESCALATE_TO");
            entity.Property(e => e.ForAllMembers)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FOR_ALL_MEMBERS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VotingWeight)
                .HasDefaultValueSql("((100))")
                .HasColumnName("VOTING_WEIGHT");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityTemplateAssignments)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__1ADEEA9C");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTemplateAssignments)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__19EAC663");
        });

        modelBuilder.Entity<ActivityTemplateEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27851D21F9");

            entity.ToTable("ACTIVITY_TEMPLATE_EMAIL", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AlternateIdentity)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALTERNATE_IDENTITY");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(64)
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityTemplateEmails)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__1CC7330E");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTemplateEmails)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__1BD30ED5");
        });

        modelBuilder.Entity<ActivityTemplateMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC2745AE41B2");

            entity.ToTable("ACTIVITY_TEMPLATE_METHOD", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityTemplateMethods)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__377B294A");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTemplateMethods)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__36870511");
        });

        modelBuilder.Entity<ActivityTemplateTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27A021768E");

            entity.ToTable("ACTIVITY_TEMPLATE_TASK", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(1024)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence).HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTemplateTasks)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__386F4D83");
        });

        modelBuilder.Entity<ActivityTemplateTransition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC2788C8C3E9");

            entity.ToTable("ACTIVITY_TEMPLATE_TRANSITION", "innovator");

            entity.HasIndex(e => new { e.ControlledItemtype, e.RelatedId, e.SourceId }, "C29").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ControlledItemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLLED_ITEMTYPE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'on_activate')")
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityTemplateTransitions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__3A5795F5");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTemplateTransitions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__396371BC");
        });

        modelBuilder.Entity<ActivityTemplateVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27B924E86F");

            entity.ToTable("ACTIVITY_TEMPLATE_VARIABLE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Datatype)
                .HasMaxLength(64)
                .HasColumnName("DATATYPE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(80)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsHidden)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_HIDDEN");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence).HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.Source)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.ActivityTemplateVariables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__3B4BBA2E");
        });

        modelBuilder.Entity<ActivityTransition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC274673E8D4");

            entity.ToTable("ACTIVITY_TRANSITION", "innovator");

            entity.HasIndex(e => new { e.ControlledItemtype, e.RelatedId, e.SourceId }, "C30").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ControlledItemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLLED_ITEMTYPE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'on_activate')")
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityTransitions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__3D3402A0");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTransitions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__3C3FDE67");
        });

        modelBuilder.Entity<ActivityVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC2726FDA5A4");

            entity.ToTable("ACTIVITY_VARIABLE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Datatype)
                .HasMaxLength(64)
                .HasColumnName("DATATYPE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(80)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsHidden)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_HIDDEN");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence).HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.Source)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.ActivityVariables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__3E2826D9");
        });

        modelBuilder.Entity<ActivityVariableValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27981B44AE");

            entity.ToTable("ACTIVITY_VARIABLE_VALUE", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value)
                .HasMaxLength(80)
                .HasColumnName("VALUE");
            entity.Property(e => e.Variable)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VARIABLE");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityVariableValues)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__2374309D");
        });

        modelBuilder.Entity<AffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AFFECTED__3214EC27783F37F7");

            entity.ToTable("AFFECTED_ITEM", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.AffectedId, "I1");

            entity.HasIndex(e => e.NewItemId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Action)
                .HasMaxLength(64)
                .HasColumnName("ACTION");
            entity.Property(e => e.AffectedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AFFECTED_ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Grouping)
                .HasMaxLength(64)
                .HasColumnName("GROUPING");
            entity.Property(e => e.InBuildDisposition)
                .HasMaxLength(64)
                .HasColumnName("IN_BUILD_DISPOSITION");
            entity.Property(e => e.InServiceDisposition)
                .HasMaxLength(64)
                .HasColumnName("IN_SERVICE_DISPOSITION");
            entity.Property(e => e.Interchangeable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INTERCHANGEABLE");
            entity.Property(e => e.IsCondition).HasColumnName("IS_CONDITION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemAction)
                .HasMaxLength(64)
                .HasColumnName("ITEM_ACTION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_ITEM_ID");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Relationshiptype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATIONSHIPTYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WasCondition).HasColumnName("WAS_CONDITION");
        });

        modelBuilder.Entity<AffectedItemProperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AFFECTED__3214EC2772242091");

            entity.ToTable("AFFECTED_ITEM_PROPERTY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewValue).HasColumnName("NEW_VALUE");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(512)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.AffectedItemProperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__AFFECTED___SOURC__3805392F");
        });

        modelBuilder.Entity<AffectedItemRelationship>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AFFECTED__3214EC276446DCB2");

            entity.ToTable("AFFECTED_ITEM_RELATIONSHIP", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.AffectedItemRelationships)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__AFFECTED___RELAT__39ED81A1");

            entity.HasOne(d => d.Source).WithMany(p => p.AffectedItemRelationships)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__AFFECTED___SOURC__38F95D68");
        });

        modelBuilder.Entity<AffectedRelationship>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AFFECTED__3214EC276A6E0601");

            entity.ToTable("AFFECTED_RELATIONSHIP", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AffectedRelId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AFFECTED_REL_ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewRelId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_REL_ID");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelAction)
                .HasMaxLength(64)
                .HasColumnName("REL_ACTION");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<AffectedRelationshipProperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AFFECTED__3214EC27E434ED91");

            entity.ToTable("AFFECTED_RELATIONSHIP_PROPERTY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewValue).HasColumnName("NEW_VALUE");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(512)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.AffectedRelationshipProperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__AFFECTED___SOURC__3AE1A5DA");
        });

        modelBuilder.Entity<Alias>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ALIAS__3214EC27E8EE4447");

            entity.ToTable("ALIAS", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "IX_alias_related_id_source_id");

            entity.HasIndex(e => new { e.SourceId, e.RelatedId, e.FromDate, e.EndDate }, "IX_alias_source_id_related_id_from_date_end_date");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("END_DATE");
            entity.Property(e => e.FromDate)
                .HasColumnType("datetime")
                .HasColumnName("FROM_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Aliases)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ALIAS__RELATED_I__40106F4B");

            entity.HasOne(d => d.Source).WithMany(p => p.Aliases)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ALIAS__SOURCE_ID__3F1C4B12");
        });

        modelBuilder.Entity<AllowedPermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ALLOWED___3214EC27DE481EAC");

            entity.ToTable("ALLOWED_PERMISSION", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_DEFAULT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.AllowedPermissions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ALLOWED_P__RELAT__2A212E2C");

            entity.HasOne(d => d.Source).WithMany(p => p.AllowedPermissions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ALLOWED_P__SOURC__292D09F3");
        });

        modelBuilder.Entity<AllowedWorkflow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ALLOWED___3214EC27316425CC");

            entity.ToTable("ALLOWED_WORKFLOW", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEFAULT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.AllowedWorkflows)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ALLOWED_W__RELAT__2DF1BF10");

            entity.HasOne(d => d.Source).WithMany(p => p.AllowedWorkflows)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ALLOWED_W__SOURC__2CFD9AD7");
        });

        modelBuilder.Entity<AppliedUpdate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__APPLIED___3214EC278AFB5B39");

            entity.ToTable("APPLIED_UPDATES", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DateApplied)
                .HasColumnType("datetime")
                .HasColumnName("DATE_APPLIED");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UpNumber)
                .HasMaxLength(32)
                .HasColumnName("UP_NUMBER");
            entity.Property(e => e.UpdateGeneration).HasColumnName("UPDATE_GENERATION");
        });

        modelBuilder.Entity<BaseNotificationMessage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_NOTIFICATION_MESSAGE", "innovator");

            entity.Property(e => e.Acknowledge)
                .HasMaxLength(64)
                .HasColumnName("ACKNOWLEDGE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Board>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BOARD__3214EC271043F4DA");

            entity.ToTable("BOARD", "innovator");

            entity.HasIndex(e => e.ItemConfigId, "C101").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(256)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_TYPE_NAME");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Body>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BODY__3214EC27D93E6852");

            entity.ToTable("BODY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.BgAttach)
                .HasMaxLength(64)
                .HasColumnName("BG_ATTACH");
            entity.Property(e => e.BgColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BG_COLOR");
            entity.Property(e => e.BgImage)
                .HasMaxLength(128)
                .HasColumnName("BG_IMAGE");
            entity.Property(e => e.BgRepeat)
                .HasMaxLength(64)
                .HasColumnName("BG_REPEAT");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Bodies)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BODY__SOURCE_ID__0B9CA70C");
        });

        modelBuilder.Entity<BomInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BOM_INST__3214EC278990A540");

            entity.ToTable("BOM_INSTANCE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Angle).HasColumnName("ANGLE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReferenceDesignator)
                .HasMaxLength(16)
                .HasColumnName("REFERENCE_DESIGNATOR");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Side)
                .HasMaxLength(64)
                .HasColumnName("SIDE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.BomInstances)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__BOM_INSTA__SOURC__01741E54");
        });

        modelBuilder.Entity<BomSubstitute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BOM_SUBS__3214EC2783B8C33D");

            entity.ToTable("BOM_SUBSTITUTE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.BomSubstitutes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__BOM_SUBST__RELAT__035C66C6");

            entity.HasOne(d => d.Source).WithMany(p => p.BomSubstitutes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__BOM_SUBST__SOURC__0268428D");
        });

        modelBuilder.Entity<Cad>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD__3214EC2743E0E175");

            entity.ToTable("CAD", "innovator");

            entity.HasIndex(e => new { e.ItemNumber, e.Classification, e.ArasUniquenessHelper }, "C149").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => new { e.ConfigId, e.IsCurrent }, "IX_CAD_CONFIG_ID_IS_CURRENT");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_CAD_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.AuthoringTool)
                .HasMaxLength(64)
                .HasColumnName("AUTHORING_TOOL");
            entity.Property(e => e.AuthoringToolVersion)
                .HasMaxLength(32)
                .HasColumnName("AUTHORING_TOOL_VERSION");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.FromTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_TEMPLATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasChangePending)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_CHANGE_PENDING");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsStandard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_STANDARD");
            entity.Property(e => e.IsTemplate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_TEMPLATE");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MonolithicModelFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MONOLITHIC_MODEL_FILE");
            entity.Property(e => e.Name)
                .HasMaxLength(256)
                .HasColumnName("NAME");
            entity.Property(e => e.NativeFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATIVE_FILE");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(128)
                .HasColumnName("THUMBNAIL");
            entity.Property(e => e.ViewFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VIEW_FILE");
            entity.Property(e => e.ViewableFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VIEWABLE_FILE");
            entity.Property(e => e.XMax).HasColumnName("X_MAX");
            entity.Property(e => e.XMin).HasColumnName("X_MIN");
            entity.Property(e => e.YMax).HasColumnName("Y_MAX");
            entity.Property(e => e.YMin).HasColumnName("Y_MIN");
            entity.Property(e => e.ZMax).HasColumnName("Z_MAX");
            entity.Property(e => e.ZMin).HasColumnName("Z_MIN");
        });

        modelBuilder.Entity<CadChange>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD_CHAN__3214EC27C23F032F");

            entity.ToTable("CAD_CHANGES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CadChanges)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAD_CHANG__SOURC__3BD5CA13");
        });

        modelBuilder.Entity<CadInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD_INST__3214EC27E52F43F5");

            entity.ToTable("CAD_INSTANCE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(256)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransformationMatrix)
                .HasMaxLength(512)
                .HasColumnName("TRANSFORMATION_MATRIX");

            entity.HasOne(d => d.Source).WithMany(p => p.CadInstances)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAD_INSTA__SOURC__04508AFF");
        });

        modelBuilder.Entity<CadParent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD_PARE__3214EC2746251387");

            entity.ToTable("CAD_PARENT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CadParents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAD_PAREN__SOURC__3CC9EE4C");
        });

        modelBuilder.Entity<CadPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD_PART__3214EC271552866D");

            entity.ToTable("CAD_PART", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CadParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAD_PART__SOURCE__3DBE1285");
        });

        modelBuilder.Entity<CadStructure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD_STRU__3214EC27EA06A518");

            entity.ToTable("CAD_STRUCTURE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CadStructureRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CAD_STRUC__RELAT__3FA65AF7");

            entity.HasOne(d => d.Source).WithMany(p => p.CadStructureSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAD_STRUC__SOURC__3EB236BE");
        });

        modelBuilder.Entity<Cadfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CADFILES__3214EC27358FB0A3");

            entity.ToTable("CADFILES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AttachedFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ATTACHED_FILE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Cadfiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CADFILES__SOURCE__409A7F30");
        });

        modelBuilder.Entity<CanAdd>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAN_ADD__3214EC27696ACCEF");

            entity.ToTable("CAN_ADD", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CanAdd1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("CAN_ADD");
            entity.Property(e => e.ClassPath)
                .HasMaxLength(512)
                .HasColumnName("CLASS_PATH");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CanAdds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CAN_ADD__RELATED__41F8B7BD");

            entity.HasOne(d => d.Source).WithMany(p => p.CanAdds)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAN_ADD__SOURCE___41049384");
        });

        modelBuilder.Entity<ChangeControlledItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CHANGE_CONTROLLED_ITEM", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(256)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ChangeControlledRelationship>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CHANGE_CONTROLLED_RELATIONSHIP", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Chart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CHART__3214EC27C0908DF2");

            entity.ToTable("CHART", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BackgroundStyle).HasColumnName("BACKGROUND_STYLE");
            entity.Property(e => e.BarSpacing).HasColumnName("BAR_SPACING");
            entity.Property(e => e.BorderBottom).HasColumnName("BORDER_BOTTOM");
            entity.Property(e => e.BorderLeft).HasColumnName("BORDER_LEFT");
            entity.Property(e => e.BorderRight).HasColumnName("BORDER_RIGHT");
            entity.Property(e => e.BorderTop).HasColumnName("BORDER_TOP");
            entity.Property(e => e.ChartType)
                .HasMaxLength(64)
                .HasColumnName("CHART_TYPE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Legend)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEGEND");
            entity.Property(e => e.LegendBoxStyle).HasColumnName("LEGEND_BOX_STYLE");
            entity.Property(e => e.LegendHeight).HasColumnName("LEGEND_HEIGHT");
            entity.Property(e => e.LegendTextStyle).HasColumnName("LEGEND_TEXT_STYLE");
            entity.Property(e => e.LegendWidth).HasColumnName("LEGEND_WIDTH");
            entity.Property(e => e.LegendX).HasColumnName("LEGEND_X");
            entity.Property(e => e.LegendY).HasColumnName("LEGEND_Y");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MarkerSize).HasColumnName("MARKER_SIZE");
            entity.Property(e => e.MarkerStyle).HasColumnName("MARKER_STYLE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Radius).HasColumnName("RADIUS");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(128)
                .HasColumnName("TITLE");
            entity.Property(e => e.TitleStyle).HasColumnName("TITLE_STYLE");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.XAxis)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("X_AXIS");
            entity.Property(e => e.XAxisLabel)
                .HasMaxLength(128)
                .HasColumnName("X_AXIS_LABEL");
            entity.Property(e => e.XAxisLabelStyle).HasColumnName("X_AXIS_LABEL_STYLE");
            entity.Property(e => e.XAxisStyle).HasColumnName("X_AXIS_STYLE");
            entity.Property(e => e.XAxisValueLabelStyle).HasColumnName("X_AXIS_VALUE_LABEL_STYLE");
            entity.Property(e => e.XAxisValueLabels)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("X_AXIS_VALUE_LABELS");
            entity.Property(e => e.XGrid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("X_GRID");
            entity.Property(e => e.XGridInterval).HasColumnName("X_GRID_INTERVAL");
            entity.Property(e => e.XGridStyle).HasColumnName("X_GRID_STYLE");
            entity.Property(e => e.XMax).HasColumnName("X_MAX");
            entity.Property(e => e.XMin).HasColumnName("X_MIN");
            entity.Property(e => e.YAxis)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Y_AXIS");
            entity.Property(e => e.YAxisLabel)
                .HasMaxLength(128)
                .HasColumnName("Y_AXIS_LABEL");
            entity.Property(e => e.YAxisLabelStyle).HasColumnName("Y_AXIS_LABEL_STYLE");
            entity.Property(e => e.YAxisStyle).HasColumnName("Y_AXIS_STYLE");
            entity.Property(e => e.YAxisValueLabelStyle).HasColumnName("Y_AXIS_VALUE_LABEL_STYLE");
            entity.Property(e => e.YAxisValueLabels)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Y_AXIS_VALUE_LABELS");
            entity.Property(e => e.YGrid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Y_GRID");
            entity.Property(e => e.YGridInterval).HasColumnName("Y_GRID_INTERVAL");
            entity.Property(e => e.YGridStyle).HasColumnName("Y_GRID_STYLE");
            entity.Property(e => e.YMax).HasColumnName("Y_MAX");
            entity.Property(e => e.YMin).HasColumnName("Y_MIN");
        });

        modelBuilder.Entity<ChartSeries>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CHART_SE__3214EC27A787BF4A");

            entity.ToTable("CHART_SERIES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Markers)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MARKERS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ChartSeries)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CHART_SER__RELAT__3FDB6521");

            entity.HasOne(d => d.Source).WithMany(p => p.ChartSeries)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CHART_SER__SOURC__3EE740E8");
        });

        modelBuilder.Entity<ClientEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CLIENT_E__3214EC27C3E20514");

            entity.ToTable("CLIENT_EVENT", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClientEvent1)
                .HasMaxLength(64)
                .HasColumnName("CLIENT_EVENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ClientEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CLIENT_EV__RELAT__43E1002F");

            entity.HasOne(d => d.Source).WithMany(p => p.ClientEvents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CLIENT_EV__SOURC__42ECDBF6");
        });

        modelBuilder.Entity<CmfAdditionalpropertytype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_ADDI__3214EC273D3AB60F");

            entity.ToTable("CMF_ADDITIONALPROPERTYTYPE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalProperty)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ADDITIONAL_PROPERTY");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfAdditionalpropertytypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_ADDIT__SOURC__188C8DD6");
        });

        modelBuilder.Entity<CmfBaseview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CMF_BASEVIEW", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfComputedproperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_COMP__3214EC27E6B0E752");

            entity.ToTable("CMF_COMPUTEDPROPERTY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClientComputeMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLIENT_COMPUTE_METHOD");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfComputedproperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_COMPU__SOURC__1D5142F3");
        });

        modelBuilder.Entity<CmfComputedpropertydependency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_COMP__3214EC271E59BD08");

            entity.ToTable("CMF_COMPUTEDPROPERTYDEPENDENCY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CmfComputedpropertydependencies)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CMF_COMPU__RELAT__2215F810");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfComputedpropertydependencies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_COMPU__SOURC__2121D3D7");
        });

        modelBuilder.Entity<CmfContentelementitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CMF_CONTENTELEMENTITEMS", "innovator");

            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfContentitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CMF_CONTENTITEMS", "innovator");

            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate).HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate).HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.SupersededDate).HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfContentpropertyitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CMF_CONTENTPROPERTYITEMS", "innovator");

            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfContenttype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_CONT__3214EC279401B66E");

            entity.ToTable("CMF_CONTENTTYPE", "innovator");

            entity.HasIndex(e => e.LinkedItemType, "C116").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.Name, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LinkedItemType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LINKED_ITEM_TYPE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfContenttypeexportrel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_CONT__3214EC27C1653164");

            entity.ToTable("CMF_CONTENTTYPEEXPORTREL", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfContenttypeexportrels)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_CONTE__SOURC__0E0EFF63");
        });

        modelBuilder.Entity<CmfContenttypeexportsetting>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CMF_CONTENTTYPEEXPORTSETTING", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfContenttypeexporttoexcel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_CONT__3214EC276D975233");

            entity.ToTable("CMF_CONTENTTYPEEXPORTTOEXCEL", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TemplateFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEMPLATE_FILE");
        });

        modelBuilder.Entity<CmfContenttypegridlayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_CONT__3214EC272914ACFC");

            entity.ToTable("CMF_CONTENTTYPEGRIDLAYOUT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CollapsedColumnGroups).HasColumnName("COLLAPSED_COLUMN_GROUPS");
            entity.Property(e => e.ColumnNames).HasColumnName("COLUMN_NAMES");
            entity.Property(e => e.ColumnWidth).HasColumnName("COLUMN_WIDTH");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TabularViewId)
                .HasMaxLength(32)
                .HasColumnName("TABULAR_VIEW_ID");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfContenttypegridlayouts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_CONTE__SOURC__0F03239C");
        });

        modelBuilder.Entity<CmfContenttypeview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_CONT__3214EC27A35A2A33");

            entity.ToTable("CMF_CONTENTTYPEVIEW", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfContenttypeviews)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_CONTE__SOURC__0FF747D5");
        });

        modelBuilder.Entity<CmfDocumentlifecyclestate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_DOCU__3214EC277A684911");

            entity.ToTable("CMF_DOCUMENTLIFECYCLESTATE", "innovator");

            entity.HasIndex(e => new { e.LifeCycleStateId, e.SourceId }, "C120").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LifeCycleStateId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIFE_CYCLE_STATE_ID");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ResolutionMode)
                .HasMaxLength(64)
                .HasColumnName("RESOLUTION_MODE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TrackingMode)
                .HasMaxLength(64)
                .HasColumnName("TRACKING_MODE");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfDocumentlifecyclestates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_DOCUM__SOURC__10EB6C0E");
        });

        modelBuilder.Entity<CmfElementallowedpermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_ELEM__3214EC272956B7E5");

            entity.ToTable("CMF_ELEMENTALLOWEDPERMISSION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CmfElementallowedpermissions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CMF_ELEME__RELAT__1A74D648");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfElementallowedpermissions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_ELEME__SOURC__1980B20F");
        });

        modelBuilder.Entity<CmfElementbinding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_ELEM__3214EC27C5BBD292");

            entity.ToTable("CMF_ELEMENTBINDING", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemDeleteBehavior)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'NonCheckConstraint')")
                .HasColumnName("ITEM_DELETE_BEHAVIOR");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewRowMode)
                .HasMaxLength(64)
                .HasColumnName("NEW_ROW_MODE");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnAfterPick)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_AFTER_PICK");
            entity.Property(e => e.OnApplyBinding)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_APPLY_BINDING");
            entity.Property(e => e.OnCreateReference)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CREATE_REFERENCE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReferenceRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("REFERENCE_REQUIRED");
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REFERENCE_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ResolutionMode)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Current')")
                .HasColumnName("RESOLUTION_MODE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureMappingMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STRUCTURE_MAPPING_METHOD");
            entity.Property(e => e.SynchronizationDirection)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'FromItem')")
                .HasColumnName("SYNCHRONIZATION_DIRECTION");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TrackingMode)
                .HasMaxLength(64)
                .HasColumnName("TRACKING_MODE");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfElementbindings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_ELEME__SOURC__1B68FA81");
        });

        modelBuilder.Entity<CmfElementtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_ELEM__3214EC27F707F3E6");

            entity.ToTable("CMF_ELEMENTTYPE", "innovator");

            entity.HasIndex(e => e.Name, "C122").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPermission)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'FAC64B6CE47348458D6DEB1C68DC4724')")
                .IsFixedLength()
                .HasColumnName("DEFAULT_PERMISSION");
            entity.Property(e => e.GeneratedType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GENERATED_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Parent)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfElementtypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_ELEME__SOURC__11DF9047");
        });

        modelBuilder.Entity<CmfExporttoexcelviewconfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_EXPO__3214EC27D7B7DAB0");

            entity.ToTable("CMF_EXPORTTOEXCELVIEWCONFIG", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IncludeHeader)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INCLUDE_HEADER");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartingRowNumber).HasColumnName("STARTING_ROW_NUMBER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TabularView)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TABULAR_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UseStyleSettings)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_STYLE_SETTINGS");
            entity.Property(e => e.WorksheetName)
                .HasMaxLength(32)
                .HasColumnName("WORKSHEET_NAME");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfExporttoexcelviewconfigs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_EXPOR__SOURC__12D3B480");
        });

        modelBuilder.Entity<CmfPropertyallowedpermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_PROP__3214EC27F9851ABD");

            entity.ToTable("CMF_PROPERTYALLOWEDPERMISSION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CmfPropertyallowedpermissions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CMF_PROPE__RELAT__1F398B65");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfPropertyallowedpermissions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_PROPE__SOURC__1E45672C");
        });

        modelBuilder.Entity<CmfPropertybinding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_PROP__3214EC27B4B3300B");

            entity.ToTable("CMF_PROPERTYBINDING", "innovator");

            entity.HasIndex(e => e.Property, "C121").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Property)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTY");
            entity.Property(e => e.ReadOnly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("READ_ONLY");
            entity.Property(e => e.ReferenceTypePropertyId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REFERENCE_TYPE_PROPERTY_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfPropertybindings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_PROPE__SOURC__202DAF9E");
        });

        modelBuilder.Entity<CmfPropertytype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_PROP__3214EC27B678EDCE");

            entity.ToTable("CMF_PROPERTYTYPE", "innovator");

            entity.HasIndex(e => e.Name, "C119").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DataLength).HasColumnName("DATA_LENGTH");
            entity.Property(e => e.DataType)
                .HasMaxLength(64)
                .HasColumnName("DATA_TYPE");
            entity.Property(e => e.DefaultPermission)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'')")
                .IsFixedLength()
                .HasColumnName("DEFAULT_PERMISSION");
            entity.Property(e => e.GeneratedType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GENERATED_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UiComputedProperty)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UI_COMPUTED_PROPERTY");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfPropertytypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_PROPE__SOURC__1C5D1EBA");
        });

        modelBuilder.Entity<CmfStyle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_STYL__3214EC27110095DE");

            entity.ToTable("CMF_STYLE", "innovator");

            entity.HasIndex(e => e.Name, "C117").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.Name, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BackgroundColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BACKGROUND_COLOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FontFamily)
                .HasMaxLength(64)
                .HasColumnName("FONT_FAMILY");
            entity.Property(e => e.FontSize).HasColumnName("FONT_SIZE");
            entity.Property(e => e.FontStyle)
                .HasMaxLength(64)
                .HasColumnName("FONT_STYLE");
            entity.Property(e => e.FontWeight)
                .HasMaxLength(64)
                .HasColumnName("FONT_WEIGHT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TextAlign)
                .HasMaxLength(64)
                .HasColumnName("TEXT_ALIGN");
            entity.Property(e => e.TextColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEXT_COLOR");
            entity.Property(e => e.TextDecoration)
                .HasMaxLength(64)
                .HasColumnName("TEXT_DECORATION");
        });

        modelBuilder.Entity<CmfTabularview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC27A338870C");

            entity.ToTable("CMF_TABULARVIEW", "innovator");

            entity.HasIndex(e => e.Name, "C118").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultHeaderStyle)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFAULT_HEADER_STYLE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridBorderColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRID_BORDER_COLOR");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TreeLabelMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TREE_LABEL_METHOD");
        });

        modelBuilder.Entity<CmfTabularviewcolumn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC279A73DBF8");

            entity.ToTable("CMF_TABULARVIEWCOLUMN", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasDefaultValueSql("(N'Property Default')")
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ColOrder).HasColumnName("COL_ORDER");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContentStyle)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTENT_STYLE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DatePattern)
                .HasMaxLength(64)
                .HasColumnName("DATE_PATTERN");
            entity.Property(e => e.EditorDataSourceList)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EDITOR_DATA_SOURCE_LIST");
            entity.Property(e => e.EditorDataSourceMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EDITOR_DATA_SOURCE_METHOD");
            entity.Property(e => e.EditorHeader1ForListLabel)
                .HasMaxLength(64)
                .HasColumnName("EDITOR_HEADER_1_FOR_LIST_LABEL");
            entity.Property(e => e.EditorHeader1Width).HasColumnName("EDITOR_HEADER_1_WIDTH");
            entity.Property(e => e.EditorHeader2ForListValue)
                .HasMaxLength(64)
                .HasColumnName("EDITOR_HEADER_2_FOR_LIST_VALUE");
            entity.Property(e => e.EditorHeader2Width).HasColumnName("EDITOR_HEADER_2_WIDTH");
            entity.Property(e => e.EditorUseBoth)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EDITOR_USE_BOTH");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Header)
                .HasMaxLength(64)
                .HasColumnName("HEADER");
            entity.Property(e => e.HeaderStyle)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HEADER_STYLE");
            entity.Property(e => e.InitialWidth).HasColumnName("INITIAL_WIDTH");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Property)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfTabularviewcolumns)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_TABUL__SOURC__13C7D8B9");
        });

        modelBuilder.Entity<CmfTabularviewcolumngroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC2704EF94CD");

            entity.ToTable("CMF_TABULARVIEWCOLUMNGROUPS", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndColumn).HasColumnName("END_COLUMN");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GroupStyle)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GROUP_STYLE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartColumn).HasColumnName("START_COLUMN");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfTabularviewcolumngroups)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_TABUL__SOURC__14BBFCF2");
        });

        modelBuilder.Entity<CmfTabularviewheaderrow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC2755CC08DE");

            entity.ToTable("CMF_TABULARVIEWHEADERROW", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GroupLevel)
                .HasDefaultValueSql("((2))")
                .HasColumnName("GROUP_LEVEL");
            entity.Property(e => e.HeaderStyle)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HEADER_STYLE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfTabularviewheaderrow1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC27713EFE84");

            entity.ToTable("CMF_TABULARVIEWHEADERROWS", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CmfTabularviewheaderrow1s)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CMF_TABUL__RELAT__16A44564");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfTabularviewheaderrow1s)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_TABUL__SOURC__15B0212B");
        });

        modelBuilder.Entity<CmfTabularviewtree>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC27C47BE7F1");

            entity.ToTable("CMF_TABULARVIEWTREE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DocumentElementIcon)
                .HasMaxLength(128)
                .HasColumnName("DOCUMENT_ELEMENT_ICON");
            entity.Property(e => e.ElementType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ELEMENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfTabularviewtrees)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_TABUL__SOURC__1798699D");
        });

        modelBuilder.Entity<ColumnEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COLUMN_E__3214EC27A0DDB068");

            entity.ToTable("COLUMN_EVENT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridEvent)
                .HasMaxLength(64)
                .HasColumnName("GRID_EVENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ColumnEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__COLUMN_EV__RELAT__7B663F43");

            entity.HasOne(d => d.Source).WithMany(p => p.ColumnEvents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__COLUMN_EV__SOURC__7A721B0A");
        });

        modelBuilder.Entity<Command>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMAND__3214EC276B618D9C");

            entity.ToTable("COMMAND", "innovator");

            entity.HasIndex(e => e.Name, "C34").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.CanExecute)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_EXECUTE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExecuteHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXECUTE_HANDLER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandalias>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDA__3214EC27B8079F51");

            entity.ToTable("COMMANDALIAS", "innovator");

            entity.HasIndex(e => e.Name, "C35").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarbutton>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC2770A9F0C4");

            entity.ToTable("COMMANDBARBUTTON", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.AriaLabel)
                .HasMaxLength(128)
                .HasColumnName("ARIA_LABEL");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommandAlias)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMMAND_ALIAS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Image)
                .HasMaxLength(128)
                .HasColumnName("IMAGE");
            entity.Property(e => e.ImageAdditional)
                .HasMaxLength(128)
                .HasColumnName("IMAGE_ADDITIONAL");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("TOOLTIP_TEMPLATE");
        });

        modelBuilder.Entity<Commandbarcheckbox>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC271C51DDAF");

            entity.ToTable("COMMANDBARCHECKBOX", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommandAlias)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMMAND_ALIAS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbardropdown>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC27689CF358");

            entity.ToTable("COMMANDBARDROPDOWN", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommandAlias)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMMAND_ALIAS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("TOOLTIP_TEMPLATE");
        });

        modelBuilder.Entity<Commandbaredit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC27651A843F");

            entity.ToTable("COMMANDBAREDIT", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.AriaLabel)
                .HasMaxLength(128)
                .HasColumnName("ARIA_LABEL");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommandAlias)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMMAND_ALIAS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OnKeydownHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_KEYDOWN_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("TOOLTIP_TEMPLATE");
        });

        modelBuilder.Entity<Commandbaritem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("COMMANDBARITEM", "innovator");

            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(161)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarmenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC27206D7BB3");

            entity.ToTable("COMMANDBARMENU", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.AriaLabel)
                .HasMaxLength(128)
                .HasColumnName("ARIA_LABEL");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommandAlias)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMMAND_ALIAS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Image)
                .HasMaxLength(128)
                .HasColumnName("IMAGE");
            entity.Property(e => e.ImageAdditional)
                .HasMaxLength(128)
                .HasColumnName("IMAGE_ADDITIONAL");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(161)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentMenu)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_MENU");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("TOOLTIP_TEMPLATE");
        });

        modelBuilder.Entity<Commandbarmenubutton>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC27D984D352");

            entity.ToTable("COMMANDBARMENUBUTTON", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommandAlias)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMMAND_ALIAS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Image)
                .HasMaxLength(128)
                .HasColumnName("IMAGE");
            entity.Property(e => e.ImageAdditional)
                .HasMaxLength(128)
                .HasColumnName("IMAGE_ADDITIONAL");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentMenu)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_MENU");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarmenucheckbox>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC279D5E51DA");

            entity.ToTable("COMMANDBARMENUCHECKBOX", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommandAlias)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMMAND_ALIAS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GroupId)
                .HasMaxLength(32)
                .HasColumnName("GROUP_ID");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentMenu)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_MENU");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarmenuseparator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC2714B3B088");

            entity.ToTable("COMMANDBARMENUSEPARATOR", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentMenu)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_MENU");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarsection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC2708B9D865");

            entity.ToTable("COMMANDBARSECTION", "innovator");

            entity.HasIndex(e => new { e.Name, e.Location }, "C41").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.BuilderMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BUILDER_METHOD");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.Location)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarsectiondependency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC277232DA39");

            entity.ToTable("COMMANDBARSECTIONDEPENDENCY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Commandbarsectiondependencies)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__COMMANDBA__RELAT__7D197D8B");

            entity.HasOne(d => d.Source).WithMany(p => p.Commandbarsectiondependencies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__COMMANDBA__SOURC__7C255952");
        });

        modelBuilder.Entity<Commandbarsectionitem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC2768F9FB3B");

            entity.ToTable("COMMANDBARSECTIONITEM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Action)
                .HasMaxLength(64)
                .HasColumnName("ACTION");
            entity.Property(e => e.Alternate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALTERNATE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemClassification)
                .HasMaxLength(512)
                .HasColumnName("ITEM_CLASSIFICATION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Commandbarsectionitems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__COMMANDBA__SOURC__7E0DA1C4");
        });

        modelBuilder.Entity<Commandbarseparator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC279AA4EEA3");

            entity.ToTable("COMMANDBARSEPARATOR", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarshortcut>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC27CD021ACF");

            entity.ToTable("COMMANDBARSHORTCUT", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommandAlias)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMMAND_ALIAS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Shortcut)
                .HasMaxLength(64)
                .HasColumnName("SHORTCUT");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ConfigurableGridEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONFIGUR__3214EC275875E71D");

            entity.ToTable("CONFIGURABLE_GRID_EVENT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridEvent)
                .HasMaxLength(64)
                .HasColumnName("GRID_EVENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ConfigurableGridEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONFIGURA__RELAT__45C948A1");

            entity.HasOne(d => d.Source).WithMany(p => p.ConfigurableGridEvents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONFIGURA__SOURC__44D52468");
        });

        modelBuilder.Entity<Conversionrule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC2733944258");

            entity.ToTable("CONVERSIONRULE", "innovator");

            entity.HasIndex(e => e.Name, "C85").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ConverterType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONVERTER_TYPE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Cutoff)
                .HasDefaultValueSql("((24))")
                .HasColumnName("CUTOFF");
            entity.Property(e => e.Delay)
                .HasDefaultValueSql("((5))")
                .HasColumnName("DELAY");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ENABLED");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Timeout)
                .HasDefaultValueSql("((60))")
                .HasColumnName("TIMEOUT");
        });

        modelBuilder.Entity<Conversionruleeventhandler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC2782ABD756");

            entity.ToTable("CONVERSIONRULEEVENTHANDLER", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversionruleeventhandlers)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__58A712EB");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversionruleeventhandlers)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__57B2EEB2");
        });

        modelBuilder.Entity<Conversionruleeventtemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC279F3C4ED4");

            entity.ToTable("CONVERSIONRULEEVENTTEMPLATE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockDependencies)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCK_DEPENDENCIES");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversionruleeventtemplates)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__5A8F5B5D");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversionruleeventtemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__599B3724");
        });

        modelBuilder.Entity<Conversionrulefiletype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27239AEA30");

            entity.ToTable("CONVERSIONRULEFILETYPE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ENABLED");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.Options)
                .HasMaxLength(512)
                .HasColumnName("OPTIONS");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversionrulefiletypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__5C77A3CF");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversionrulefiletypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__5B837F96");
        });

        modelBuilder.Entity<Conversionserver>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27E98D8471");

            entity.ToTable("CONVERSIONSERVER", "innovator");

            entity.HasIndex(e => e.Name, "C83").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.ImpersonationUserId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IMPERSONATION_USER_ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Url)
                .HasMaxLength(256)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<Conversionserverconvertertype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27999E124F");

            entity.ToTable("CONVERSIONSERVERCONVERTERTYPE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversionserverconvertertypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__5E5FEC41");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversionserverconvertertypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__5D6BC808");
        });

        modelBuilder.Entity<Conversionserverpriority>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27A9623B0F");

            entity.ToTable("CONVERSIONSERVERPRIORITY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversionserverpriorities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__604834B3");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversionserverpriorities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__5F54107A");
        });

        modelBuilder.Entity<Conversiontask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC2742EE8ABB");

            entity.ToTable("CONVERSIONTASK", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Error).HasColumnName("ERROR");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .HasColumnName("FILE_ID");
            entity.Property(e => e.FileType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_TYPE");
            entity.Property(e => e.FinishedOn)
                .HasColumnType("datetime")
                .HasColumnName("FINISHED_ON");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RuleId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RULE_ID");
            entity.Property(e => e.StartedOn)
                .HasColumnType("datetime")
                .HasColumnName("STARTED_ON");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UserData).HasColumnName("USER_DATA");
        });

        modelBuilder.Entity<Conversiontaskdependency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27B0FE9B07");

            entity.ToTable("CONVERSIONTASKDEPENDENCY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DependencyId)
                .HasMaxLength(32)
                .HasColumnName("DEPENDENCY_ID");
            entity.Property(e => e.DependencyType)
                .HasMaxLength(64)
                .HasColumnName("DEPENDENCY_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversiontaskdependencies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__613C58EC");
        });

        modelBuilder.Entity<Conversiontaskeventhandler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC2774719773");

            entity.ToTable("CONVERSIONTASKEVENTHANDLER", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.ExecutionAttempt).HasColumnName("EXECUTION_ATTEMPT");
            entity.Property(e => e.FinishedOn)
                .HasColumnType("datetime")
                .HasColumnName("FINISHED_ON");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockDependencies)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCK_DEPENDENCIES");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartedOn)
                .HasColumnType("datetime")
                .HasColumnName("STARTED_ON");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UserData).HasColumnName("USER_DATA");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversiontaskeventhandlers)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__6324A15E");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversiontaskeventhandlers)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__62307D25");
        });

        modelBuilder.Entity<Conversiontaskhandlererror>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC270B13A508");

            entity.ToTable("CONVERSIONTASKHANDLERERROR", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AttemptNumber).HasColumnName("ATTEMPT_NUMBER");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ErrorMessage).HasColumnName("ERROR_MESSAGE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversiontaskhandlererrors)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__66F53242");
        });

        modelBuilder.Entity<Conversiontaskresult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC2749BF18B4");

            entity.ToTable("CONVERSIONTASKRESULT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .HasColumnName("FILE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Kind)
                .HasMaxLength(64)
                .HasColumnName("KIND");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversiontaskresults)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__6418C597");
        });

        modelBuilder.Entity<Convertertype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERTE__3214EC277B3AE4E8");

            entity.ToTable("CONVERTERTYPE", "innovator");

            entity.HasIndex(e => e.Name, "C84").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CoreGloballayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CORE_GLO__3214EC2713531BB6");

            entity.ToTable("CORE_GLOBALLAYOUT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CoreAppendItems)
                .HasMaxLength(5)
                .HasColumnName("CORE_APPEND_ITEMS");
            entity.Property(e => e.CoreDebug)
                .HasMaxLength(5)
                .HasColumnName("CORE_DEBUG");
            entity.Property(e => e.CoreDefaultDownloadLocation)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CORE_DEFAULT_DOWNLOAD_LOCATION");
            entity.Property(e => e.CoreInBasketHistory)
                .HasMaxLength(24)
                .HasColumnName("CORE_IN_BASKET_HISTORY");
            entity.Property(e => e.CorePopupmessageTimeout)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CORE_POPUPMESSAGE_TIMEOUT");
            entity.Property(e => e.CoreShowItemProperties)
                .HasMaxLength(5)
                .HasColumnName("CORE_SHOW_ITEM_PROPERTIES");
            entity.Property(e => e.CoreShowLabels)
                .HasMaxLength(5)
                .HasColumnName("CORE_SHOW_LABELS");
            entity.Property(e => e.CoreShowScanButtonForFile)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("CORE_SHOW_SCAN_BUTTON_FOR_FILE");
            entity.Property(e => e.CoreStructureLayout)
                .HasMaxLength(5)
                .HasColumnName("CORE_STRUCTURE_LAYOUT");
            entity.Property(e => e.CoreSuccessmessageType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Popup')")
                .HasColumnName("CORE_SUCCESSMESSAGE_TYPE");
            entity.Property(e => e.CoreTabsState)
                .HasMaxLength(64)
                .HasColumnName("CORE_TABS_STATE");
            entity.Property(e => e.CoreTearOff)
                .HasMaxLength(5)
                .HasColumnName("CORE_TEAR_OFF");
            entity.Property(e => e.CoreTocPinned)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("CORE_TOC_PINNED");
            entity.Property(e => e.CoreTocSortingType)
                .HasMaxLength(64)
                .HasColumnName("CORE_TOC_SORTING_TYPE");
            entity.Property(e => e.CoreUseWildcards)
                .HasMaxLength(5)
                .HasColumnName("CORE_USE_WILDCARDS");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CoreGloballayouts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CORE_GLOB__SOURC__45943E77");
        });

        modelBuilder.Entity<CoreItemgridlayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CORE_ITE__3214EC273AE428B6");

            entity.ToTable("CORE_ITEMGRIDLAYOUT", "innovator");

            entity.HasIndex(e => new { e.ItemTypeId, e.SourceId }, "C77").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ColOrder).HasColumnName("COL_ORDER");
            entity.Property(e => e.ColWidths).HasColumnName("COL_WIDTHS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FrozenColumns).HasColumnName("FROZEN_COLUMNS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaxRecords).HasColumnName("MAX_RECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PageSize).HasColumnName("PAGE_SIZE");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PreviewState)
                .HasMaxLength(64)
                .HasColumnName("PREVIEW_STATE");
            entity.Property(e => e.QueryType)
                .HasMaxLength(32)
                .HasColumnName("QUERY_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CoreItemgridlayouts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CORE_ITEM__SOURC__468862B0");
        });

        modelBuilder.Entity<CoreRelgridlayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CORE_REL__3214EC27A90CF026");

            entity.ToTable("CORE_RELGRIDLAYOUT", "innovator");

            entity.HasIndex(e => new { e.RelTypeId, e.SourceId }, "C78").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ColOrder).HasColumnName("COL_ORDER");
            entity.Property(e => e.ColWidths).HasColumnName("COL_WIDTHS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FrozenColumns).HasColumnName("FROZEN_COLUMNS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PageSize).HasColumnName("PAGE_SIZE");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RedlineView)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REDLINE_VIEW");
            entity.Property(e => e.RelTypeId)
                .HasMaxLength(32)
                .HasColumnName("REL_TYPE_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SearchVis).HasColumnName("SEARCH_VIS");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CoreRelgridlayouts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CORE_RELG__SOURC__477C86E9");
        });

        modelBuilder.Entity<CoreSearchcountmodeexception>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CORE_SEA__3214EC27EE209E71");

            entity.ToTable("CORE_SEARCHCOUNTMODEEXCEPTION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CoreSearchcountmodeexceptions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CORE_SEAR__RELAT__4964CF5B");

            entity.HasOne(d => d.Source).WithMany(p => p.CoreSearchcountmodeexceptions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CORE_SEAR__SOURC__4870AB22");
        });

        modelBuilder.Entity<Coresearchgridenabledediting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CORESEAR__3214EC27DD763610");

            entity.ToTable("CORESEARCHGRIDENABLEDEDITING", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Coresearchgridenablededitings)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CORESEARC__RELAT__44A01A3E");

            entity.HasOne(d => d.Source).WithMany(p => p.Coresearchgridenablededitings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CORESEARC__SOURC__43ABF605");
        });

        modelBuilder.Entity<CuiControl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUI_CONT__3214EC273577A3B4");

            entity.ToTable("CUI_CONTROL", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.AriaLabel)
                .HasMaxLength(128)
                .HasColumnName("ARIA_LABEL");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ControlType)
                .HasMaxLength(64)
                .HasColumnName("CONTROL_TYPE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.Location)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentControl)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_CONTROL");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CuiControlcommandbaritem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUI_CONT__3214EC273EAD1E4A");

            entity.ToTable("CUI_CONTROLCOMMANDBARITEM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Action)
                .HasMaxLength(64)
                .HasColumnName("ACTION");
            entity.Property(e => e.Alternate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALTERNATE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.BuilderMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BUILDER_METHOD");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasDefaultValueSql("(N'Data Model')")
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemClassification)
                .HasMaxLength(512)
                .HasColumnName("ITEM_CLASSIFICATION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CuiControlcommandbaritems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CUI_CONTR__SOURC__7F01C5FD");
        });

        modelBuilder.Entity<CuiControleventhandler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUI_CONT__3214EC27300290F5");

            entity.ToTable("CUI_CONTROLEVENTHANDLER", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ControlEvent)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROL_EVENT");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FiredFromLocation)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FIRED_FROM_LOCATION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CuiControleventhandlers)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CUI_CONTR__RELAT__00EA0E6F");

            entity.HasOne(d => d.Source).WithMany(p => p.CuiControleventhandlers)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CUI_CONTR__SOURC__7FF5EA36");
        });

        modelBuilder.Entity<CuiDashboard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUI_DASH__3214EC2742484C23");

            entity.ToTable("CUI_DASHBOARD", "innovator");

            entity.HasIndex(e => e.Name, "C72").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Columns)
                .HasDefaultValueSql("((24))")
                .HasColumnName("COLUMNS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Presentation)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PRESENTATION");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CuiEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUI_EVEN__3214EC276E9C5169");

            entity.ToTable("CUI_EVENT", "innovator");

            entity.HasIndex(e => e.Name, "C36").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CuiLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUI_LOCA__3214EC27A2E2BFFD");

            entity.ToTable("CUI_LOCATION", "innovator");

            entity.HasIndex(e => e.Name, "C37").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CuiPresentconfigwinsection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUI_PRES__3214EC274547D039");

            entity.ToTable("CUI_PRESENTCONFIGWINSECTION", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemClassification)
                .HasMaxLength(512)
                .HasColumnName("ITEM_CLASSIFICATION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'A73B655731924CD0B027E4F4D5FCC0A9')")
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CuiPresentconfigwinsections)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CUI_PRESE__RELAT__02D256E1");

            entity.HasOne(d => d.Source).WithMany(p => p.CuiPresentconfigwinsections)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CUI_PRESE__SOURC__01DE32A8");
        });

        modelBuilder.Entity<CuiWindowsection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUI_WIND__3214EC274170140C");

            entity.ToTable("CUI_WINDOWSECTION", "innovator");

            entity.HasIndex(e => e.Name, "C38").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BuilderMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BUILDER_METHOD");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Location)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CuiWindowsectioncontrol>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUI_WIND__3214EC27ECE9F6BE");

            entity.ToTable("CUI_WINDOWSECTIONCONTROL", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Action)
                .HasMaxLength(64)
                .HasColumnName("ACTION");
            entity.Property(e => e.Alternate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALTERNATE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemClassification)
                .HasMaxLength(512)
                .HasColumnName("ITEM_CLASSIFICATION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'A73B655731924CD0B027E4F4D5FCC0A9')")
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CuiWindowsectioncontrols)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CUI_WINDO__RELAT__04BA9F53");

            entity.HasOne(d => d.Source).WithMany(p => p.CuiWindowsectioncontrols)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CUI_WINDO__SOURC__03C67B1A");
        });

        modelBuilder.Entity<Cuidependency>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CUIDEPENDENCY", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUSTOMER__3214EC273E092520");

            entity.ToTable("CUSTOMER", "innovator");

            entity.HasIndex(e => e.Name, "C143").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Address)
                .HasMaxLength(256)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.AddressState)
                .HasMaxLength(64)
                .HasColumnName("ADDRESS_STATE");
            entity.Property(e => e.City)
                .HasMaxLength(64)
                .HasColumnName("CITY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(64)
                .HasColumnName("CONTACT_NAME");
            entity.Property(e => e.Country)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MainFax)
                .HasMaxLength(32)
                .HasColumnName("MAIN_FAX");
            entity.Property(e => e.MainPhone)
                .HasMaxLength(32)
                .HasColumnName("MAIN_PHONE");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WebSite)
                .HasMaxLength(128)
                .HasColumnName("WEB_SITE");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(32)
                .HasColumnName("ZIP_CODE");
        });

        modelBuilder.Entity<CwsEndpointconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CWS_ENDP__3214EC27EA1D0693");

            entity.ToTable("CWS_ENDPOINTCONFIGURATION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_ACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsEditable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_EDITABLE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SchemaDefinition).HasColumnName("SCHEMA_DEFINITION");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Version).HasColumnName("VERSION");

            entity.HasOne(d => d.Source).WithMany(p => p.CwsEndpointconfigurations)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CWS_ENDPO__SOURC__097F5470");
        });

        modelBuilder.Entity<CwsItemtypereference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CWS_ITEM__3214EC27E7D02E51");

            entity.ToTable("CWS_ITEMTYPEREFERENCE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CwsItemtypereferences)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CWS_ITEMT__RELAT__0B679CE2");

            entity.HasOne(d => d.Source).WithMany(p => p.CwsItemtypereferences)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CWS_ITEMT__SOURC__0A7378A9");
        });

        modelBuilder.Entity<CwsMethodreference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CWS_METH__3214EC27A106C38C");

            entity.ToTable("CWS_METHODREFERENCE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CwsMethodreferences)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CWS_METHO__RELAT__0D4FE554");

            entity.HasOne(d => d.Source).WithMany(p => p.CwsMethodreferences)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CWS_METHO__SOURC__0C5BC11B");
        });

        modelBuilder.Entity<CwsWebservice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CWS_WEBS__3214EC278C914DAC");

            entity.ToTable("CWS_WEBSERVICE", "innovator");

            entity.HasIndex(e => e.EndpointName, "C46").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EndpointName)
                .HasMaxLength(32)
                .HasColumnName("ENDPOINT_NAME");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(32)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<DacDomaindefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DAC_DOMA__3214EC27CD8911FF");

            entity.ToTable("DAC_DOMAINDEFINITION", "innovator");

            entity.HasIndex(e => e.Name, "C95").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.DrRelationshipfamilyId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DR_RELATIONSHIPFAMILY_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<DacSubdomainpermcompiled>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DAC_SUBD__3214EC2705B35414");

            entity.ToTable("DAC_SUBDOMAINPERMCOMPILED", "innovator");

            entity.HasIndex(e => new { e.DeparturePermissionId, e.DestinationLcsId, e.DrRelationshipId }, "C96").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DeparturePermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEPARTURE_PERMISSION_ID");
            entity.Property(e => e.DestinationLcsId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DESTINATION_LCS_ID");
            entity.Property(e => e.DrRelationshipId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DR_RELATIONSHIP_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SubdomainPermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBDOMAIN_PERMISSION_ID");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<DacSubdomainpermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DAC_SUBD__3214EC27C1D45E50");

            entity.ToTable("DAC_SUBDOMAINPERMISSION", "innovator");

            entity.HasIndex(e => new { e.SortOrder, e.SourceId }, "C98").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConditionXml).HasColumnName("CONDITION_XML");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SubdomainPermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBDOMAIN_PERMISSION_ID");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.DacSubdomainpermissions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DAC_SUBDO__SOURC__7266E4EE");
        });

        modelBuilder.Entity<DacSubdomainpolicy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DAC_SUBD__3214EC27A19C5A0C");

            entity.ToTable("DAC_SUBDOMAINPOLICY", "innovator");

            entity.HasIndex(e => new { e.DrRelationshipId, e.SourceId }, "C97").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DrRelationshipId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DR_RELATIONSHIP_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.DacSubdomainpolicies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DAC_SUBDO__SOURC__7172C0B5");
        });

        modelBuilder.Entity<DacUiSubdomainpermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DAC_UI_S__3214EC274C6958AF");

            entity.ToTable("DAC_UI_SUBDOMAINPERMISSION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DeparturePermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEPARTURE_PERMISSION_ID");
            entity.Property(e => e.DestinationLcsId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DESTINATION_LCS_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SubdomainPermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBDOMAIN_PERMISSION_ID");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.DacUiSubdomainpermissions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DAC_UI_SU__SOURC__735B0927");
        });

        modelBuilder.Entity<Dashboard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DASHBOAR__3214EC27A3B385B5");

            entity.ToTable("DASHBOARD", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BackgroundStyle).HasColumnName("BACKGROUND_STYLE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<DashboardChart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DASHBOAR__3214EC2746E2FF73");

            entity.ToTable("DASHBOARD_CHART", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.DashboardCharts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DASHBOARD__RELAT__41C3AD93");

            entity.HasOne(d => d.Source).WithMany(p => p.DashboardCharts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DASHBOARD__SOURC__40CF895A");
        });

        modelBuilder.Entity<DashboardWidget>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DASHBOAR__3214EC27CEA06A2A");

            entity.ToTable("DASHBOARD_WIDGET", "innovator");

            entity.HasIndex(e => e.Name, "C74").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HeightSize)
                .HasDefaultValueSql("((8))")
                .HasColumnName("HEIGHT_SIZE");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("ICON");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(180)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PositionX)
                .HasDefaultValueSql("((0))")
                .HasColumnName("POSITION_X");
            entity.Property(e => e.PositionY)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("POSITION_Y");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WidgetData).HasColumnName("WIDGET_DATA");
            entity.Property(e => e.WidthSize)
                .HasDefaultValueSql("((1))")
                .HasColumnName("WIDTH_SIZE");

            entity.HasOne(d => d.Related).WithMany(p => p.DashboardWidgets)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DASHBOARD__RELAT__3DF31CAF");

            entity.HasOne(d => d.Source).WithMany(p => p.DashboardWidgets)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DASHBOARD__SOURC__3CFEF876");
        });

        modelBuilder.Entity<DashboardWidgetTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DASHBOAR__3214EC27C4E53E6E");

            entity.ToTable("DASHBOARD_WIDGET_TEMPLATE", "innovator");

            entity.HasIndex(e => e.Name, "C73").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HeightSize)
                .HasDefaultValueSql("((8))")
                .HasColumnName("HEIGHT_SIZE");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("ICON");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(180)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
            entity.Property(e => e.WidthSize)
                .HasDefaultValueSql("((1))")
                .HasColumnName("WIDTH_SIZE");
        });

        modelBuilder.Entity<DashboardWidgetTemplateProp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DASHBOAR__3214EC272FB93137");

            entity.ToTable("DASHBOARD_WIDGET_TEMPLATE_PROP", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Hidden)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDDEN");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(180)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropPredefined).HasColumnName("PROP_PREDEFINED");
            entity.Property(e => e.PropSource)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROP_SOURCE");
            entity.Property(e => e.PropType)
                .HasMaxLength(64)
                .HasColumnName("PROP_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Required)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REQUIRED");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.DashboardWidgetTemplateProps)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DASHBOARD__SOURC__3C0AD43D");
        });

        modelBuilder.Entity<Databaseupgrade>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DATABASE__3214EC27D3177A7E");

            entity.ToTable("DATABASEUPGRADE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AppliedOn)
                .HasColumnType("datetime")
                .HasColumnName("APPLIED_ON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsLatest)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_LATEST");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OsUser)
                .HasMaxLength(64)
                .HasColumnName("OS_USER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TargetRelease)
                .HasMaxLength(32)
                .HasColumnName("TARGET_RELEASE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
            entity.Property(e => e.UpgradeStatus)
                .HasMaxLength(64)
                .HasColumnName("UPGRADE_STATUS");
        });

        modelBuilder.Entity<Databaseupgradepatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DATABASE__3214EC2767CD51A0");

            entity.ToTable("DATABASEUPGRADEPATCH", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Databaseupgradepatches)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DATABASEU__RELAT__47B19113");

            entity.HasOne(d => d.Source).WithMany(p => p.Databaseupgradepatches)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DATABASEU__SOURC__46BD6CDA");
        });

        modelBuilder.Entity<DesignToGoal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DESIGN_T__3214EC279E507A6F");

            entity.ToTable("DESIGN_TO_GOAL", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Discussion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DISCUSSI__3214EC276AF8ADA7");

            entity.ToTable("DISCUSSION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Discussions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DISCUSSIO__RELAT__744F2D60");
        });

        modelBuilder.Entity<Discussiondefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DISCUSSI__3214EC27622EF4A3");

            entity.ToTable("DISCUSSIONDEFINITION", "innovator");

            entity.HasIndex(e => e.ItemConfigId, "C102").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultVisibilityIdentity)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFAULT_VISIBILITY_IDENTITY");
            entity.Property(e => e.FileSelectionDepth)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("FILE_SELECTION_DEPTH");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemSelectionDepth)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("ITEM_SELECTION_DEPTH");
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_TYPE_NAME");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TemplateId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEMPLATE_ID");
        });

        modelBuilder.Entity<Discussiondefinitionview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DISCUSSI__3214EC274ECF9962");

            entity.ToTable("DISCUSSIONDEFINITIONVIEW", "innovator");

            entity.HasIndex(e => new { e.Client, e.RelatedId, e.SourceId }, "C105").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'js')")
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Discussiondefinitionviews)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DISCUSSIO__RELAT__772B9A0B");

            entity.HasOne(d => d.Source).WithMany(p => p.Discussiondefinitionviews)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DISCUSSIO__SOURC__763775D2");
        });

        modelBuilder.Entity<Discussiontemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DISCUSSI__3214EC27B7B1710D");

            entity.ToTable("DISCUSSIONTEMPLATE", "innovator");

            entity.HasIndex(e => new { e.ClassPath, e.SourceId }, "C106").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.ClassPath)
                .HasMaxLength(512)
                .HasColumnName("CLASS_PATH");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultVisibilityIdentity)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFAULT_VISIBILITY_IDENTITY");
            entity.Property(e => e.FileSelectionDepth)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("FILE_SELECTION_DEPTH");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemSelectionDepth)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("ITEM_SELECTION_DEPTH");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VisibilitySupported)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("VISIBILITY_SUPPORTED");

            entity.HasOne(d => d.Source).WithMany(p => p.Discussiontemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DISCUSSIO__SOURC__781FBE44");
        });

        modelBuilder.Entity<Discussiontemplateview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DISCUSSI__3214EC2741173753");

            entity.ToTable("DISCUSSIONTEMPLATEVIEW", "innovator");

            entity.HasIndex(e => new { e.Client, e.RelatedId, e.SourceId }, "C109").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'js')")
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Discussiontemplateviews)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DISCUSSIO__RELAT__04859529");

            entity.HasOne(d => d.Source).WithMany(p => p.Discussiontemplateviews)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DISCUSSIO__SOURC__039170F0");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DOCUMENT__3214EC27C5FD69B2");

            entity.ToTable("DOCUMENT", "innovator");

            entity.HasIndex(e => new { e.ItemNumber, e.ArasUniquenessHelper }, "C150").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.ItemNumber, "I2");

            entity.HasIndex(e => new { e.ConfigId, e.IsCurrent }, "IX_DOCUMENT_CONFIG_ID_IS_CURRENT");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_DOCUMENT_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.AuthoringTool)
                .HasMaxLength(64)
                .HasColumnName("AUTHORING_TOOL");
            entity.Property(e => e.AuthoringToolVersion)
                .HasMaxLength(32)
                .HasColumnName("AUTHORING_TOOL_VERSION");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClassifyStr)
                .HasMaxLength(255)
                .HasColumnName("CLASSIFY_STR");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(128)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.DocumentVersion)
                .HasMaxLength(255)
                .HasColumnName("DOCUMENT_VERSION");
            entity.Property(e => e.DrawingSize)
                .HasMaxLength(64)
                .HasColumnName("DRAWING_SIZE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.FromTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_TEMPLATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasChangePending)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_CHANGE_PENDING");
            entity.Property(e => e.HasFiles)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_FILES");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsTemplate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_TEMPLATE");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RecordType)
                .HasMaxLength(255)
                .HasColumnName("RECORD_TYPE");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.Scale)
                .HasMaxLength(16)
                .HasColumnName("SCALE");
            entity.Property(e => e.SpecificationType)
                .HasMaxLength(64)
                .HasColumnName("SPECIFICATION_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(128)
                .HasColumnName("THUMBNAIL");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("UPDATED_DATE");
        });

        modelBuilder.Entity<DocumentChange>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DOCUMENT__3214EC27565606AF");

            entity.ToTable("DOCUMENT_CHANGES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.DocumentChanges)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DOCUMENT___SOURC__418EA369");
        });

        modelBuilder.Entity<DocumentFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DOCUMENT__3214EC2703066300");

            entity.ToTable("DOCUMENT_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsShared)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("IS_SHARED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.DocumentFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DOCUMENT___RELAT__4376EBDB");

            entity.HasOne(d => d.Source).WithMany(p => p.DocumentFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DOCUMENT___SOURC__4282C7A2");
        });

        modelBuilder.Entity<DrFamilyelement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DR_FAMIL__3214EC27275C9A76");

            entity.ToTable("DR_FAMILYELEMENT", "innovator");

            entity.HasIndex(e => e.DrRelationshipId, "C88").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DrRelationshipId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DR_RELATIONSHIP_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.DrFamilyelements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DR_FAMILY__SOURC__67E9567B");
        });

        modelBuilder.Entity<DrFamilyelementQryQueryitem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DR_FAMIL__3214EC2721EF69D3");

            entity.ToTable("DR_FAMILYELEMENT_QRY_QUERYITEM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentQueryReferenceRefId)
                .HasMaxLength(32)
                .HasColumnName("PARENT_QUERY_REFERENCE_REF_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.DrFamilyelementQryQueryitems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DR_FAMILY__SOURC__6AC5C326");
        });

        modelBuilder.Entity<DrFamilyeventhandler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DR_FAMIL__3214EC27FE59485A");

            entity.ToTable("DR_FAMILYEVENTHANDLER", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventData).HasColumnName("EVENT_DATA");
            entity.Property(e => e.EventHandlerId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EVENT_HANDLER_ID");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.DrFamilyeventhandlers)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DR_FAMILY__SOURC__68DD7AB4");
        });

        modelBuilder.Entity<DrRelationship>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DR_RELAT__3214EC270F6A3FBC");

            entity.ToTable("DR_RELATIONSHIP", "innovator");

            entity.HasIndex(e => e.KeyedName, "C86").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DepartureItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEPARTURE_ITEMTYPE_ID");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.DestinationItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DESTINATION_ITEMTYPE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.ImplementationQuery).HasColumnName("IMPLEMENTATION_QUERY");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<DrRelationshipfamily>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DR_RELAT__3214EC27FCAE0294");

            entity.ToTable("DR_RELATIONSHIPFAMILY", "innovator");

            entity.HasIndex(e => e.Name, "C87").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.DrsPersistentType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Persistent')")
                .HasColumnName("DRS_PERSISTENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.QueryDefinitionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("QUERY_DEFINITION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<DrUiRelationshipfamily>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DR_UI_RE__3214EC27FF04D393");

            entity.ToTable("DR_UI_RELATIONSHIPFAMILY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DepartureItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEPARTURE_ITEMTYPE_ID");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.DestinationItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DESTINATION_ITEMTYPE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.DrUiRelationshipfamilies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DR_UI_REL__SOURC__69D19EED");
        });

        modelBuilder.Entity<Ecn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECN__3214EC279CE4985D");

            entity.ToTable("ECN", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Basis)
                .HasMaxLength(64)
                .HasColumnName("BASIS");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.CustomerApproval)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CUSTOMER_APPROVAL");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectivityDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVITY_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.ImplementationPlan).HasColumnName("IMPLEMENTATION_PLAN");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.SpecialInstructions).HasColumnName("SPECIAL_INSTRUCTIONS");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(128)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<EcnAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECN_AFFE__3214EC27AD73AFE5");

            entity.ToTable("ECN_AFFECTED_ITEM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcnAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECN_AFFEC__RELAT__455F344D");

            entity.HasOne(d => d.Source).WithMany(p => p.EcnAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECN_AFFEC__SOURC__446B1014");
        });

        modelBuilder.Entity<EcnEcr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECN_ECR__3214EC27EC005E8E");

            entity.ToTable("ECN_ECR", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcnEcrs)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECN_ECR__RELATED__47477CBF");

            entity.HasOne(d => d.Source).WithMany(p => p.EcnEcrs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECN_ECR__SOURCE___46535886");
        });

        modelBuilder.Entity<EcnFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECN_FILE__3214EC27B56F0BCA");

            entity.ToTable("ECN_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcnFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECN_FILE__RELATE__492FC531");

            entity.HasOne(d => d.Source).WithMany(p => p.EcnFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECN_FILE__SOURCE__483BA0F8");
        });

        modelBuilder.Entity<Ecr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECR__3214EC27CBF29AAC");

            entity.ToTable("ECR", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Basis)
                .HasMaxLength(64)
                .HasColumnName("BASIS");
            entity.Property(e => e.ChangeAdmin)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CHANGE_ADMIN");
            entity.Property(e => e.ChangeType)
                .HasMaxLength(64)
                .HasColumnName("CHANGE_TYPE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EcrComments).HasColumnName("ECR_COMMENTS");
            entity.Property(e => e.FastTrack)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FAST_TRACK");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.ImplementationPriority)
                .HasMaxLength(64)
                .HasColumnName("IMPLEMENTATION_PRIORITY");
            entity.Property(e => e.ImplementationTiming).HasColumnName("IMPLEMENTATION_TIMING");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.LowNonrecurringCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOW_NONRECURRING_COST");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NonrecurringCost).HasColumnName("NONRECURRING_COST");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ProblemStatus)
                .HasMaxLength(64)
                .HasColumnName("PROBLEM_STATUS");
            entity.Property(e => e.ProposedSolution).HasColumnName("PROPOSED_SOLUTION");
            entity.Property(e => e.RecurringCost).HasColumnName("RECURRING_COST");
            entity.Property(e => e.RecurringCostDirection)
                .HasMaxLength(64)
                .HasColumnName("RECURRING_COST_DIRECTION");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.RequestedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REQUESTED_BY");
            entity.Property(e => e.Routing)
                .HasMaxLength(64)
                .HasColumnName("ROUTING");
            entity.Property(e => e.Solution)
                .HasMaxLength(64)
                .HasColumnName("SOLUTION");
            entity.Property(e => e.Source)
                .HasMaxLength(64)
                .HasColumnName("SOURCE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TechnicalReview).HasColumnName("TECHNICAL_REVIEW");
            entity.Property(e => e.Title)
                .HasMaxLength(128)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<EcrAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECR_AFFE__3214EC2746A1220C");

            entity.ToTable("ECR_AFFECTED_ITEM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcrAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECR_AFFEC__RELAT__4B180DA3");

            entity.HasOne(d => d.Source).WithMany(p => p.EcrAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECR_AFFEC__SOURC__4A23E96A");
        });

        modelBuilder.Entity<EcrFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECR_FILE__3214EC27BF637CB0");

            entity.ToTable("ECR_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcrFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECR_FILE__RELATE__4D005615");

            entity.HasOne(d => d.Source).WithMany(p => p.EcrFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECR_FILE__SOURCE__4C0C31DC");
        });

        modelBuilder.Entity<EcrPr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECR_PR__3214EC27EAF3E4B4");

            entity.ToTable("ECR_PR", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcrPrs)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECR_PR__RELATED___4EE89E87");

            entity.HasOne(d => d.Source).WithMany(p => p.EcrPrs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECR_PR__SOURCE_I__4DF47A4E");
        });

        modelBuilder.Entity<EffsExpression>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EFFS_EXPRESSION", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Definition).HasColumnName("DEFINITION");
            entity.Property(e => e.EffsScopeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EFFS_SCOPE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EffsExpressioncontrolleditem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EFFS_EXPRESSIONCONTROLLEDITEM", "innovator");

            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EffsModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EFFS_MOD__3214EC2743FBEEC9");

            entity.ToTable("EFFS_MODEL", "innovator");

            entity.HasIndex(e => e.Name, "C152").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EffsPartBomExpression>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EFFS_PAR__3214EC2708A2E922");

            entity.ToTable("EFFS_PART_BOM_EXPRESSION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Definition).HasColumnName("DEFINITION");
            entity.Property(e => e.EffsScopeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EFFS_SCOPE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StringNotation).HasColumnName("STRING_NOTATION");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.EffsPartBomExpressions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EFFS_PART__SOURC__072CF7AA");
        });

        modelBuilder.Entity<EffsScope>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EFFS_SCO__3214EC27BF3381BA");

            entity.ToTable("EFFS_SCOPE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BuilderMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BUILDER_METHOD");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EffsScopeItemtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EFFS_SCO__3214EC277FE3E990");

            entity.ToTable("EFFS_SCOPE_ITEMTYPE", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C140").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffsExpressionItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EFFS_EXPRESSION_ITEMTYPE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EffsScopeItemtypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EFFS_SCOP__RELAT__371114F6");

            entity.HasOne(d => d.Source).WithMany(p => p.EffsScopeItemtypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EFFS_SCOP__SOURC__361CF0BD");
        });

        modelBuilder.Entity<EffsScopeVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EFFS_SCO__3214EC2756D894E8");

            entity.ToTable("EFFS_SCOPE_VARIABLE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EffsScopeVariables)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EFFS_SCOP__RELAT__0638D371");

            entity.HasOne(d => d.Source).WithMany(p => p.EffsScopeVariables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EFFS_SCOP__SOURC__0544AF38");
        });

        modelBuilder.Entity<EffsVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EFFS_VAR__3214EC27DF17A417");

            entity.ToTable("EFFS_VARIABLE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMTYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.ListId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIST_ID");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VariableType)
                .HasMaxLength(64)
                .HasColumnName("VARIABLE_TYPE");
        });

        modelBuilder.Entity<EmailMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EMAIL_ME__3214EC27D9A03D2B");

            entity.ToTable("EMAIL_MESSAGE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BodyHtml).HasColumnName("BODY_HTML");
            entity.Property(e => e.BodyPlain).HasColumnName("BODY_PLAIN");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FromUser)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_USER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.QueryString).HasColumnName("QUERY_STRING");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Subject)
                .HasMaxLength(128)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EngineeringEfficiency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ENGINEER__3214EC27546B049A");

            entity.ToTable("ENGINEERING_EFFICIENCY", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EngineeringOptimization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ENGINEER__3214EC2770B02FDE");

            entity.ToTable("ENGINEERING_OPTIMIZATION", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Exclusion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXCLUSIO__3214EC2749BA241E");

            entity.ToTable("EXCLUSION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExclusionRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXCLUSION__RELAT__0D84EF7E");

            entity.HasOne(d => d.Source).WithMany(p => p.ExclusionSources)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__EXCLUSION__SOURC__0C90CB45");
        });

        modelBuilder.Entity<ExpressDco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27C8946D88");

            entity.ToTable("EXPRESS_DCO", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeReason)
                .HasMaxLength(256)
                .HasColumnName("CHANGE_REASON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(60)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<ExpressDcoAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC276241934C");

            entity.ToTable("EXPRESS_DCO_AFFECTED_ITEM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressDcoAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_D__RELAT__50D0E6F9");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressDcoAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_D__SOURC__4FDCC2C0");
        });

        modelBuilder.Entity<ExpressDcoFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC279947F194");

            entity.ToTable("EXPRESS_DCO_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressDcoFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_D__RELAT__52B92F6B");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressDcoFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_D__SOURC__51C50B32");
        });

        modelBuilder.Entity<ExpressDcoSignoff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC274DBA8118");

            entity.ToTable("EXPRESS_DCO_SIGNOFF", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressDcoSignoffs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_D__SOURC__53AD53A4");
        });

        modelBuilder.Entity<ExpressEco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27539567C0");

            entity.ToTable("EXPRESS_ECO", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeEffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("CHANGE_EFFECTIVE_DATE");
            entity.Property(e => e.ChangeReason)
                .HasMaxLength(256)
                .HasColumnName("CHANGE_REASON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(80)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<ExpressEcoAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27D2023F90");

            entity.ToTable("EXPRESS_ECO_AFFECTED_ITEM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressEcoAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_E__RELAT__55959C16");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEcoAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__54A177DD");
        });

        modelBuilder.Entity<ExpressEcoEdr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC2704B04C8D");

            entity.ToTable("EXPRESS_ECO_EDR", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressEcoEdrs)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_E__RELAT__587208C1");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEcoEdrs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__577DE488");
        });

        modelBuilder.Entity<ExpressEcoEdrGrouping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27CA00AA7C");

            entity.ToTable("EXPRESS_ECO_EDR_GROUPING", "innovator");

            entity.HasIndex(e => new { e.Grouping, e.SourceId }, "C147").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Grouping)
                .HasMaxLength(64)
                .HasColumnName("GROUPING");
            entity.Property(e => e.GroupingTeam)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GROUPING_TEAM");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEcoEdrGroupings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__5689C04F");
        });

        modelBuilder.Entity<ExpressEcoFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC2700C52903");

            entity.ToTable("EXPRESS_ECO_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressEcoFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_E__RELAT__5A5A5133");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEcoFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__59662CFA");
        });

        modelBuilder.Entity<ExpressEcoImpactMatrix>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27AAFB5181");

            entity.ToTable("EXPRESS_ECO_IMPACT_MATRIX", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEcoImpactMatrices)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__5B4E756C");
        });

        modelBuilder.Entity<ExpressEcoSignoff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC2704725342");

            entity.ToTable("EXPRESS_ECO_SIGNOFF", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEcoSignoffs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__5C4299A5");
        });

        modelBuilder.Entity<ExpressEdr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27528C3C14");

            entity.ToTable("EXPRESS_EDR", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeReason)
                .HasMaxLength(256)
                .HasColumnName("CHANGE_REASON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(60)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<ExpressEdrAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27C0768135");

            entity.ToTable("EXPRESS_EDR_AFFECTED_ITEM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressEdrAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_E__RELAT__5E2AE217");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEdrAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__5D36BDDE");
        });

        modelBuilder.Entity<ExpressEdrFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC278154E253");

            entity.ToTable("EXPRESS_EDR_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressEdrFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_E__RELAT__60132A89");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEdrFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__5F1F0650");
        });

        modelBuilder.Entity<ExpressEdrSignoff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC278BB578FF");

            entity.ToTable("EXPRESS_EDR_SIGNOFF", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEdrSignoffs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__61074EC2");
        });

        modelBuilder.Entity<Favorite>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FAVORITE__3214EC271B5C4DD4");

            entity.ToTable("FAVORITE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Category)
                .HasMaxLength(64)
                .HasColumnName("CATEGORY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContextType)
                .HasMaxLength(64)
                .HasColumnName("CONTEXT_TYPE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FavoriteOrder).HasColumnName("FAVORITE_ORDER");
            entity.Property(e => e.FolderId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FOLDER_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.QuickAccessFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("QUICK_ACCESS_FLAG");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Favoritefolder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FAVORITE__3214EC27B0F94478");

            entity.ToTable("FAVORITEFOLDER", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FavoriteOrder).HasColumnName("FAVORITE_ORDER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentFolderId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_FOLDER_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Favoritemustviewby>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FAVORITE__3214EC27A360442E");

            entity.ToTable("FAVORITEMUSTVIEWBY", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C71").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Favoritemustviewbies)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FAVORITEM__RELAT__3B16B004");

            entity.HasOne(d => d.Source).WithMany(p => p.Favoritemustviewbies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FAVORITEM__SOURC__3A228BCB");
        });

        modelBuilder.Entity<FeatureLicense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FEATURE___3214EC27F165D340");

            entity.ToTable("FEATURE_LICENSE", "innovator");

            entity.HasIndex(e => e.ActivationKey, "C100").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ActivationKey)
                .HasMaxLength(32)
                .HasColumnName("ACTIVATION_KEY");
            entity.Property(e => e.AvailableTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'A73B655731924CD0B027E4F4D5FCC0A9')")
                .IsFixedLength()
                .HasColumnName("AVAILABLE_TO");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConcurrentUserCount).HasColumnName("CONCURRENT_USER_COUNT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DatabaseEngineEdition)
                .HasMaxLength(128)
                .HasColumnName("DATABASE_ENGINE_EDITION");
            entity.Property(e => e.DatabaseServerName)
                .HasMaxLength(128)
                .HasColumnName("DATABASE_SERVER_NAME");
            entity.Property(e => e.Domain)
                .HasMaxLength(128)
                .HasColumnName("DOMAIN");
            entity.Property(e => e.EnforcementMode)
                .HasMaxLength(128)
                .HasColumnName("ENFORCEMENT_MODE");
            entity.Property(e => e.ExpirationDate)
                .HasMaxLength(24)
                .HasColumnName("EXPIRATION_DATE");
            entity.Property(e => e.Feature)
                .HasMaxLength(321)
                .HasColumnName("FEATURE");
            entity.Property(e => e.FrameworkLicenseKey)
                .HasMaxLength(1024)
                .HasColumnName("FRAMEWORK_LICENSE_KEY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InnovatorServerLocale)
                .HasMaxLength(128)
                .HasColumnName("INNOVATOR_SERVER_LOCALE");
            entity.Property(e => e.InnovatorServerName)
                .HasMaxLength(128)
                .HasColumnName("INNOVATOR_SERVER_NAME");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IssuedTo)
                .HasMaxLength(128)
                .HasColumnName("ISSUED_TO");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LicenseData).HasColumnName("LICENSE_DATA");
            entity.Property(e => e.LicenseDescription)
                .HasMaxLength(256)
                .HasColumnName("LICENSE_DESCRIPTION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.Login)
                .HasMaxLength(128)
                .HasColumnName("LOGIN");
            entity.Property(e => e.MacAddress)
                .HasMaxLength(32)
                .HasColumnName("MAC_ADDRESS");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NamedUserList).HasColumnName("NAMED_USER_LIST");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Password)
                .HasMaxLength(128)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.StartDate)
                .HasMaxLength(24)
                .HasColumnName("START_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TotalUsers).HasColumnName("TOTAL_USERS");
        });

        modelBuilder.Entity<Feed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FEED__3214EC27FA973EF6");

            entity.ToTable("FEED", "innovator");

            entity.HasIndex(e => new { e.SourceId, e.FeedType }, "FEED_Source_id_Feed_type");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FeedType)
                .HasMaxLength(64)
                .HasColumnName("FEED_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HistoryEvents)
                .HasMaxLength(512)
                .HasColumnName("HISTORY_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PolysourceTypeName)
                .HasMaxLength(128)
                .HasColumnName("POLYSOURCE_TYPE_NAME");
            entity.Property(e => e.Reference).HasColumnName("REFERENCE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Feeds)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FEED__SOURCE_ID__7913E27D");
        });

        modelBuilder.Entity<Feedtemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FEEDTEMP__3214EC27A556D5A6");

            entity.ToTable("FEEDTEMPLATE", "innovator");

            entity.HasIndex(e => new { e.SourceId, e.FeedType }, "FEEDTEMPLATE_Source_id_Feed_type");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FeedType)
                .HasMaxLength(64)
                .HasColumnName("FEED_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HistoryEvents)
                .HasMaxLength(512)
                .HasColumnName("HISTORY_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PolysourceTypeName)
                .HasMaxLength(128)
                .HasColumnName("POLYSOURCE_TYPE_NAME");
            entity.Property(e => e.Reference).HasColumnName("REFERENCE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Feedtemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FEEDTEMPL__SOURC__0579B962");
        });

        modelBuilder.Entity<Field>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FIELD__3214EC2795FB0A4D");

            entity.ToTable("FIELD", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.BgColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BG_COLOR");
            entity.Property(e => e.BorderWidth).HasColumnName("BORDER_WIDTH");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClipOverflow)
                .HasMaxLength(64)
                .HasColumnName("CLIP_OVERFLOW");
            entity.Property(e => e.ClipRectangle)
                .HasMaxLength(32)
                .HasColumnName("CLIP_RECTANGLE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Container)
                .HasMaxLength(32)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(32)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.DisplayLength).HasColumnName("DISPLAY_LENGTH");
            entity.Property(e => e.DisplayLengthUnit)
                .HasMaxLength(64)
                .HasColumnName("DISPLAY_LENGTH_UNIT");
            entity.Property(e => e.FieldType)
                .HasMaxLength(64)
                .HasColumnName("FIELD_TYPE");
            entity.Property(e => e.FontColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FONT_COLOR");
            entity.Property(e => e.FontFamily)
                .HasMaxLength(64)
                .HasColumnName("FONT_FAMILY");
            entity.Property(e => e.FontSize)
                .HasMaxLength(8)
                .HasColumnName("FONT_SIZE");
            entity.Property(e => e.FontWeight)
                .HasMaxLength(64)
                .HasColumnName("FONT_WEIGHT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.HtmlCode).HasColumnName("HTML_CODE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDisabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_DISABLED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVisible)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VISIBLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPosition)
                .HasMaxLength(64)
                .HasColumnName("LABEL_POSITION");
            entity.Property(e => e.Legend)
                .HasMaxLength(32)
                .HasColumnName("LEGEND");
            entity.Property(e => e.ListNoBlank)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIST_NO_BLANK");
            entity.Property(e => e.ListboxSize).HasColumnName("LISTBOX_SIZE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.Orientation)
                .HasMaxLength(64)
                .HasColumnName("ORIENTATION");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Positioning)
                .HasMaxLength(64)
                .HasColumnName("POSITIONING");
            entity.Property(e => e.PropertytypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTYTYPE_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TabIndex).HasColumnName("TAB_INDEX");
            entity.Property(e => e.TabStop)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("TAB_STOP");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TextAlign)
                .HasMaxLength(64)
                .HasColumnName("TEXT_ALIGN");
            entity.Property(e => e.TextareaCols).HasColumnName("TEXTAREA_COLS");
            entity.Property(e => e.TextareaRows).HasColumnName("TEXTAREA_ROWS");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.XclassFieldWidth).HasColumnName("XCLASS_FIELD_WIDTH");
            entity.Property(e => e.XclassTextWidth).HasColumnName("XCLASS_TEXT_WIDTH");
            entity.Property(e => e.ZIndex).HasColumnName("Z_INDEX");

            entity.HasOne(d => d.Source).WithMany(p => p.Fields)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FIELD__SOURCE_ID__6BEEF189");
        });

        modelBuilder.Entity<FieldEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FIELD_EV__3214EC276E5B5B85");

            entity.ToTable("FIELD_EVENT", "innovator");

            entity.HasIndex(e => new { e.FieldEvent1, e.RelatedId, e.SourceId }, "C27").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FieldEvent1)
                .HasMaxLength(64)
                .HasColumnName("FIELD_EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.FieldEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FIELD_EVE__RELAT__7760A435");

            entity.HasOne(d => d.Source).WithMany(p => p.FieldEvents)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FIELD_EVE__SOURC__766C7FFC");
        });

        modelBuilder.Entity<File>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILE__3214EC27914B45F5");

            entity.ToTable("FILE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => new { e.ConfigId, e.IsCurrent }, "IX_File_config_id_is_current");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.CheckedoutPath)
                .HasMaxLength(256)
                .HasColumnName("CHECKEDOUT_PATH");
            entity.Property(e => e.Checksum)
                .HasMaxLength(64)
                .HasColumnName("CHECKSUM");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileSize)
                .HasColumnType("decimal(14, 0)")
                .HasColumnName("FILE_SIZE");
            entity.Property(e => e.FileType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_TYPE");
            entity.Property(e => e.Filename)
                .HasMaxLength(256)
                .HasColumnName("FILENAME");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(256)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Mimetype)
                .HasMaxLength(128)
                .HasColumnName("MIMETYPE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Filecontaineritem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FILECONTAINERITEMS", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Filecontainerlocator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILECONT__3214EC27338D8ADE");

            entity.ToTable("FILECONTAINERLOCATOR", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.ContainerId, "IX_FILECONTAINERLOCATOR_CONTAINER_ID");

            entity.HasIndex(e => e.FileId, "IX_filecontainerlocator_file_id_container_type_id_container_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContainerId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER_ID");
            entity.Property(e => e.ContainerPropertyName)
                .HasMaxLength(128)
                .HasColumnName("CONTAINER_PROPERTY_NAME");
            entity.Property(e => e.ContainerTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER_TYPE_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Fileexchangepackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEEXCH__3214EC27ED349BD9");

            entity.ToTable("FILEEXCHANGEPACKAGE", "innovator");

            entity.HasIndex(e => e.PkgNumber, "C80").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasDefaultValueSql("(N'Upload')")
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PkgNumber)
                .HasMaxLength(256)
                .HasColumnName("PKG_NUMBER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Fileexchangepackagefile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEEXCH__3214EC27E11DF8C2");

            entity.ToTable("FILEEXCHANGEPACKAGEFILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentalId)
                .HasMaxLength(32)
                .HasColumnName("PARENTAL_ID");
            entity.Property(e => e.ParentalProperty)
                .HasMaxLength(32)
                .HasColumnName("PARENTAL_PROPERTY");
            entity.Property(e => e.ParentalType)
                .HasMaxLength(32)
                .HasColumnName("PARENTAL_TYPE");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Fileexchangepackagefiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FILEEXCHA__RELAT__55CAA640");

            entity.HasOne(d => d.Source).WithMany(p => p.Fileexchangepackagefiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FILEEXCHA__SOURC__54D68207");
        });

        modelBuilder.Entity<Fileexchangetxn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEEXCH__3214EC27680E3AA9");

            entity.ToTable("FILEEXCHANGETXN", "innovator");

            entity.HasIndex(e => e.TxnNumber, "C81").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Data).HasColumnName("DATA");
            entity.Property(e => e.Error)
                .HasMaxLength(1024)
                .HasColumnName("ERROR");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Package)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PACKAGE");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ServiceProvider)
                .HasMaxLength(64)
                .HasColumnName("SERVICE_PROVIDER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransferAttempts)
                .HasDefaultValueSql("((0))")
                .HasColumnName("TRANSFER_ATTEMPTS");
            entity.Property(e => e.TxnNumber)
                .HasMaxLength(256)
                .HasColumnName("TXN_NUMBER");
            entity.Property(e => e.TxnStatus)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'NotStarted')")
                .HasColumnName("TXN_STATUS");
            entity.Property(e => e.TxnType)
                .HasMaxLength(64)
                .HasColumnName("TXN_TYPE");
        });

        modelBuilder.Entity<Fileexchangetxnstate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEEXCH__3214EC27A0E7120C");

            entity.ToTable("FILEEXCHANGETXNSTATE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Error)
                .HasMaxLength(1024)
                .HasColumnName("ERROR");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .HasColumnName("FILE_ID");
            entity.Property(e => e.FileName)
                .HasMaxLength(128)
                .HasColumnName("FILE_NAME");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Fileexchangetxnstates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FILEEXCHA__SOURC__56BECA79");
        });

        modelBuilder.Entity<Filegroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEGROU__3214EC27EF47AEB7");

            entity.ToTable("FILEGROUP", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<FilegroupFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEGROU__3214EC27E3D1653F");

            entity.ToTable("FILEGROUP_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("FILE_EXPIRATION_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.FilegroupFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FILEGROUP__RELAT__66010E09");

            entity.HasOne(d => d.Source).WithMany(p => p.FilegroupFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FILEGROUP__SOURC__650CE9D0");
        });

        modelBuilder.Entity<Fileselector>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILESELE__3214EC27D66B9768");

            entity.ToTable("FILESELECTOR", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Filter).HasColumnName("FILTER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Reference).HasColumnName("REFERENCE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'File ${File:filename} from ${ItemType:label} ${Item:keyed_name}')")
                .HasColumnName("TOOLTIP_TEMPLATE");

            entity.HasOne(d => d.Source).WithMany(p => p.Fileselectors)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FILESELEC__SOURC__066DDD9B");
        });

        modelBuilder.Entity<Fileselectortemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILESELE__3214EC2757FC4B3F");

            entity.ToTable("FILESELECTORTEMPLATE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Filter).HasColumnName("FILTER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Reference).HasColumnName("REFERENCE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'File ${File:filename} from ${ItemType:label} ${Item:keyed_name}')")
                .HasColumnName("TOOLTIP_TEMPLATE");

            entity.HasOne(d => d.Source).WithMany(p => p.Fileselectortemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FILESELEC__SOURC__076201D4");
        });

        modelBuilder.Entity<Filetype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILETYPE__3214EC279F03C0BD");

            entity.ToTable("FILETYPE", "innovator");

            entity.HasIndex(e => e.Name, "C4").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Extension)
                .HasMaxLength(32)
                .HasColumnName("EXTENSION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Mimetype)
                .HasMaxLength(128)
                .HasColumnName("MIMETYPE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Pattern)
                .HasMaxLength(128)
                .HasColumnName("PATTERN");
            entity.Property(e => e.PatternOffset).HasColumnName("PATTERN_OFFSET");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.RegularExpression)
                .HasMaxLength(32)
                .HasColumnName("REGULAR_EXPRESSION");
            entity.Property(e => e.RuleType)
                .HasMaxLength(64)
                .HasColumnName("RULE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UseMagicBytes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_MAGIC_BYTES");
            entity.Property(e => e.UseRegularExpression)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_REGULAR_EXPRESSION");
        });

        modelBuilder.Entity<FilterValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILTER_V__3214EC27E1594778");

            entity.ToTable("FILTER_VALUE", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Filter)
                .HasMaxLength(64)
                .HasColumnName("FILTER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Inactive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value)
                .HasMaxLength(64)
                .HasColumnName("VALUE");

            entity.HasOne(d => d.Source).WithMany(p => p.FilterValues)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FILTER_VA__SOURC__48A5B54C");
        });

        modelBuilder.Entity<Form>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORM__3214EC272352F418");

            entity.ToTable("FORM", "innovator");

            entity.HasIndex(e => e.Name, "C142").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => e.KeyedName, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Height)
                .HasDefaultValueSql("((234))")
                .HasColumnName("HEIGHT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Stylesheet)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'../styles/default.css')")
                .HasColumnName("STYLESHEET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Width)
                .HasDefaultValueSql("((699))")
                .HasColumnName("WIDTH");
        });

        modelBuilder.Entity<FormEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORM_EVE__3214EC27CB85D153");

            entity.ToTable("FORM_EVENT", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FormEvent1)
                .HasMaxLength(64)
                .HasColumnName("FORM_EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.FormEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FORM_EVEN__RELAT__4A8DFDBE");

            entity.HasOne(d => d.Source).WithMany(p => p.FormEvents)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FORM_EVEN__SOURC__4999D985");
        });

        modelBuilder.Entity<Forum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUM__3214EC27CEDF0FD1");

            entity.ToTable("FORUM", "innovator");

            entity.HasIndex(e => new { e.Name, e.CreatedById }, "C103").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.ForumType)
                .HasMaxLength(64)
                .HasColumnName("FORUM_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Forumitem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMITE__3214EC274FDC43BD");

            entity.ToTable("FORUMITEM", "innovator");

            entity.HasIndex(e => new { e.ItemConfigId, e.SourceId }, "C111").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsBoardOnly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_BOARD_ONLY");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemType)
                .HasMaxLength(64)
                .HasColumnName("ITEM_TYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Forumitems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMITEM__SOURC__7A0806B6");
        });

        modelBuilder.Entity<Forummessagegroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMMES__3214EC27298E2695");

            entity.ToTable("FORUMMESSAGEGROUP", "innovator");

            entity.HasIndex(e => e.Id, "C107").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Aml).HasColumnName("AML");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GroupType)
                .HasMaxLength(64)
                .HasColumnName("GROUP_TYPE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UserCriteriaId)
                .HasMaxLength(32)
                .HasColumnName("USER_CRITERIA_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Forummessagegroups)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMMESS__SOURC__7AFC2AEF");
        });

        modelBuilder.Entity<Forummustviewby>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMMUS__3214EC271C46E185");

            entity.ToTable("FORUMMUSTVIEWBY", "innovator");

            entity.HasIndex(e => new { e.MustViewId, e.SourceId }, "C112").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MustViewId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MUST_VIEW_ID");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Forummustviewbies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMMUST__SOURC__7BF04F28");
        });

        modelBuilder.Entity<Forumsearch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMSEA__3214EC2746BC22AB");

            entity.ToTable("FORUMSEARCH", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C108").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsBoardOnly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_BOARD_ONLY");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Forumsearches)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FORUMSEAR__RELAT__7DD8979A");

            entity.HasOne(d => d.Source).WithMany(p => p.Forumsearches)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMSEAR__SOURC__7CE47361");
        });

        modelBuilder.Entity<Forumsharedwith>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMSHA__3214EC271B6279EB");

            entity.ToTable("FORUMSHAREDWITH", "innovator");

            entity.HasIndex(e => new { e.SharedWithId, e.SourceId }, "C113").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SharedWithId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHARED_WITH_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Forumsharedwiths)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMSHAR__SOURC__7ECCBBD3");
        });

        modelBuilder.Entity<Forumwantviewby>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMWAN__3214EC2730B76C85");

            entity.ToTable("FORUMWANTVIEWBY", "innovator");

            entity.HasIndex(e => new { e.WantViewId, e.SourceId }, "C114").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WantViewId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WANT_VIEW_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Forumwantviewbies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMWANT__SOURC__7FC0E00C");
        });

        modelBuilder.Entity<FrRepresentation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FR_REPRE__3214EC272F5EEDC3");

            entity.ToTable("FR_REPRESENTATION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.RepresentationTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPRESENTATION_TYPE_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.FrRepresentations)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FR_REPRES__SOURC__318D45CA");
        });

        modelBuilder.Entity<FrRepresentationfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FR_REPRE__3214EC27C60392D0");

            entity.ToTable("FR_REPRESENTATIONFILE", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C70").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Kind)
                .HasMaxLength(512)
                .HasColumnName("KIND");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.FrRepresentationfiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FR_REPRES__RELAT__3469B275");

            entity.HasOne(d => d.Source).WithMany(p => p.FrRepresentationfiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FR_REPRES__SOURC__33758E3C");
        });

        modelBuilder.Entity<FrRepresentationtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FR_REPRE__3214EC274DF36D47");

            entity.ToTable("FR_REPRESENTATIONTYPE", "innovator");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C67").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.Name, "I1");

            entity.HasIndex(e => e.SourceId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_ACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.FrRepresentationtypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FR_REPRES__SOURC__32816A03");
        });

        modelBuilder.Entity<FrReptypeCharacteristic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FR_REPTY__3214EC27D211C2DC");

            entity.ToTable("FR_REPTYPE_CHARACTERISTIC", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C68").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.FrReptypeCharacteristics)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FR_REPTYP__RELAT__3651FAE7");

            entity.HasOne(d => d.Source).WithMany(p => p.FrReptypeCharacteristics)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FR_REPTYP__SOURC__355DD6AE");
        });

        modelBuilder.Entity<FrSupportedfiletype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FR_SUPPO__3214EC2781FBE2F2");

            entity.ToTable("FR_SUPPORTEDFILETYPE", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C69").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.FrSupportedfiletypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FR_SUPPOR__RELAT__383A4359");

            entity.HasOne(d => d.Source).WithMany(p => p.FrSupportedfiletypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FR_SUPPOR__SOURC__37461F20");
        });

        modelBuilder.Entity<Frame>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FRAME__3214EC27A0027916");

            entity.ToTable("FRAME", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COLOR");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Frameborder)
                .HasMaxLength(64)
                .HasColumnName("FRAMEBORDER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MarginHeight).HasColumnName("MARGIN_HEIGHT");
            entity.Property(e => e.MarginWidth).HasColumnName("MARGIN_WIDTH");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.Noresize)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NORESIZE");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Scrolling)
                .HasMaxLength(64)
                .HasColumnName("SCROLLING");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Frames)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FRAME__SOURCE_ID__0E7913B7");
        });

        modelBuilder.Entity<Frameset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FRAMESET__3214EC27265BAB04");

            entity.ToTable("FRAMESET", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Cols)
                .HasMaxLength(32)
                .HasColumnName("COLS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Frameborder)
                .HasMaxLength(64)
                .HasColumnName("FRAMEBORDER");
            entity.Property(e => e.Framespacing).HasColumnName("FRAMESPACING");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Rows)
                .HasMaxLength(32)
                .HasColumnName("ROWS_");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Framesets)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FRAMESET__SOURCE__0F6D37F0");
        });

        modelBuilder.Entity<Globalpresentationconfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GLOBALPR__3214EC27D53F8F25");

            entity.ToTable("GLOBALPRESENTATIONCONFIG", "innovator");

            entity.HasIndex(e => e.Client, "C39").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PresentationId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PRESENTATION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ViewType)
                .HasMaxLength(64)
                .HasColumnName("VIEW_TYPE");
        });

        modelBuilder.Entity<GnConnectortype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_CONNE__3214EC27D28D7977");

            entity.ToTable("GN_CONNECTORTYPE", "innovator");

            entity.HasIndex(e => e.Name, "C129").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyBuilderMethodId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("KEY_BUILDER_METHOD_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ValueBuilderMethodId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VALUE_BUILDER_METHOD_ID");
        });

        modelBuilder.Entity<GnConnectortypeproperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_CONNE__3214EC27DF81C618");

            entity.ToTable("GN_CONNECTORTYPEPROPERTY", "innovator");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C138").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ValueBuilderMethodId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VALUE_BUILDER_METHOD_ID");
            entity.Property(e => e.ValueTemplate).HasColumnName("VALUE_TEMPLATE");

            entity.HasOne(d => d.Source).WithMany(p => p.GnConnectortypeproperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__GN_CONNEC__SOURC__2AAB3E11");
        });

        modelBuilder.Entity<GnConnectorviewdefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_CONNE__3214EC27018D4720");

            entity.ToTable("GN_CONNECTORVIEWDEFINITION", "innovator");

            entity.HasIndex(e => e.Name, "C130").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<GnConnectorviewtemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_CONNE__3214EC271AF1C191");

            entity.ToTable("GN_CONNECTORVIEWTEMPLATE", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C135").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.GnConnectorviewtemplates)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__GN_CONNEC__RELAT__2C938683");

            entity.HasOne(d => d.Source).WithMany(p => p.GnConnectorviewtemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__GN_CONNEC__SOURC__2B9F624A");
        });

        modelBuilder.Entity<GnGraphviewconnector>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_GRAPH__3214EC2786BB02BA");

            entity.ToTable("GN_GRAPHVIEWCONNECTOR", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ConnectorTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONNECTOR_TYPE_ID");
            entity.Property(e => e.ConnectorViewId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONNECTOR_VIEW_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndQueryItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("END_QUERY_ITEM_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IntQueryReferencePath)
                .HasMaxLength(512)
                .HasColumnName("INT_QUERY_REFERENCE_PATH");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsIncoming)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_INCOMING");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceEndpointId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ENDPOINT_ID");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartQueryItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("START_QUERY_ITEM_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TargetEndpointId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TARGET_ENDPOINT_ID");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.GnGraphviewconnectors)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__GN_GRAPHV__SOURC__2D87AABC");
        });

        modelBuilder.Entity<GnGraphviewdefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_GRAPH__3214EC27B244903D");

            entity.ToTable("GN_GRAPHVIEWDEFINITION", "innovator");

            entity.HasIndex(e => e.Name, "C131").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AutoExpandLevels)
                .HasDefaultValueSql("((3))")
                .HasColumnName("AUTO_EXPAND_LEVELS");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.QueryDefinitionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("QUERY_DEFINITION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<GnGraphviewitemtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_GRAPH__3214EC274BDCB614");

            entity.ToTable("GN_GRAPHVIEWITEMTYPE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EntryGraphViewNodeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENTRY_GRAPH_VIEW_NODE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.GnGraphviewitemtypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__GN_GRAPHV__RELAT__2F6FF32E");

            entity.HasOne(d => d.Source).WithMany(p => p.GnGraphviewitemtypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__GN_GRAPHV__SOURC__2E7BCEF5");
        });

        modelBuilder.Entity<GnGraphviewnode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_GRAPH__3214EC27BED8F2BA");

            entity.ToTable("GN_GRAPHVIEWNODE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndQueryItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("END_QUERY_ITEM_ID");
            entity.Property(e => e.ExtQueryReferencePath)
                .HasMaxLength(512)
                .HasColumnName("EXT_QUERY_REFERENCE_PATH");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IntQueryReferencePath)
                .HasMaxLength(512)
                .HasColumnName("INT_QUERY_REFERENCE_PATH");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NodeTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NODE_TYPE_ID");
            entity.Property(e => e.NodeViewId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NODE_VIEW_ID");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartQueryItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("START_QUERY_ITEM_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.GnGraphviewnodes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__GN_GRAPHV__SOURC__30641767");
        });

        modelBuilder.Entity<GnGvdefaultcard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_GVDEF__3214EC27D3311EC3");

            entity.ToTable("GN_GVDEFAULTCARD", "innovator");

            entity.HasIndex(e => new { e.ItemtypeId, e.SourceId }, "C136").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMTYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.GnGvdefaultcards)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__GN_GVDEFA__RELAT__324C5FD9");

            entity.HasOne(d => d.Source).WithMany(p => p.GnGvdefaultcards)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__GN_GVDEFA__SOURC__31583BA0");
        });

        modelBuilder.Entity<GnNodetype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_NODET__3214EC27420DE780");

            entity.ToTable("GN_NODETYPE", "innovator");

            entity.HasIndex(e => e.Name, "C132").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMTYPE_ID");
            entity.Property(e => e.KeyBuilderMethodId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("KEY_BUILDER_METHOD_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ValueBuilderMethodId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VALUE_BUILDER_METHOD_ID");
        });

        modelBuilder.Entity<GnNodetypeproperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_NODET__3214EC276002AD01");

            entity.ToTable("GN_NODETYPEPROPERTY", "innovator");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C139").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ValueBuilderMethodId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VALUE_BUILDER_METHOD_ID");
            entity.Property(e => e.ValueTemplate).HasColumnName("VALUE_TEMPLATE");

            entity.HasOne(d => d.Source).WithMany(p => p.GnNodetypeproperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__GN_NODETY__SOURC__33408412");
        });

        modelBuilder.Entity<GnNodeviewdefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_NODEV__3214EC27E5EF6A1B");

            entity.ToTable("GN_NODEVIEWDEFINITION", "innovator");

            entity.HasIndex(e => e.Name, "C133").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<GnNodeviewtemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_NODEV__3214EC272996B2D1");

            entity.ToTable("GN_NODEVIEWTEMPLATE", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C137").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.GnNodeviewtemplates)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__GN_NODEVI__RELAT__3528CC84");

            entity.HasOne(d => d.Source).WithMany(p => p.GnNodeviewtemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__GN_NODEVI__SOURC__3434A84B");
        });

        modelBuilder.Entity<GnSystemdefaultcard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_SYSTE__3214EC273383E570");

            entity.ToTable("GN_SYSTEMDEFAULTCARD", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMTYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PolyTypeRank).HasColumnName("POLY_TYPE_RANK");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ViewCardId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VIEW_CARD_ID");
        });

        modelBuilder.Entity<GnViewcard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GN_VIEWC__3214EC27F25DCF94");

            entity.ToTable("GN_VIEWCARD", "innovator");

            entity.HasIndex(e => e.Name, "C134").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TemplateDefinition).HasColumnName("TEMPLATE_DEFINITION");
        });

        modelBuilder.Entity<Grid>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GRID__3214EC27F6D32EEE");

            entity.ToTable("GRID", "innovator");

            entity.HasIndex(e => e.Name, "C5").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MergePath)
                .HasMaxLength(256)
                .HasColumnName("MERGE_PATH");
            entity.Property(e => e.Method)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("METHOD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Query).HasColumnName("QUERY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<GridColumn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GRID_COL__3214EC27E41C25B5");

            entity.ToTable("GRID_COLUMN", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Align)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("ALIGN");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Datatype)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'default')")
                .HasColumnName("DATATYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Property)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SelectMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SELECT_METHOD");
            entity.Property(e => e.SelectQuery).HasColumnName("SELECT_QUERY");
            entity.Property(e => e.Sort).HasColumnName("SORT");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceForm)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_FORM");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartsNestedRow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("STARTS_NESTED_ROW");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Visible)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("VISIBLE");
            entity.Property(e => e.Width)
                .HasDefaultValueSql("((100))")
                .HasColumnName("WIDTH");
            entity.Property(e => e.Xpath)
                .HasMaxLength(512)
                .HasColumnName("XPATH");

            entity.HasOne(d => d.Source).WithMany(p => p.GridColumns)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__GRID_COLU__SOURC__0307610B");
        });

        modelBuilder.Entity<GridEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GRID_EVE__3214EC27D3C4A797");

            entity.ToTable("GRID_EVENT", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridEvent1)
                .HasMaxLength(64)
                .HasColumnName("GRID_EVENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.GridEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__GRID_EVEN__RELAT__6DD739FB");

            entity.HasOne(d => d.Source).WithMany(p => p.GridEvents)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__GRID_EVEN__SOURC__6CE315C2");
        });

        modelBuilder.Entity<GridLayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GRID_LAY__3214EC27332163A5");

            entity.ToTable("GRID_LAYOUT", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalSettings).HasColumnName("ADDITIONAL_SETTINGS");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ColumnOrder).HasColumnName("COLUMN_ORDER");
            entity.Property(e => e.ColumnWidths).HasColumnName("COLUMN_WIDTHS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FrozenColumns).HasColumnName("FROZEN_COLUMNS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itname)
                .HasMaxLength(32)
                .HasColumnName("ITNAME");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Location)
                .HasMaxLength(64)
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaxRecords).HasColumnName("MAX_RECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PageSize).HasColumnName("PAGE_SIZE");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Help>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HELP__3214EC27D00E98C7");

            entity.ToTable("HELP", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Content).HasColumnName("CONTENT");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(80)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<HelpSeeAlso>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HELP_SEE__3214EC27DB9DA61A");

            entity.ToTable("HELP_SEE_ALSO", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Seq).HasColumnName("SEQ");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.HelpSeeAlsoRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__HELP_SEE___RELAT__7F36D027");

            entity.HasOne(d => d.Source).WithMany(p => p.HelpSeeAlsoSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__HELP_SEE___SOURC__7E42ABEE");
        });

        modelBuilder.Entity<HideIn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HIDE_IN__3214EC27C53B7A33");

            entity.ToTable("HIDE_IN", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HideIn1)
                .HasMaxLength(64)
                .HasColumnName("HIDE_IN");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.HideIns)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__HIDE_IN__SOURCE___6ECB5E34");
        });

        modelBuilder.Entity<HideRelatedIn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HIDE_REL__3214EC27AF1BEDA4");

            entity.ToTable("HIDE_RELATED_IN", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HideIn)
                .HasMaxLength(64)
                .HasColumnName("HIDE_IN");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.HideRelatedIns)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__HIDE_RELA__SOURC__6FBF826D");
        });

        modelBuilder.Entity<History>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY__3214EC2766615309");

            entity.ToTable("HISTORY", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Action)
                .HasMaxLength(32)
                .HasColumnName("ACTION");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.CreatedOnTick)
                .HasColumnType("decimal(19, 0)")
                .HasColumnName("CREATED_ON_TICK");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemMajorRev)
                .HasMaxLength(8)
                .HasColumnName("ITEM_MAJOR_REV");
            entity.Property(e => e.ItemState)
                .HasMaxLength(32)
                .HasColumnName("ITEM_STATE");
            entity.Property(e => e.ItemVersion).HasColumnName("ITEM_VERSION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Version).HasColumnName("VERSION");

            entity.HasOne(d => d.Source).WithMany(p => p.Histories)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__HISTORY__SOURCE___7B313519");
        });

        modelBuilder.Entity<HistoryAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY___3214EC2727A27070");

            entity.ToTable("HISTORY_ACTION", "innovator");

            entity.HasIndex(e => e.Name, "C32").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommentText)
                .HasMaxLength(1024)
                .HasColumnName("COMMENT_TEXT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsInternal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_INTERNAL");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<HistoryContainer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY___3214EC276838DE90");

            entity.ToTable("HISTORY_CONTAINER", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.ItemConfigId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMTYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<HistoryTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY___3214EC2797B1C37A");

            entity.ToTable("HISTORY_TEMPLATE", "innovator");

            entity.HasIndex(e => e.Name, "C33").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyHistory)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("PROPERTY_HISTORY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<HistoryTemplateAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY___3214EC27980FF638");

            entity.ToTable("HISTORY_TEMPLATE_ACTION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.HistoryTemplateActions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__HISTORY_T__RELAT__7948ECA7");

            entity.HasOne(d => d.Source).WithMany(p => p.HistoryTemplateActions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__HISTORY_T__SOURC__7854C86E");
        });

        modelBuilder.Entity<HistoryTemplateWhereUsed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY___3214EC27F2378358");

            entity.ToTable("HISTORY_TEMPLATE_WHERE_USED", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.HistoryTemplateWhereUseds)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__HISTORY_T__SOURC__7A3D10E0");
        });

        modelBuilder.Entity<Historysecuremessage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("HISTORYSECUREMESSAGE", "innovator");

            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.CreatedOnTick)
                .HasColumnType("decimal(19, 0)")
                .HasColumnName("CREATED_ON_TICK");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DisabledById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DISABLED_BY_ID");
            entity.Property(e => e.DisabledOn)
                .HasColumnType("datetime")
                .HasColumnName("DISABLED_ON");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HighlightedText)
                .HasMaxLength(128)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIGHLIGHTED_TEXT");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemMajorRev)
                .HasMaxLength(8)
                .HasColumnName("ITEM_MAJOR_REV");
            entity.Property(e => e.ItemState)
                .HasMaxLength(32)
                .HasColumnName("ITEM_STATE");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(30)
                .HasColumnName("ITEM_TYPE_NAME");
            entity.Property(e => e.ItemVersion).HasColumnName("ITEM_VERSION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ReplyToId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPLY_TO_ID");
            entity.Property(e => e.SmData).HasColumnName("SM_DATA");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ThreadId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("THREAD_ID");
        });

        modelBuilder.Entity<Identity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__IDENTITY__3214EC27DDD6A204");

            entity.ToTable("IDENTITY", "innovator");

            entity.HasIndex(e => e.Name, "C6").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => e.KeyedName, "I1");

            entity.HasIndex(e => e.MaximumPwdAge, "IX_MAXIMUM_PWD_AGE");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsAlias)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_ALIAS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaximumPwdAge).HasColumnName("MAXIMUM_PWD_AGE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PwdHistoryLength).HasColumnName("PWD_HISTORY_LENGTH");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<IdentityList>(entity =>
        {
            entity.HasKey(e => new { e.IdentityListId, e.IdentityId });

            entity.ToTable("IDENTITY_LIST", "application");

            entity.Property(e => e.IdentityListId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IDENTITY_LIST_ID");
            entity.Property(e => e.IdentityId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IDENTITY_ID");
        });

        modelBuilder.Entity<IdentityListInfo>(entity =>
        {
            entity.HasKey(e => e.IdentityListId);

            entity.ToTable("IDENTITY_LIST_INFO", "application");

            entity.HasIndex(e => e.LastActivityTime, "I0");

            entity.Property(e => e.IdentityListId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IDENTITY_LIST_ID");
            entity.Property(e => e.IdentityList)
                .IsUnicode(false)
                .HasColumnName("IDENTITY_LIST");
            entity.Property(e => e.LastActivityTime)
                .HasColumnType("datetime")
                .HasColumnName("LAST_ACTIVITY_TIME");
        });

        modelBuilder.Entity<Implement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__IMPLEMEN__3214EC27EB60F1A3");

            entity.ToTable("IMPLEMENTS", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Implements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__IMPLEMENT__SOURC__4B8221F7");
        });

        modelBuilder.Entity<InbasketTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("INBASKET_TASK", "innovator");

            entity.Property(e => e.AssignedTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ASSIGNED_TO");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Container)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER");
            entity.Property(e => e.ContainerTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER_TYPE_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("DUE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("ICON");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Instructions)
                .HasMaxLength(1024)
                .HasColumnName("INSTRUCTIONS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Item)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LanguageCodeFilter)
                .HasMaxLength(3)
                .HasColumnName("LANGUAGE_CODE_FILTER");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MyAssignment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MY_ASSIGNMENT");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("START_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<InheritedServerEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__INHERITE__3214EC272A0371D0");

            entity.ToTable("INHERITED_SERVER_EVENTS", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.InheritedServerEvents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__INHERITED__SOURC__4C764630");
        });

        modelBuilder.Entity<ItemAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITEM_ACT__3214EC27FFF0BD3D");

            entity.ToTable("ITEM_ACTION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ItemActions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ITEM_ACTI__RELAT__11558062");

            entity.HasOne(d => d.Source).WithMany(p => p.ItemActions)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ITEM_ACTI__SOURC__10615C29");
        });

        modelBuilder.Entity<ItemReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITEM_REP__3214EC27BC9C1B60");

            entity.ToTable("ITEM_REPORT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ItemReports)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ITEM_REPO__RELAT__0AA882D3");

            entity.HasOne(d => d.Source).WithMany(p => p.ItemReports)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ITEM_REPO__SOURC__09B45E9A");
        });

        modelBuilder.Entity<Itempresentationconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITEMPRES__3214EC27CA240CCC");

            entity.ToTable("ITEMPRESENTATIONCONFIGURATION", "innovator");

            entity.HasIndex(e => new { e.ClientType, e.ItemId }, "C42").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.ClientType, "I1");

            entity.HasIndex(e => e.ItemId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClientType)
                .HasMaxLength(64)
                .HasColumnName("CLIENT_TYPE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PresentationConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PRESENTATION_CONFIG_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Itemtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITEMTYPE__3214EC2740192EEC");

            entity.ToTable("ITEMTYPE", "innovator");

            entity.HasIndex(e => e.Name, "C110").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => e.KeyedName, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AllowPrivatePermission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ALLOW_PRIVATE_PERMISSION");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.CacheQuery).HasColumnName("CACHE_QUERY");
            entity.Property(e => e.ClassStructure).HasColumnName("CLASS_STRUCTURE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CloseIcon)
                .HasMaxLength(128)
                .HasColumnName("CLOSE_ICON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EnforceDiscovery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ENFORCE_DISCOVERY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideWhereUsed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_WHERE_USED");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.ImplementationDdl).HasColumnName("IMPLEMENTATION_DDL");
            entity.Property(e => e.ImplementationType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'table')")
                .HasColumnName("IMPLEMENTATION_TYPE");
            entity.Property(e => e.InstanceData)
                .HasMaxLength(30)
                .HasColumnName("INSTANCE_DATA");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDependent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEPENDENT");
            entity.Property(e => e.IsRelationship)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_RELATIONSHIP");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVersionable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VERSIONABLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPlural)
                .HasMaxLength(64)
                .HasColumnName("LABEL_PLURAL");
            entity.Property(e => e.LargeIcon)
                .HasMaxLength(128)
                .HasColumnName("LARGE_ICON");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.ManualVersioning)
                .HasMaxLength(64)
                .HasColumnName("MANUAL_VERSIONING");
            entity.Property(e => e.Maxrecords).HasColumnName("MAXRECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OpenIcon)
                .HasMaxLength(128)
                .HasColumnName("OPEN_ICON");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revisions)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'7FE395DD8B9F4E1090756A34B733D75E')")
                .IsFixedLength()
                .HasColumnName("REVISIONS");
            entity.Property(e => e.ShowParametersTab)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'1')")
                .HasColumnName("SHOW_PARAMETERS_TAB");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureView)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'tabs off')")
                .HasColumnName("STRUCTURE_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UnlockOnLogout)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNLOCK_ON_LOGOUT");
            entity.Property(e => e.UseSrcAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_SRC_ACCESS");
        });

        modelBuilder.Entity<ItemtypeLifeCycle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITEMTYPE__3214EC27FF36EAB8");

            entity.ToTable("ITEMTYPE_LIFE_CYCLE", "innovator");

            entity.HasIndex(e => new { e.ClassPath, e.SourceId }, "C0").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.ClassPath)
                .HasMaxLength(512)
                .HasColumnName("CLASS_PATH");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ItemtypeLifeCycles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ITEMTYPE___RELAT__2FDA0782");

            entity.HasOne(d => d.Source).WithMany(p => p.ItemtypeLifeCycles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ITEMTYPE___SOURC__2EE5E349");
        });

        modelBuilder.Entity<ItemtypeXpropertydefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITEMTYPE__3214EC27A54B7682");

            entity.ToTable("ITEMTYPE_XPROPERTYDEFINITION", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C62").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "IX_itemtype_xpropertydefinition_related_id_source_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefinePermissionBehavior)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'no_check')")
                .HasColumnName("DEFINE_PERMISSION_BEHAVIOR");
            entity.Property(e => e.DefinePermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFINE_PERMISSION_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ValuePermissionBehavior)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'no_check')")
                .HasColumnName("VALUE_PERMISSION_BEHAVIOR");
            entity.Property(e => e.ValuePermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VALUE_PERMISSION_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ItemtypeXpropertydefinitions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ITEMTYPE___RELAT__24334AAC");

            entity.HasOne(d => d.Source).WithMany(p => p.ItemtypeXpropertydefinitions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ITEMTYPE___SOURC__233F2673");
        });

        modelBuilder.Entity<Itpresentationconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITPRESEN__3214EC27460D9904");

            entity.ToTable("ITPRESENTATIONCONFIGURATION", "innovator");

            entity.HasIndex(e => new { e.Client, e.SourceId }, "C22").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'js')")
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Itpresentationconfigurations)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ITPRESENT__RELAT__4E5E8EA2");

            entity.HasOne(d => d.Source).WithMany(p => p.Itpresentationconfigurations)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ITPRESENT__SOURC__4D6A6A69");
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LANGUAGE__3214EC2737D358B0");

            entity.ToTable("LANGUAGE", "innovator");

            entity.HasIndex(e => e.Suffix, "C75").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Code)
                .HasMaxLength(3)
                .HasColumnName("CODE");
            entity.Property(e => e.Collation)
                .HasMaxLength(64)
                .HasColumnName("COLLATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Direction)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'ltr')")
                .HasColumnName("DIRECTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Suffix)
                .HasMaxLength(4)
                .HasColumnName("SUFFIX");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<LifeCycleMap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LIFE_CYC__3214EC27B0832B26");

            entity.ToTable("LIFE_CYCLE_MAP", "innovator");

            entity.HasIndex(e => e.Name, "C43").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => e.KeyedName, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.StartState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("START_STATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<LifeCycleState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LIFE_CYC__3214EC2739875316");

            entity.ToTable("LIFE_CYCLE_STATE", "innovator");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C23").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.SourceId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.Image)
                .HasMaxLength(128)
                .HasColumnName("IMAGE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemBehavior)
                .HasMaxLength(64)
                .HasColumnName("ITEM_BEHAVIOR");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SetIsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SET_IS_RELEASED");
            entity.Property(e => e.SetNotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SET_NOT_LOCKABLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StatePermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATE_PERMISSION_ID");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Workflow)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WORKFLOW");

            entity.HasOne(d => d.Source).WithMany(p => p.LifeCycleStates)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LIFE_CYCL__SOURC__4F52B2DB");
        });

        modelBuilder.Entity<LifeCycleTransition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LIFE_CYC__3214EC27D9383ECE");

            entity.ToTable("LIFE_CYCLE_TRANSITION", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FromState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GetComment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GET_COMMENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PostAction)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("POST_ACTION");
            entity.Property(e => e.PreAction)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PRE_ACTION");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.Segments)
                .HasMaxLength(128)
                .HasColumnName("SEGMENTS");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ToState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TO_STATE");

            entity.HasOne(d => d.Source).WithMany(p => p.LifeCycleTransitions)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LIFE_CYCL__SOURC__5046D714");
        });

        modelBuilder.Entity<List>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LIST__3214EC27A52BDBB8");

            entity.ToTable("LIST", "innovator");

            entity.HasIndex(e => e.Name, "C7").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.Name, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Locale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LOCALE__3214EC272F7D13FC");

            entity.ToTable("LOCALE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Code)
                .HasMaxLength(6)
                .HasColumnName("CODE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Language)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LANGUAGE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Located>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LOCATED__3214EC271A4E8F83");

            entity.ToTable("LOCATED", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("FILE_VERSION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Locateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__LOCATED__RELATED__522F1F86");

            entity.HasOne(d => d.Source).WithMany(p => p.Locateds)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LOCATED__SOURCE___513AFB4D");
        });

        modelBuilder.Entity<Lockeditem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LOCKEDIT__3214EC277F26611D");

            entity.ToTable("LOCKEDITEMS", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.RelatedId, "IX_lockeditems_related_id_with_source_id_source_type");

            entity.HasIndex(e => new { e.SourceId, e.SourceType }, "IX_lockeditems_source_id_source_type");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Lockeditems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__LOCKEDITE__RELAT__02133CD2");
        });

        modelBuilder.Entity<Lockeduser>(entity =>
        {
            entity.HasKey(e => new { e.LoginName, e.Key });

            entity.ToTable("LOCKEDUSER", "application");

            entity.HasIndex(e => e.ExpiredOn, "I0");

            entity.Property(e => e.LoginName)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOGIN_NAME");
            entity.Property(e => e.Key)
                .HasMaxLength(64)
                .HasColumnName("KEY");
            entity.Property(e => e.ExpiredOn)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRED_ON");
            entity.Property(e => e.FailedAttempts).HasColumnName("FAILED_ATTEMPTS");
        });

        modelBuilder.Entity<Manufacturer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MANUFACT__3214EC27BE14ED48");

            entity.ToTable("MANUFACTURER", "innovator");

            entity.HasIndex(e => e.Name, "C144").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Address)
                .HasMaxLength(256)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.AddressState)
                .HasMaxLength(64)
                .HasColumnName("ADDRESS_STATE");
            entity.Property(e => e.City)
                .HasMaxLength(64)
                .HasColumnName("CITY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(64)
                .HasColumnName("CONTACT_NAME");
            entity.Property(e => e.Country)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MainFax)
                .HasMaxLength(32)
                .HasColumnName("MAIN_FAX");
            entity.Property(e => e.MainPhone)
                .HasMaxLength(32)
                .HasColumnName("MAIN_PHONE");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WebSite)
                .HasMaxLength(128)
                .HasColumnName("WEB_SITE");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(32)
                .HasColumnName("ZIP_CODE");
        });

        modelBuilder.Entity<ManufacturerManfPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MANUFACT__3214EC2731BF9AC5");

            entity.ToTable("MANUFACTURER_MANF_PART", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ManufacturerManfParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MANUFACTU__SOURC__61FB72FB");
        });

        modelBuilder.Entity<ManufacturerPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MANUFACT__3214EC2701D38231");

            entity.ToTable("MANUFACTURER_PART", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasFiles)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_FILES");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANUFACTURER");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Unit)
                .HasMaxLength(64)
                .HasColumnName("UNIT");
            entity.Property(e => e.UnitPrice)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("UNIT_PRICE");
        });

        modelBuilder.Entity<ManufacturerPartFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MANUFACT__3214EC27F898E118");

            entity.ToTable("MANUFACTURER_PART_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ManufacturerPartFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__MANUFACTU__RELAT__63E3BB6D");

            entity.HasOne(d => d.Source).WithMany(p => p.ManufacturerPartFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MANUFACTU__SOURC__62EF9734");
        });

        modelBuilder.Entity<ManufacturerPartPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MANUFACT__3214EC276DE87EFC");

            entity.ToTable("MANUFACTURER_PART_PART", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ManufacturerPartParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MANUFACTU__SOURC__64D7DFA6");
        });

        modelBuilder.Entity<MeasurementUnit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MEASUREM__3214EC27F17613C6");

            entity.ToTable("MEASUREMENT_UNIT", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Abbreviation)
                .HasMaxLength(8)
                .HasColumnName("ABBREVIATION");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEFAULT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RatioToInch).HasColumnName("RATIO_TO_INCH");
            entity.Property(e => e.Sequence).HasColumnName("SEQUENCE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Unit)
                .HasMaxLength(32)
                .HasColumnName("UNIT");
            entity.Property(e => e.Units)
                .HasMaxLength(32)
                .HasColumnName("UNITS");
            entity.Property(e => e.Viewer)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VIEWER");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MEMBER__3214EC27123C79AB");

            entity.ToTable("MEMBER", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("END_DATE");
            entity.Property(e => e.FromDate)
                .HasColumnType("datetime")
                .HasColumnName("FROM_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.MemberRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__MEMBER__RELATED___541767F8");

            entity.HasOne(d => d.Source).WithMany(p => p.MemberSources)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__MEMBER__SOURCE_I__532343BF");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MESSAGE__3214EC279E882A86");

            entity.ToTable("MESSAGE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Acknowledge)
                .HasMaxLength(64)
                .HasColumnName("ACKNOWLEDGE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.CustomHtml).HasColumnName("CUSTOM_HTML");
            entity.Property(e => e.ExitButtonLabel)
                .HasMaxLength(64)
                .HasColumnName("EXIT_BUTTON_LABEL");
            entity.Property(e => e.ExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRATION_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("ICON");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsStandardTemplate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'')")
                .IsFixedLength()
                .HasColumnName("IS_STANDARD_TEMPLATE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MessageNumber)
                .HasMaxLength(256)
                .HasColumnName("MESSAGE_NUMBER");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OkButtonLabel)
                .HasMaxLength(64)
                .HasColumnName("OK_BUTTON_LABEL");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ShowExitButton)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHOW_EXIT_BUTTON");
            entity.Property(e => e.ShowOkButton)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHOW_OK_BUTTON");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Text)
                .HasMaxLength(2048)
                .HasColumnName("TEXT");
            entity.Property(e => e.Title)
                .HasMaxLength(256)
                .HasColumnName("TITLE");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
            entity.Property(e => e.Url)
                .HasMaxLength(1024)
                .HasColumnName("URL");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<MessageAcknowledgement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MESSAGE___3214EC273A4450EA");

            entity.ToTable("MESSAGE_ACKNOWLEDGEMENT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.MessageAcknowledgements)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__MESSAGE_A__RELAT__4C413C06");

            entity.HasOne(d => d.Source).WithMany(p => p.MessageAcknowledgements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MESSAGE_A__SOURC__4B4D17CD");
        });

        modelBuilder.Entity<Method>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__METHOD__3214EC274E5B3070");

            entity.ToTable("METHOD", "innovator");

            entity.HasIndex(e => new { e.Name, e.ArasUniquenessHelper }, "C8").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => e.KeyedName, "I1");

            entity.HasIndex(e => new { e.ConfigId, e.IsCurrent }, "IX_METHOD_CONFIG_ID_IS_CURRENT");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_METHOD_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.ExecutionAllowedTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'2618D6F5A90949BAA7E920D1B04C7EE1')")
                .IsFixedLength()
                .HasColumnName("EXECUTION_ALLOWED_TO");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MethodCode).HasColumnName("METHOD_CODE");
            entity.Property(e => e.MethodLocation)
                .HasMaxLength(64)
                .HasColumnName("METHOD_LOCATION");
            entity.Property(e => e.MethodType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'JavaScript')")
                .HasColumnName("METHOD_TYPE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Template)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEMPLATE");
        });

        modelBuilder.Entity<Methodtemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__METHODTE__3214EC270ED94F5E");

            entity.ToTable("METHODTEMPLATE", "innovator");

            entity.HasIndex(e => e.Name, "C3").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Template).HasColumnName("TEMPLATE");
        });

        modelBuilder.Entity<Metric>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__METRIC__3214EC27879383AC");

            entity.ToTable("METRIC", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COLOR");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Frequency)
                .HasMaxLength(64)
                .HasColumnName("FREQUENCY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.Link).HasColumnName("LINK");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Method)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("METHOD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Stylesheet).HasColumnName("STYLESHEET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<MetricValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__METRIC_V__3214EC27D5912D4A");

            entity.ToTable("METRIC_VALUE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Calculate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CALCULATE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COLOR");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.Link)
                .HasMaxLength(512)
                .HasColumnName("LINK");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Query).HasColumnName("QUERY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value).HasColumnName("VALUE");

            entity.HasOne(d => d.Source).WithMany(p => p.MetricValues)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__METRIC_VA__SOURC__42B7D1CC");
        });

        modelBuilder.Entity<Model>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MODEL__3214EC279D4C5C45");

            entity.ToTable("MODEL", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PartNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PART_NUMBER");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ReleaseNumber)
                .HasMaxLength(16)
                .HasColumnName("RELEASE_NUMBER");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VersionNumber)
                .HasMaxLength(16)
                .HasColumnName("VERSION_NUMBER");

            entity.HasOne(d => d.Source).WithMany(p => p.Models)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MODEL__SOURCE_ID__65CC03DF");
        });

        modelBuilder.Entity<Morphae>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MORPHAE__3214EC2727F617FA");

            entity.ToTable("MORPHAE", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.ImplementationOrder).HasColumnName("IMPLEMENTATION_ORDER");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.MorphaeRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__MORPHAE__RELATED__55FFB06A");

            entity.HasOne(d => d.Source).WithMany(p => p.MorphaeSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MORPHAE__SOURCE___550B8C31");
        });

        modelBuilder.Entity<MpMaccondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MP_MACCO__3214EC276B29FCDC");

            entity.ToTable("MP_MACCONDITION", "innovator");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C92").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConditionXml).HasColumnName("CONDITION_XML");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RefId)
                .HasMaxLength(32)
                .HasColumnName("REF_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.MpMacconditions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MP_MACCON__SOURC__6CAE0B98");
        });

        modelBuilder.Entity<MpMacpolicy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MP_MACPO__3214EC27DBF80E0A");

            entity.ToTable("MP_MACPOLICY", "innovator");

            entity.HasIndex(e => new { e.Name, e.ArasUniquenessHelper }, "C90").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => new { e.ConfigId, e.IsCurrent }, "IX_MP_MACPOLICY_CONFIG_ID_IS_CURRENT");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_MP_MACPOLICY_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.CanDelete)
                .HasMaxLength(32)
                .HasColumnName("CAN_DELETE");
            entity.Property(e => e.CanDiscover)
                .HasMaxLength(32)
                .HasColumnName("CAN_DISCOVER");
            entity.Property(e => e.CanGet)
                .HasMaxLength(32)
                .HasColumnName("CAN_GET");
            entity.Property(e => e.CanUpdate)
                .HasMaxLength(32)
                .HasColumnName("CAN_UPDATE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.ShowPermissionsWarning)
                .HasMaxLength(32)
                .HasColumnName("SHOW_PERMISSIONS_WARNING");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<MpMacpolicycontrolledtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MP_MACPO__3214EC27208C0A7F");

            entity.ToTable("MP_MACPOLICYCONTROLLEDTYPE", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C93").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.MpMacpolicycontrolledtypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__MP_MACPOL__RELAT__6E96540A");

            entity.HasOne(d => d.Source).WithMany(p => p.MpMacpolicycontrolledtypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MP_MACPOL__SOURC__6DA22FD1");
        });

        modelBuilder.Entity<MpMacpolicyexemptidentity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MP_MACPO__3214EC278F95747C");

            entity.ToTable("MP_MACPOLICYEXEMPTIDENTITY", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C94").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.MpMacpolicyexemptidentities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__MP_MACPOL__RELAT__707E9C7C");

            entity.HasOne(d => d.Source).WithMany(p => p.MpMacpolicyexemptidentities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MP_MACPOL__SOURC__6F8A7843");
        });

        modelBuilder.Entity<MpPolicyaccessenvattribute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MP_POLIC__3214EC2726E0DAD3");

            entity.ToTable("MP_POLICYACCESSENVATTRIBUTE", "innovator");

            entity.HasIndex(e => e.Name, "C91").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GetValueMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GET_VALUE_METHOD");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'boolean')")
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<MpPolicyaccessitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MP_POLICYACCESSITEM", "innovator");

            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<MpoMasspromotion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MPO_MASS__3214EC273020E275");

            entity.ToTable("MPO_MASSPROMOTION", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Idlist).HasColumnName("IDLIST");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.ItemtypeName)
                .HasMaxLength(32)
                .HasColumnName("ITEMTYPE_NAME");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LifeCycleMapId)
                .HasMaxLength(32)
                .HasColumnName("LIFE_CYCLE_MAP_ID");
            entity.Property(e => e.LifeCycleMapName)
                .HasMaxLength(32)
                .HasColumnName("LIFE_CYCLE_MAP_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PromotedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROMOTED_BY_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TargetState)
                .HasMaxLength(32)
                .HasColumnName("TARGET_STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransitionComment).HasColumnName("TRANSITION_COMMENT");
        });

        modelBuilder.Entity<MpoMasspromotionrecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MPO_MASS__3214EC27404B0D16");

            entity.ToTable("MPO_MASSPROMOTIONRECORD", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AfterPromoteItemId)
                .HasMaxLength(32)
                .HasColumnName("AFTER_PROMOTE_ITEM_ID");
            entity.Property(e => e.BeforePromoteItemId)
                .HasMaxLength(32)
                .HasColumnName("BEFORE_PROMOTE_ITEM_ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GotComment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GOT_COMMENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsPromoted)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_PROMOTED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StateBefore)
                .HasMaxLength(32)
                .HasColumnName("STATE_BEFORE");
            entity.Property(e => e.StatusError).HasColumnName("STATUS_ERROR");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.MpoMasspromotionrecords)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MPO_MASSP__SOURC__392E6792");
        });

        modelBuilder.Entity<MppLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MPP_LOCA__3214EC2794F60898");

            entity.ToTable("MPP_LOCATION", "innovator");

            entity.HasIndex(e => e.ItemNumber, "C146").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(64)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Myreport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MYREPORT__3214EC273F114022");

            entity.ToTable("MYREPORTS", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<OldPassword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OLD_PASS__3214EC278FDE5101");

            entity.ToTable("OLD_PASSWORD", "innovator");

            entity.HasIndex(e => new { e.OldPwd, e.SourceId }, "C31").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OldPwd)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLD_PWD");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.OldPasswords)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__OLD_PASSW__SOURC__56F3D4A3");
        });

        modelBuilder.Entity<Packagedefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PACKAGED__3214EC2745D911C2");

            entity.ToTable("PACKAGEDEFINITION", "innovator");

            entity.HasIndex(e => e.Name, "C9").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Packagedependson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PACKAGED__3214EC27DB03E13D");

            entity.ToTable("PACKAGEDEPENDSON", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Packagedependsons)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PACKAGEDE__SOURC__57E7F8DC");
        });

        modelBuilder.Entity<Packageelement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PACKAGEE__3214EC2734EFF708");

            entity.ToTable("PACKAGEELEMENT", "innovator");

            entity.HasIndex(e => e.ElementId, "C25").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.ElementId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ElementId)
                .HasMaxLength(32)
                .HasColumnName("ELEMENT_ID");
            entity.Property(e => e.ElementType)
                .HasMaxLength(32)
                .HasColumnName("ELEMENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Packageelements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PACKAGEEL__SOURC__70B3A6A6");
        });

        modelBuilder.Entity<Packagegroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PACKAGEG__3214EC27340F038E");

            entity.ToTable("PACKAGEGROUP", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Packagegroups)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PACKAGEGR__SOURC__58DC1D15");
        });

        modelBuilder.Entity<Packagereferencedelement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PACKAGER__3214EC279103D8BD");

            entity.ToTable("PACKAGEREFERENCEDELEMENT", "innovator");

            entity.HasIndex(e => new { e.ElementId, e.SourceId }, "C26").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ElementDescription)
                .HasMaxLength(128)
                .HasColumnName("ELEMENT_DESCRIPTION");
            entity.Property(e => e.ElementId)
                .HasMaxLength(32)
                .HasColumnName("ELEMENT_ID");
            entity.Property(e => e.ElementType)
                .HasMaxLength(32)
                .HasColumnName("ELEMENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Packagereferencedelements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PACKAGERE__SOURC__71A7CADF");
        });

        modelBuilder.Entity<Part>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART__3214EC277DB1D886");

            entity.ToTable("PART", "innovator");

            entity.HasIndex(e => new { e.ItemNumber, e.ArasUniquenessHelper }, "C151").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.ItemNumber, "I2");

            entity.HasIndex(e => new { e.ConfigId, e.IsCurrent }, "IX_PART_CONFIG_ID_IS_CURRENT");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_PART_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ControlType)
                .HasMaxLength(64)
                .HasColumnName("CONTROL_TYPE");
            entity.Property(e => e.Cost)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("COST");
            entity.Property(e => e.CostBasis)
                .HasMaxLength(64)
                .HasColumnName("COST_BASIS");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasChangePending)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_CHANGE_PENDING");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.MakeBuy)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Make')")
                .HasColumnName("MAKE_BUY");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(128)
                .HasColumnName("THUMBNAIL");
            entity.Property(e => e.Unit)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'EA')")
                .HasColumnName("UNIT");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("WEIGHT");
            entity.Property(e => e.WeightBasis)
                .HasMaxLength(64)
                .HasColumnName("WEIGHT_BASIS");
        });

        modelBuilder.Entity<PartAlternate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_ALT__3214EC278621097C");

            entity.ToTable("PART_ALTERNATE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartAlternateRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_ALTE__RELAT__67B44C51");

            entity.HasOne(d => d.Source).WithMany(p => p.PartAlternateSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_ALTE__SOURC__66C02818");
        });

        modelBuilder.Entity<PartAml>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_AML__3214EC27E5A4A9A1");

            entity.ToTable("PART_AML", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartAmls)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_AML__RELATE__699C94C3");

            entity.HasOne(d => d.Source).WithMany(p => p.PartAmls)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_AML__SOURCE__68A8708A");
        });

        modelBuilder.Entity<PartBom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_BOM__3214EC27CF47C8B3");

            entity.ToTable("PART_BOM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Quantity)
                .HasDefaultValueSql("((1))")
                .HasColumnName("QUANTITY");
            entity.Property(e => e.ReferenceDesignator)
                .HasMaxLength(128)
                .HasColumnName("REFERENCE_DESIGNATOR");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((0))")
                .HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartBomRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_BOM__RELATE__6B84DD35");

            entity.HasOne(d => d.Source).WithMany(p => p.PartBomSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_BOM__SOURCE__6A90B8FC");
        });

        modelBuilder.Entity<PartCad>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_CAD__3214EC27A6F523F1");

            entity.ToTable("PART_CAD", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartCads)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_CAD__RELATE__6D6D25A7");

            entity.HasOne(d => d.Source).WithMany(p => p.PartCads)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_CAD__SOURCE__6C79016E");
        });

        modelBuilder.Entity<PartChange>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_CHA__3214EC27F3C8C800");

            entity.ToTable("PART_CHANGES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PartChanges)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_CHAN__SOURC__6E6149E0");
        });

        modelBuilder.Entity<PartDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_DOC__3214EC272A42852C");

            entity.ToTable("PART_DOCUMENT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartDocuments)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_DOCU__RELAT__70499252");

            entity.HasOne(d => d.Source).WithMany(p => p.PartDocuments)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_DOCU__SOURC__6F556E19");
        });

        modelBuilder.Entity<PartGoal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_GOA__3214EC27539A4E08");

            entity.ToTable("PART_GOAL", "innovator");

            entity.HasIndex(e => new { e.Goal, e.SourceId }, "C148").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ActualValue)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("ACTUAL_VALUE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CalculatedValue)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("CALCULATED_VALUE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EstimatedValue)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("ESTIMATED_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Goal)
                .HasMaxLength(64)
                .HasColumnName("GOAL");
            entity.Property(e => e.GoalComments)
                .HasMaxLength(512)
                .HasColumnName("GOAL_COMMENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TargetValue)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("TARGET_VALUE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PartGoals)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_GOAL__SOURC__713DB68B");
        });

        modelBuilder.Entity<PartMultilevelBom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_MUL__3214EC27A1C3638C");

            entity.ToTable("PART_MULTILEVEL_BOM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PartMultilevelBoms)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_MULT__SOURC__7231DAC4");
        });

        modelBuilder.Entity<Pdfwmconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PDFWMCON__3214EC274DBA2D92");

            entity.ToTable("PDFWMCONFIGURATION", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WatermarkContext)
                .HasMaxLength(64)
                .HasColumnName("WATERMARK_CONTEXT");
        });

        modelBuilder.Entity<Pdfwmtemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PDFWMTEM__3214EC277CCD15FB");

            entity.ToTable("PDFWMTEMPLATES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PageType)
                .HasMaxLength(64)
                .HasColumnName("PAGE_TYPE");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TemplateFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEMPLATE_FILE");
            entity.Property(e => e.UsageOrder).HasColumnName("USAGE_ORDER");
            entity.Property(e => e.UsageType)
                .HasMaxLength(64)
                .HasColumnName("USAGE_TYPE");

            entity.HasOne(d => d.Source).WithMany(p => p.Pdfwmtemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PDFWMTEMP__SOURC__25E688F4");
        });

        modelBuilder.Entity<PeDeviation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PE_DEVIA__3214EC2712C79CD9");

            entity.ToTable("PE_DEVIATION", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AffectedPart)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AFFECTED_PART");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectiveFrom)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_FROM");
            entity.Property(e => e.EffectiveTo)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_TO");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Location)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Reason)
                .HasMaxLength(512)
                .HasColumnName("REASON");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<PeMainpreference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PE_MAINP__3214EC27471AFB03");

            entity.ToTable("PE_MAINPREFERENCES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.ChangeTypeCadDocument)
                .HasMaxLength(32)
                .HasColumnName("CHANGE_TYPE_CAD_DOCUMENT");
            entity.Property(e => e.ChangeTypeDocument)
                .HasMaxLength(32)
                .HasColumnName("CHANGE_TYPE_DOCUMENT");
            entity.Property(e => e.ChangeTypePart)
                .HasMaxLength(32)
                .HasColumnName("CHANGE_TYPE_PART");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PeMainpreferences)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PE_MAINPR__SOURC__7325FEFD");
        });

        modelBuilder.Entity<PeReverseitemsfedcad>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PE_REVER__3214EC27D75F8A7E");

            entity.ToTable("PE_REVERSEITEMSFEDCAD", "innovator");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.AuthoringTool)
                .HasMaxLength(64)
                .HasColumnName("AUTHORING_TOOL");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasChangePending)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_CHANGE_PENDING");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsStandard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_STANDARD");
            entity.Property(e => e.IsTemplate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_TEMPLATE");
            entity.Property(e => e.ItOpenIcon)
                .HasMaxLength(128)
                .HasColumnName("IT_OPEN_ICON");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LinkStatus)
                .HasMaxLength(256)
                .HasColumnName("LINK_STATUS");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(256)
                .HasColumnName("NAME");
            entity.Property(e => e.NativeFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATIVE_FILE");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RealItName)
                .HasMaxLength(30)
                .HasColumnName("REAL_IT_NAME");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ViewableFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VIEWABLE_FILE");
        });

        modelBuilder.Entity<PeReverseitemsfedpart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PE_REVER__3214EC2799C169EB");

            entity.ToTable("PE_REVERSEITEMSFEDPART", "innovator");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Cost)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("COST");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasChangePending)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_CHANGE_PENDING");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItOpenIcon)
                .HasMaxLength(128)
                .HasColumnName("IT_OPEN_ICON");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LinkStatus)
                .HasMaxLength(256)
                .HasColumnName("LINK_STATUS");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RealItName)
                .HasMaxLength(30)
                .HasColumnName("REAL_IT_NAME");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<PeReworkOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PE_REWOR__3214EC27D9D6B577");

            entity.ToTable("PE_REWORK_ORDER", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AffectedPart)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AFFECTED_PART");
            entity.Property(e => e.Attachment)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ATTACHMENT");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Location)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Reason)
                .HasMaxLength(512)
                .HasColumnName("REASON");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<PeWaiver>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PE_WAIVE__3214EC273A6885DB");

            entity.ToTable("PE_WAIVER", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AffectedPart)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AFFECTED_PART");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectiveFrom)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_FROM");
            entity.Property(e => e.EffectiveTo)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_TO");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Location)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Reason)
                .HasMaxLength(512)
                .HasColumnName("REASON");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PERMISSI__3214EC27A07EDC2F");

            entity.ToTable("PERMISSION", "innovator");

            entity.HasIndex(e => e.Name, "C10").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsPrivate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_PRIVATE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<PermissionExplicitdefine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PERMISSI__3214EC27C48AE7C9");

            entity.ToTable("PERMISSION_EXPLICITDEFINE", "innovator");

            entity.HasIndex(e => e.Name, "C57").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<PermissionItemclassification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PERMISSI__3214EC2793484D87");

            entity.ToTable("PERMISSION_ITEMCLASSIFICATION", "innovator");

            entity.HasIndex(e => e.Name, "C58").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<PermissionPropertyvalue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PERMISSI__3214EC27BBC8AFD2");

            entity.ToTable("PERMISSION_PROPERTYVALUE", "innovator");

            entity.HasIndex(e => e.Name, "C59").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Pr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PR__3214EC2709B74084");

            entity.ToTable("PR", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.AffectedItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AFFECTED_ITEM");
            entity.Property(e => e.Basis)
                .HasMaxLength(64)
                .HasColumnName("BASIS");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Environment)
                .HasMaxLength(512)
                .HasColumnName("ENVIRONMENT");
            entity.Property(e => e.Events).HasColumnName("EVENTS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Impact).HasColumnName("IMPACT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PhaseCaused)
                .HasMaxLength(64)
                .HasColumnName("PHASE_CAUSED");
            entity.Property(e => e.PhaseFound)
                .HasMaxLength(64)
                .HasColumnName("PHASE_FOUND");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.ReportedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTED_BY");
            entity.Property(e => e.Severity)
                .HasMaxLength(64)
                .HasColumnName("SEVERITY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(128)
                .HasColumnName("TITLE");
            entity.Property(e => e.Verification).HasColumnName("VERIFICATION");
        });

        modelBuilder.Entity<PrFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PR_FILE__3214EC27D276DDBF");

            entity.ToTable("PR_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PrFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PR_FILE__RELATED__750E476F");

            entity.HasOne(d => d.Source).WithMany(p => p.PrFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PR_FILE__SOURCE___741A2336");
        });

        modelBuilder.Entity<Preference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PREFEREN__3214EC277698CDA9");

            entity.ToTable("PREFERENCE", "innovator");

            entity.HasIndex(e => e.IdentityId, "C76").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IdentityId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IDENTITY_ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Preferencetabtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PREFEREN__3214EC27727B190B");

            entity.ToTable("PREFERENCETABTYPES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PreferenceTab)
                .HasMaxLength(32)
                .HasColumnName("PREFERENCE_TAB");
            entity.Property(e => e.PreferenceTabType1)
                .HasMaxLength(64)
                .HasColumnName("PREFERENCE_TAB_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Preferencetabtypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PREFERENC__SOURC__4A58F394");
        });

        modelBuilder.Entity<Preferencetype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PREFEREN__3214EC2733831FC6");

            entity.ToTable("PREFERENCETYPES", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Presentableitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PRESENTABLEITEMS", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Presentationcommand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PRESENTA__3214EC270B56A3CF");

            entity.ToTable("PRESENTATIONCOMMAND", "innovator");

            entity.HasIndex(e => new { e.CommandAlias, e.Location, e.SourceId }, "C40").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommandAlias)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMMAND_ALIAS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Location)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Presentationcommands)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PRESENTAT__RELAT__06A2E7C5");

            entity.HasOne(d => d.Source).WithMany(p => p.Presentationcommands)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PRESENTAT__SOURC__05AEC38C");
        });

        modelBuilder.Entity<Presentationcommandbarsection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PRESENTA__3214EC27A3B9606E");

            entity.ToTable("PRESENTATIONCOMMANDBARSECTION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemClassification)
                .HasMaxLength(512)
                .HasColumnName("ITEM_CLASSIFICATION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Presentationcommandbarsections)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PRESENTAT__RELAT__088B3037");

            entity.HasOne(d => d.Source).WithMany(p => p.Presentationcommandbarsections)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PRESENTAT__SOURC__07970BFE");
        });

        modelBuilder.Entity<Presentationconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PRESENTA__3214EC2759E7888A");

            entity.ToTable("PRESENTATIONCONFIGURATION", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COLOR");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PRODUCT__3214EC27AB8D3D5E");

            entity.ToTable("PRODUCT", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ProductInnovation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PRODUCT___3214EC27B62228B4");

            entity.ToTable("PRODUCT_INNOVATION", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Property>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROPERTY__3214EC277396B874");

            entity.ToTable("PROPERTY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.Name, "I2");

            entity.HasIndex(e => e.DataSource, "property_data_source_index");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CategoryBy).HasColumnName("CATEGORY_BY");
            entity.Property(e => e.ClassPath)
                .HasMaxLength(512)
                .HasColumnName("CLASS_PATH");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ColumnAlignment)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("COLUMN_ALIGNMENT");
            entity.Property(e => e.ColumnWidth).HasColumnName("COLUMN_WIDTH");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DataSource)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DATA_SOURCE");
            entity.Property(e => e.DataType)
                .HasMaxLength(64)
                .HasColumnName("DATA_TYPE");
            entity.Property(e => e.DefaultSearch)
                .HasMaxLength(32)
                .HasColumnName("DEFAULT_SEARCH");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(128)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.ForeignProperty)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FOREIGN_PROPERTY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpText).HasColumnName("HELP_TEXT");
            entity.Property(e => e.HelpTooltip)
                .HasMaxLength(80)
                .HasColumnName("HELP_TOOLTIP");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsFederated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_FEDERATED");
            entity.Property(e => e.IsHidden)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_HIDDEN");
            entity.Property(e => e.IsHidden2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_HIDDEN2");
            entity.Property(e => e.IsIndexed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_INDEXED");
            entity.Property(e => e.IsKeyed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_KEYED");
            entity.Property(e => e.IsMultiValued)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_MULTI_VALUED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.ItemBehavior)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'float')")
                .HasColumnName("ITEM_BEHAVIOR");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.KeyedNameOrder).HasColumnName("KEYED_NAME_ORDER");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaxRange).HasColumnName("MAX_RANGE");
            entity.Property(e => e.MinRange).HasColumnName("MIN_RANGE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OrderBy).HasColumnName("ORDER_BY");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Pattern)
                .HasMaxLength(512)
                .HasColumnName("PATTERN");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Prec).HasColumnName("PREC");
            entity.Property(e => e.RangeInclusive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RANGE_INCLUSIVE");
            entity.Property(e => e.Readonly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("READONLY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Scale).HasColumnName("SCALE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StoredLength).HasColumnName("STORED_LENGTH");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TrackHistory)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRACK_HISTORY");

            entity.HasOne(d => d.Source).WithMany(p => p.Properties)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PROPERTY__SOURCE__1249A49B");
        });

        modelBuilder.Entity<QryQuerydefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QRY_QUER__3214EC27C2C71526");

            entity.ToTable("QRY_QUERYDEFINITION", "innovator");

            entity.HasIndex(e => e.Name, "C47").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<QryQuerydefinitionevent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QRY_QUER__3214EC273FDBA6D5");

            entity.ToTable("QRY_QUERYDEFINITIONEVENT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.QryQuerydefinitionevents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__QRY_QUERY__RELAT__0F382DC6");

            entity.HasOne(d => d.Source).WithMany(p => p.QryQuerydefinitionevents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__QRY_QUERY__SOURC__0E44098D");
        });

        modelBuilder.Entity<QryQueryitem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QRY_QUER__3214EC274FF943B9");

            entity.ToTable("QRY_QUERYITEM", "innovator");

            entity.HasIndex(e => new { e.Alias, e.SourceId }, "C48").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Alias)
                .HasMaxLength(32)
                .HasColumnName("ALIAS");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FilterXml).HasColumnName("FILTER_XML");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RefId)
                .HasMaxLength(32)
                .HasColumnName("REF_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.QryQueryitems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__QRY_QUERY__SOURC__102C51FF");
        });

        modelBuilder.Entity<QryQueryitemselectproperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QRY_QUER__3214EC2719ECCC28");

            entity.ToTable("QRY_QUERYITEMSELECTPROPERTY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.QryQueryitemselectproperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__QRY_QUERY__SOURC__1308BEAA");
        });

        modelBuilder.Entity<QryQueryitemsortproperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QRY_QUER__3214EC27EAD54A93");

            entity.ToTable("QRY_QUERYITEMSORTPROPERTY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SortOrderDirection)
                .HasMaxLength(64)
                .HasColumnName("SORT_ORDER_DIRECTION");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.QryQueryitemsortproperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__QRY_QUERY__SOURC__13FCE2E3");
        });

        modelBuilder.Entity<QryQueryparameter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QRY_QUER__3214EC27073D9784");

            entity.ToTable("QRY_QUERYPARAMETER", "innovator");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C49").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(96)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(96)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value).HasColumnName("VALUE");

            entity.HasOne(d => d.Source).WithMany(p => p.QryQueryparameters)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__QRY_QUERY__SOURC__11207638");
        });

        modelBuilder.Entity<QryQueryreference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QRY_QUER__3214EC27F2F49644");

            entity.ToTable("QRY_QUERYREFERENCE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.ChildRefId)
                .HasMaxLength(32)
                .HasColumnName("CHILD_REF_ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FilterXml).HasColumnName("FILTER_XML");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentRefId)
                .HasMaxLength(32)
                .HasColumnName("PARENT_REF_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RefId)
                .HasMaxLength(32)
                .HasColumnName("REF_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartQueryReferencePath).HasColumnName("START_QUERY_REFERENCE_PATH");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.QryQueryreferences)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__QRY_QUERY__SOURC__12149A71");
        });

        modelBuilder.Entity<QryStructureresolutionmodel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QRY_STRU__3214EC273BDD0455");

            entity.ToTable("QRY_STRUCTURERESOLUTIONMODEL", "innovator");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<RbColumndefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_COLUM__3214EC27F1876C64");

            entity.ToTable("RB_COLUMNDEFINITION", "innovator");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C51").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.BuilderMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BUILDER_METHOD");
            entity.Property(e => e.CellViewType)
                .HasMaxLength(64)
                .HasColumnName("CELL_VIEW_TYPE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DataTemplate).HasColumnName("DATA_TEMPLATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Header)
                .HasMaxLength(64)
                .HasColumnName("HEADER");
            entity.Property(e => e.HeaderStyleRefId)
                .HasMaxLength(32)
                .HasColumnName("HEADER_STYLE_REF_ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PositionOrder).HasColumnName("POSITION_ORDER");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StyleRefId)
                .HasMaxLength(32)
                .HasColumnName("STYLE_REF_ID");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Template).HasColumnName("TEMPLATE");
            entity.Property(e => e.Width).HasColumnName("WIDTH");

            entity.HasOne(d => d.Source).WithMany(p => p.RbColumndefinitions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RB_COLUMN__SOURC__14F1071C");
        });

        modelBuilder.Entity<RbColumnmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_COLUM__3214EC2739B85ED8");

            entity.ToTable("RB_COLUMNMAPPING", "innovator");

            entity.HasIndex(e => new { e.TreeRowRefId, e.SourceId }, "C55").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.BuilderMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BUILDER_METHOD");
            entity.Property(e => e.CellViewType)
                .HasMaxLength(64)
                .HasColumnName("CELL_VIEW_TYPE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DataTemplate).HasColumnName("DATA_TEMPLATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsSetterAllowed).HasColumnName("IS_SETTER_ALLOWED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Template).HasColumnName("TEMPLATE");
            entity.Property(e => e.TreeRowRefId)
                .HasMaxLength(32)
                .HasColumnName("TREE_ROW_REF_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.RbColumnmappings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RB_COLUMN__SOURC__1B9E04AB");
        });

        modelBuilder.Entity<RbLocalstyle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_LOCAL__3214EC27078B850D");

            entity.ToTable("RB_LOCALSTYLE", "innovator");

            entity.HasIndex(e => new { e.RefId, e.SourceId }, "C52").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RefId)
                .HasMaxLength(32)
                .HasColumnName("REF_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.RbLocalstyles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RB_LOCALS__SOURC__15E52B55");
        });

        modelBuilder.Entity<RbLocalstyledefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_LOCAL__3214EC27FDFCA842");

            entity.ToTable("RB_LOCALSTYLEDEFINITION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Justification)
                .HasMaxLength(64)
                .HasColumnName("JUSTIFICATION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.RbLocalstyledefinitions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RB_LOCALS__SOURC__1C9228E4");
        });

        modelBuilder.Entity<RbParameterviewmodel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_PARAM__3214EC2736383817");

            entity.ToTable("RB_PARAMETERVIEWMODEL", "innovator");

            entity.HasIndex(e => e.QdParameterName, "C56").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(96)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.QdParameterName)
                .HasMaxLength(96)
                .HasColumnName("QD_PARAMETER_NAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UserInputDataSource)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USER_INPUT_DATA_SOURCE");
            entity.Property(e => e.UserInputDataType)
                .HasMaxLength(64)
                .HasColumnName("USER_INPUT_DATA_TYPE");
            entity.Property(e => e.UserInputDefaultValue)
                .HasMaxLength(128)
                .HasColumnName("USER_INPUT_DEFAULT_VALUE");
            entity.Property(e => e.UserInputPattern)
                .HasMaxLength(512)
                .HasColumnName("USER_INPUT_PATTERN");
            entity.Property(e => e.Visible)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VISIBLE");

            entity.HasOne(d => d.Source).WithMany(p => p.RbParameterviewmodels)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RB_PARAME__SOURC__16D94F8E");
        });

        modelBuilder.Entity<RbQuerydefinitionparametermap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_QUERY__3214EC27352613CD");

            entity.ToTable("RB_QUERYDEFINITIONPARAMETERMAP", "innovator");

            entity.HasIndex(e => new { e.QdParameterName, e.SourceId }, "C53").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(96)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.QdParameterName)
                .HasMaxLength(96)
                .HasColumnName("QD_PARAMETER_NAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UserInputDataSource)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USER_INPUT_DATA_SOURCE");
            entity.Property(e => e.UserInputDataType)
                .HasMaxLength(64)
                .HasColumnName("USER_INPUT_DATA_TYPE");
            entity.Property(e => e.UserInputDefaultValue)
                .HasMaxLength(128)
                .HasColumnName("USER_INPUT_DEFAULT_VALUE");
            entity.Property(e => e.UserInputPattern)
                .HasMaxLength(512)
                .HasColumnName("USER_INPUT_PATTERN");

            entity.HasOne(d => d.Source).WithMany(p => p.RbQuerydefinitionparametermaps)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RB_QUERYD__SOURC__17CD73C7");
        });

        modelBuilder.Entity<RbTreegridviewdefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_TREEG__3214EC2758CACED4");

            entity.ToTable("RB_TREEGRIDVIEWDEFINITION", "innovator");

            entity.HasIndex(e => e.Name, "C50").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaxChildItems)
                .HasDefaultValueSql("((100))")
                .HasColumnName("MAX_CHILD_ITEMS");
            entity.Property(e => e.MaxQueryDepth)
                .HasDefaultValueSql("((2))")
                .HasColumnName("MAX_QUERY_DEPTH");
            entity.Property(e => e.MaxQueryDepthIsOnload).HasColumnName("MAX_QUERY_DEPTH_IS_ONLOAD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.QueryDefinition)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("QUERY_DEFINITION");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<RbTreerowdefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_TREER__3214EC277F56574D");

            entity.ToTable("RB_TREEROWDEFINITION", "innovator");

            entity.HasIndex(e => new { e.RefId, e.SourceId }, "C54").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.QueryItemRefId)
                .HasMaxLength(32)
                .HasColumnName("QUERY_ITEM_REF_ID");
            entity.Property(e => e.RefId)
                .HasMaxLength(32)
                .HasColumnName("REF_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.RbTreerowdefinitions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RB_TREERO__SOURC__18C19800");
        });

        modelBuilder.Entity<RbTreerowreference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_TREER__3214EC275F2C19CB");

            entity.ToTable("RB_TREEROWREFERENCE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.ChildRefId)
                .HasMaxLength(32)
                .HasColumnName("CHILD_REF_ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentRefId)
                .HasMaxLength(32)
                .HasColumnName("PARENT_REF_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(64)
                .HasColumnName("REFERENCE_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ViewOrder).HasColumnName("VIEW_ORDER");

            entity.HasOne(d => d.Source).WithMany(p => p.RbTreerowreferences)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RB_TREERO__SOURC__19B5BC39");
        });

        modelBuilder.Entity<RbUiActivatetgvdwizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_UI_AC__3214EC27DD4DCE9D");

            entity.ToTable("RB_UI_ACTIVATETGVDWIZARD", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AccessIdentity)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACCESS_IDENTITY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsStartcondition)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_STARTCONDITION");
            entity.Property(e => e.ItemType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewExistList)
                .HasMaxLength(64)
                .HasColumnName("NEW_EXIST_LIST");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelationshipName)
                .HasMaxLength(30)
                .HasColumnName("RELATIONSHIP_NAME");
            entity.Property(e => e.RelationshipNames)
                .HasMaxLength(64)
                .HasColumnName("RELATIONSHIP_NAMES");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TargetUsage)
                .HasMaxLength(64)
                .HasColumnName("TARGET_USAGE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<RbUiCelleditor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RB_UI_CE__3214EC279C2FF85B");

            entity.ToTable("RB_UI_CELLEDITOR", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CellViewType)
                .HasMaxLength(64)
                .HasColumnName("CELL_VIEW_TYPE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DateFormat)
                .HasMaxLength(64)
                .HasColumnName("DATE_FORMAT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IconTemplate).HasColumnName("ICON_TEMPLATE");
            entity.Property(e => e.InnovatorListName).HasColumnName("INNOVATOR_LIST_NAME");
            entity.Property(e => e.InnovatorTypeName).HasColumnName("INNOVATOR_TYPE_NAME");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemIdTemplate).HasColumnName("ITEM_ID_TEMPLATE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.ListValueTemplate).HasColumnName("LIST_VALUE_TEMPLATE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Precision).HasColumnName("PRECISION");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Scale).HasColumnName("SCALE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TextTemplate).HasColumnName("TEXT_TEMPLATE");

            entity.HasOne(d => d.Source).WithMany(p => p.RbUiCelleditors)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RB_UI_CEL__SOURC__1AA9E072");
        });

        modelBuilder.Entity<RbUserinputdatasource>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RB_USERINPUTDATASOURCE", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Readpriority>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__READPRIO__3214EC278D039D94");

            entity.ToTable("READPRIORITY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Readpriorities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__READPRIOR__RELAT__4E298478");

            entity.HasOne(d => d.Source).WithMany(p => p.Readpriorities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__READPRIOR__SOURC__4D35603F");
        });

        modelBuilder.Entity<RelationshipGridEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RELATION__3214EC27F98EB77D");

            entity.ToTable("RELATIONSHIP_GRID_EVENT", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridEvent)
                .HasMaxLength(64)
                .HasColumnName("GRID_EVENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.RelationshipGridEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__RELATIONS__RELAT__73901351");

            entity.HasOne(d => d.Source).WithMany(p => p.RelationshipGridEvents)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RELATIONS__SOURC__729BEF18");
        });

        modelBuilder.Entity<RelationshipView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RELATION__3214EC27E5941DF8");

            entity.ToTable("RELATIONSHIP_VIEW", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Form)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FORM");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Grid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Parameters)
                .HasMaxLength(1024)
                .HasColumnName("PARAMETERS");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartPage)
                .HasMaxLength(128)
                .HasColumnName("START_PAGE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.RelationshipViews)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__RELATIONS__RELAT__75785BC3");

            entity.HasOne(d => d.Source).WithMany(p => p.RelationshipViews)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RELATIONS__SOURC__7484378A");
        });

        modelBuilder.Entity<Relationshiptype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RELATION__3214EC27FF7FDBD0");

            entity.ToTable("RELATIONSHIPTYPE", "innovator");

            entity.HasIndex(e => e.Name, "C1").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => e.Name, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CopyPermissions)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COPY_PERMISSIONS");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreateRelated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATE_RELATED");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridView)
                .HasMaxLength(64)
                .HasColumnName("GRID_VIEW");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideInAll)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_IN_ALL");
            entity.Property(e => e.IncRelKeyName)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("INC_REL_KEY_NAME");
            entity.Property(e => e.IncRelatedKeyName)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("INC_RELATED_KEY_NAME");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsListType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_LIST_TYPE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaxOccurs).HasColumnName("MAX_OCCURS");
            entity.Property(e => e.MinOccurs).HasColumnName("MIN_OCCURS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewShowRelated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_SHOW_RELATED");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.RelatedNotnull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_NOTNULL");
            entity.Property(e => e.RelatedOption)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'2')")
                .HasColumnName("RELATED_OPTION");
            entity.Property(e => e.RelationshipId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATIONSHIP_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.RelationshiptypeRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__RELATIONS__RELAT__2C09769E");

            entity.HasOne(d => d.Source).WithMany(p => p.RelationshiptypeSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RELATIONS__SOURC__2B155265");
        });

        modelBuilder.Entity<Replicationrule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPLICAT__3214EC27713AC4A9");

            entity.ToTable("REPLICATIONRULE", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DoReplicate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_REPLICATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InitiatorType)
                .HasMaxLength(64)
                .HasColumnName("INITIATOR_TYPE");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'false')")
                .IsFixedLength()
                .HasColumnName("IS_ACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaxWait)
                .HasMaxLength(4)
                .HasDefaultValueSql("(N'0100')")
                .HasColumnName("MAX_WAIT");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ReplicationMode)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("REPLICATION_MODE");
            entity.Property(e => e.ReplicationTime)
                .HasMaxLength(4)
                .HasColumnName("REPLICATION_TIME");
            entity.Property(e => e.ReplicationType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Copy')")
                .HasColumnName("REPLICATION_TYPE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Replicationrules)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__REPLICATI__RELAT__5011CCEA");

            entity.HasOne(d => d.Source).WithMany(p => p.Replicationrules)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__REPLICATI__SOURC__4F1DA8B1");
        });

        modelBuilder.Entity<Replicationrulefiletype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPLICAT__3214EC273E098F43");

            entity.ToTable("REPLICATIONRULEFILETYPE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Replicationrulefiletypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__REPLICATI__RELAT__51FA155C");

            entity.HasOne(d => d.Source).WithMany(p => p.Replicationrulefiletypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__REPLICATI__SOURC__5105F123");
        });

        modelBuilder.Entity<Replicationruletargetvault>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPLICAT__3214EC271475CEEE");

            entity.ToTable("REPLICATIONRULETARGETVAULT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Replicationruletargetvaults)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__REPLICATI__RELAT__53E25DCE");

            entity.HasOne(d => d.Source).WithMany(p => p.Replicationruletargetvaults)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__REPLICATI__SOURC__52EE3995");
        });

        modelBuilder.Entity<Replicationtxn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPLICAT__3214EC27AECD832D");

            entity.ToTable("REPLICATIONTXN", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.FileId, "I1");

            entity.HasIndex(e => e.FromVault, "I2");

            entity.HasIndex(e => e.ToVault, "I3");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndTime)
                .HasColumnType("datetime")
                .HasColumnName("END_TIME");
            entity.Property(e => e.ErrorMsg)
                .HasMaxLength(512)
                .HasColumnName("ERROR_MSG");
            entity.Property(e => e.ExecutionAttempt)
                .HasDefaultValueSql("((1))")
                .HasColumnName("EXECUTION_ATTEMPT");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .HasColumnName("FILE_ID");
            entity.Property(e => e.FromVault)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_VAULT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotBefore)
                .HasColumnType("datetime")
                .HasColumnName("NOT_BEFORE");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReplicationRule)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPLICATION_RULE");
            entity.Property(e => e.ReplicationStatus)
                .HasMaxLength(64)
                .HasColumnName("REPLICATION_STATUS");
            entity.Property(e => e.StartTime)
                .HasColumnType("datetime")
                .HasColumnName("START_TIME");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ToVault)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TO_VAULT");
            entity.Property(e => e.UserId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USER_ID");
        });

        modelBuilder.Entity<Replicationtxnlog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPLICAT__3214EC276D27BC76");

            entity.ToTable("REPLICATIONTXNLOG", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndTime)
                .HasColumnType("datetime")
                .HasColumnName("END_TIME");
            entity.Property(e => e.ErrorMsg)
                .HasMaxLength(512)
                .HasColumnName("ERROR_MSG");
            entity.Property(e => e.ExecutionAttempt)
                .HasDefaultValueSql("((1))")
                .HasColumnName("EXECUTION_ATTEMPT");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .HasColumnName("FILE_ID");
            entity.Property(e => e.FromVault)
                .HasMaxLength(32)
                .HasColumnName("FROM_VAULT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReplicationRule)
                .HasMaxLength(32)
                .HasColumnName("REPLICATION_RULE");
            entity.Property(e => e.ReplicationStatus)
                .HasMaxLength(64)
                .HasColumnName("REPLICATION_STATUS");
            entity.Property(e => e.StartTime)
                .HasColumnType("datetime")
                .HasColumnName("START_TIME");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ToVault)
                .HasMaxLength(32)
                .HasColumnName("TO_VAULT");
            entity.Property(e => e.UserId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USER_ID");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPORT__3214EC279D5994E9");

            entity.ToTable("REPORT", "innovator");

            entity.HasIndex(e => e.Name, "C44").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(128)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.Location)
                .HasMaxLength(64)
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Method)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("METHOD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReportQuery).HasColumnName("REPORT_QUERY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(64)
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
            entity.Property(e => e.XslStylesheet).HasColumnName("XSL_STYLESHEET");
        });

        modelBuilder.Entity<Revision>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REVISION__3214EC27CCA8E5B0");

            entity.ToTable("REVISION", "innovator");

            entity.HasIndex(e => e.Name, "C11").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revision1)
                .HasMaxLength(1024)
                .HasColumnName("REVISION");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Runreportbyuser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RUNREPOR__3214EC275EEE8524");

            entity.ToTable("RUNREPORTBYUSER", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Runreportbyusers)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__RUNREPORT__RELAT__094A4A46");

            entity.HasOne(d => d.Source).WithMany(p => p.Runreportbyusers)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RUNREPORT__SOURC__0856260D");
        });

        modelBuilder.Entity<Savedsearch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SAVEDSEA__3214EC271F26BF21");

            entity.ToTable("SAVEDSEARCH", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => new { e.Itname, e.OwnedById }, "IX_searchmode_itname_owned_by_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AutoSaved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SAVED");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Criteria).HasColumnName("CRITERIA");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itname)
                .HasMaxLength(32)
                .HasColumnName("ITNAME");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.Location)
                .HasMaxLength(64)
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SearchMode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEARCH_MODE");
            entity.Property(e => e.ShowOnToc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("SHOW_ON_TOC");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ScheduledTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SCHEDULE__3214EC27F946295E");

            entity.ToTable("SCHEDULED_TASK", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DayOfWeek)
                .HasMaxLength(64)
                .HasColumnName("DAY_OF_WEEK");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Hour).HasColumnName("HOUR");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RunAs)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RUN_AS");
            entity.Property(e => e.RunIt)
                .HasMaxLength(64)
                .HasColumnName("RUN_IT");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("START_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Task)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TASK");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Weekdays)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WEEKDAYS");
        });

        modelBuilder.Entity<Scopecachedependency>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SCOPECACHEDEPENDENCY", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Search>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SEARCH__3214EC2712F192F3");

            entity.ToTable("SEARCH", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Interactive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INTERACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SearchItemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEARCH_ITEMTYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<SearchCriterion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SEARCH_C__3214EC27AF190ACC");

            entity.ToTable("SEARCH_CRITERIA", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Condition)
                .HasMaxLength(64)
                .HasColumnName("CONDITION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.PropertyValue)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_VALUE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.SearchCriteria)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SEARCH_CR__SOURC__133DC8D4");
        });

        modelBuilder.Entity<Searchmode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SEARCHMO__3214EC276886AFF9");

            entity.ToTable("SEARCHMODE", "innovator");

            entity.HasIndex(e => new { e.IsActive, e.Name }, "C79").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_ACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SearchHandler)
                .HasDefaultValueSql("(N'class NewSearchMode extends SearchMode {}')")
                .HasColumnName("SEARCH_HANDLER");
            entity.Property(e => e.SearchModeOrder).HasColumnName("SEARCH_MODE_ORDER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Securemessage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SECUREMESSAGE", "innovator");

            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.CreatedOnTick)
                .HasColumnType("decimal(19, 0)")
                .HasColumnName("CREATED_ON_TICK");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DisabledById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DISABLED_BY_ID");
            entity.Property(e => e.DisabledOn)
                .HasColumnType("datetime")
                .HasColumnName("DISABLED_ON");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HighlightedText).HasColumnName("HIGHLIGHTED_TEXT");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(256)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemMajorRev)
                .HasMaxLength(8)
                .HasColumnName("ITEM_MAJOR_REV");
            entity.Property(e => e.ItemState)
                .HasMaxLength(32)
                .HasColumnName("ITEM_STATE");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_TYPE_NAME");
            entity.Property(e => e.ItemVersion).HasColumnName("ITEM_VERSION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ReplyToId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPLY_TO_ID");
            entity.Property(e => e.SmData).HasColumnName("SM_DATA");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ThreadId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("THREAD_ID");
        });

        modelBuilder.Entity<Securemessageaudio>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC27023C88E4");

            entity.ToTable("SECUREMESSAGEAUDIO", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MediaFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MEDIA_FILE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Securemessageflaggedby>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC279C31F24B");

            entity.ToTable("SECUREMESSAGEFLAGGEDBY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FlaggedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FLAGGED_BY_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Securemessagemarkup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC27E0C901D6");

            entity.ToTable("SECUREMESSAGEMARKUP", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_ID");
            entity.Property(e => e.FileSelectorId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_SELECTOR_ID");
            entity.Property(e => e.FileSelectorTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_SELECTOR_TYPE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MarkupData).HasColumnName("MARKUP_DATA");
            entity.Property(e => e.MarkupHolderConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MARKUP_HOLDER_CONFIG_ID");
            entity.Property(e => e.MarkupHolderId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MARKUP_HOLDER_ID");
            entity.Property(e => e.MarkupHolderMajorRev)
                .HasMaxLength(8)
                .HasColumnName("MARKUP_HOLDER_MAJOR_REV");
            entity.Property(e => e.MarkupHolderState)
                .HasMaxLength(32)
                .HasColumnName("MARKUP_HOLDER_STATE");
            entity.Property(e => e.MarkupHolderTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MARKUP_HOLDER_TYPE_ID");
            entity.Property(e => e.MarkupHolderVersion).HasColumnName("MARKUP_HOLDER_VERSION");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Snapshot)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SNAPSHOT");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("THUMBNAIL");
        });

        modelBuilder.Entity<Securemessagevideo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC27E8115B95");

            entity.ToTable("SECUREMESSAGEVIDEO", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MediaFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MEDIA_FILE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Securemessageviewtemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC27DFBEEC92");

            entity.ToTable("SECUREMESSAGEVIEWTEMPLATE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SketchTooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("SKETCH_TOOLTIP_TEMPLATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Style).HasColumnName("STYLE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Template).HasColumnName("TEMPLATE");
            entity.Property(e => e.ThumbnailTooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("THUMBNAIL_TOOLTIP_TEMPLATE");
        });

        modelBuilder.Entity<Securemessagevisibilityfilter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC270AEE5581");

            entity.ToTable("SECUREMESSAGEVISIBILITYFILTER", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCreator)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CREATOR");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Securemessagevisibilityfilters)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SECUREMES__RELAT__75435199");
        });

        modelBuilder.Entity<Selfservicereport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SELFSERV__3214EC27F8F77498");

            entity.ToTable("SELFSERVICEREPORT", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BaseItemType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BASE_ITEM_TYPE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Definition).HasColumnName("DEFINITION");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Extension).HasColumnName("EXTENSION");
            entity.Property(e => e.Format)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'izenda')")
                .HasColumnName("FORMAT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Hidden)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDDEN");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemtypeClassification).HasColumnName("ITEMTYPE_CLASSIFICATION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("THUMBNAIL");
            entity.Property(e => e.Visibility)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'itemtype')")
                .HasColumnName("VISIBILITY");
        });

        modelBuilder.Entity<Selfservicereportfeatured>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SELFSERV__3214EC27219393C9");

            entity.ToTable("SELFSERVICEREPORTFEATURED", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AllowExcludedProperties)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALLOW_EXCLUDED_PROPERTIES");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExcludedProperties).HasColumnName("EXCLUDED_PROPERTIES");
            entity.Property(e => e.FeaturedItemtypes).HasColumnName("FEATURED_ITEMTYPES");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HideAdvanced)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_ADVANCED");
            entity.Property(e => e.IdentityId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IDENTITY_ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ShowAll)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("SHOW_ALL");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Selfservicereportfeatureds)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SELFSERVI__SOURC__0D1ADB2A");
        });

        modelBuilder.Entity<Selfservicereporthelp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SELFSERV__3214EC2717B8C395");

            entity.ToTable("SELFSERVICEREPORTHELP", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContextKey)
                .HasMaxLength(128)
                .HasColumnName("CONTEXT_KEY");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RichHelpText)
                .HasMaxLength(4000)
                .HasColumnName("RICH_HELP_TEXT");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Selfservicereportsetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SELFSERV__3214EC27EA492704");

            entity.ToTable("SELFSERVICEREPORTSETTINGS", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HideAdvancedForAll)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_ADVANCED_FOR_ALL");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'Self-Service Report Settings')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Selfservicereportsettings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SELFSERVI__SOURC__0A3E6E7F");
        });

        modelBuilder.Entity<Selfservicereportsharedwith>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SELFSERV__3214EC27B5D1DAB1");

            entity.ToTable("SELFSERVICEREPORTSHAREDWITH", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C115").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AccessRights)
                .HasMaxLength(64)
                .HasColumnName("ACCESS_RIGHTS");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Selfservicereportsharedwiths)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SELFSERVI__RELAT__0C26B6F1");

            entity.HasOne(d => d.Source).WithMany(p => p.Selfservicereportsharedwiths)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SELFSERVI__SOURC__0B3292B8");
        });

        modelBuilder.Entity<Sequence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SEQUENCE__3214EC27C689A468");

            entity.ToTable("SEQUENCE", "innovator");

            entity.HasIndex(e => e.Name, "C12").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.CurrentValue)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CURRENT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InitialValue)
                .HasDefaultValueSql("((0))")
                .HasColumnName("INITIAL_VALUE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PadTo).HasColumnName("PAD_TO");
            entity.Property(e => e.PadWith)
                .HasMaxLength(1)
                .HasColumnName("PAD_WITH");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(16)
                .HasColumnName("PREFIX");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Step).HasColumnName("STEP");
            entity.Property(e => e.Suffix)
                .HasMaxLength(16)
                .HasColumnName("SUFFIX");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ServerEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SERVER_E__3214EC277338A497");

            entity.ToTable("SERVER_EVENT", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventVersion)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'version_1')")
                .HasColumnName("EVENT_VERSION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ServerEvent1)
                .HasMaxLength(64)
                .HasColumnName("SERVER_EVENT");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ServerEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SERVER_EV__RELAT__5AC46587");

            entity.HasOne(d => d.Source).WithMany(p => p.ServerEvents)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SERVER_EV__SOURC__59D0414E");
        });

        modelBuilder.Entity<Serviceprovider>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SERVICEP__3214EC2794712F6E");

            entity.ToTable("SERVICEPROVIDER", "innovator");

            entity.HasIndex(e => e.Name, "C82").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Active)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ACTIVE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ServiceType)
                .HasMaxLength(64)
                .HasColumnName("SERVICE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Url)
                .HasMaxLength(256)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<SimpleEco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_E__3214EC2779EC87E5");

            entity.ToTable("SIMPLE_ECO", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeCategory)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Phase In')")
                .HasColumnName("CHANGE_CATEGORY");
            entity.Property(e => e.ChangeReason).HasColumnName("CHANGE_REASON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(1024)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'80727DB851A94DBCB10419D30ED69F9F')")
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'')")
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<SimpleEcoAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_E__3214EC273F14294B");

            entity.ToTable("SIMPLE_ECO_AFFECTED_ITEM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SimpleEcoAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SIMPLE_EC__RELAT__76F68FE1");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleEcoAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_EC__SOURC__76026BA8");
        });

        modelBuilder.Entity<SimpleEcoFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_E__3214EC279092749F");

            entity.ToTable("SIMPLE_ECO_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SimpleEcoFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SIMPLE_EC__RELAT__78DED853");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleEcoFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_EC__SOURC__77EAB41A");
        });

        modelBuilder.Entity<SimpleEcoSignoff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_E__3214EC27D6F42018");

            entity.ToTable("SIMPLE_ECO_SIGNOFF", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleEcoSignoffs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_EC__SOURC__79D2FC8C");
        });

        modelBuilder.Entity<SimpleMco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_M__3214EC2755D1C1E1");

            entity.ToTable("SIMPLE_MCO", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeCategory)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Phase In')")
                .HasColumnName("CHANGE_CATEGORY");
            entity.Property(e => e.ChangeReason).HasColumnName("CHANGE_REASON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(1024)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'80727DB851A94DBCB10419D30ED69F9F')")
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<SimpleMcoFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_M__3214EC27F0A7A3CE");

            entity.ToTable("SIMPLE_MCO_FILE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SimpleMcoFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SIMPLE_MC__RELAT__7BBB44FE");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleMcoFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_MC__SOURC__7AC720C5");
        });

        modelBuilder.Entity<SimpleMcoPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_M__3214EC273E3BC41E");

            entity.ToTable("SIMPLE_MCO_PART", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SimpleMcoParts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SIMPLE_MC__RELAT__7DA38D70");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleMcoParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_MC__SOURC__7CAF6937");
        });

        modelBuilder.Entity<SimpleMcoSignoff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_M__3214EC27B109E271");

            entity.ToTable("SIMPLE_MCO_SIGNOFF", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleMcoSignoffs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_MC__SOURC__7E97B1A9");
        });

        modelBuilder.Entity<Sql>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SQL__3214EC2755E377A0");

            entity.ToTable("SQL", "innovator");

            entity.HasIndex(e => e.Name, "C13").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExecutionCount)
                .HasDefaultValueSql("((0))")
                .HasColumnName("EXECUTION_COUNT");
            entity.Property(e => e.ExecutionFlag)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'manual')")
                .HasColumnName("EXECUTION_FLAG");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OldName)
                .HasMaxLength(64)
                .HasColumnName("OLD_NAME");
            entity.Property(e => e.OracleBody).HasColumnName("ORACLE_BODY");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SqlserverBody).HasColumnName("SQLSERVER_BODY");
            entity.Property(e => e.Stale)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("STALE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransformFirst)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("TRANSFORM_FIRST");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'procedure')")
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<SqlDependency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SQL_DEPE__3214EC279E289762");

            entity.ToTable("SQL_DEPENDENCIES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SqlDependencyRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SQL_DEPEN__RELAT__5CACADF9");

            entity.HasOne(d => d.Source).WithMany(p => p.SqlDependencySources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SQL_DEPEN__SOURC__5BB889C0");
        });

        modelBuilder.Entity<SsvcNotificationMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SSVC_NOT__3214EC27DDA66336");

            entity.ToTable("SSVC_NOTIFICATION_MESSAGE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Acknowledge)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Once')")
                .HasColumnName("ACKNOWLEDGE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MessageId)
                .HasMaxLength(32)
                .HasColumnName("MESSAGE_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'5')")
                .HasColumnName("PRIORITY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Standard')")
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<SsvcPreference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SSVC_PRE__3214EC273DB78E31");

            entity.ToTable("SSVC_PREFERENCES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultBookmark)
                .HasMaxLength(32)
                .HasColumnName("DEFAULT_BOOKMARK");
            entity.Property(e => e.DefaultFlaggedByNumber).HasColumnName("DEFAULT_FLAGGED_BY_NUMBER");
            entity.Property(e => e.DefaultRepliesNumber).HasColumnName("DEFAULT_REPLIES_NUMBER");
            entity.Property(e => e.DescDigestNotifications)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'The following new messages have posted in your discussions:')")
                .HasColumnName("DESC_DIGEST_NOTIFICATIONS");
            entity.Property(e => e.DescSingleNotifications)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'The following new message has posted in your discussions:')")
                .HasColumnName("DESC_SINGLE_NOTIFICATIONS");
            entity.Property(e => e.EnableEmailDigestNotification)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ENABLE_EMAIL_DIGEST_NOTIFICATION");
            entity.Property(e => e.EnableImmediateNotifications)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("ENABLE_IMMEDIATE_NOTIFICATIONS");
            entity.Property(e => e.EnableInAppNotifications)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ENABLE_IN_APP_NOTIFICATIONS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LastScheduledDigestTimeDate)
                .HasColumnType("datetime")
                .HasColumnName("LAST_SCHEDULED_DIGEST_TIME_DATE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MessagesMaxLines).HasColumnName("MESSAGES_MAX_LINES");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PrefixForHighlightTextMarkup)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Change to:')")
                .HasColumnName("PREFIX_FOR_HIGHLIGHT_TEXT_MARKUP");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SubjectDigestNotifications)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'[Aras] Visual Collaboration Notification – new messages')")
                .HasColumnName("SUBJECT_DIGEST_NOTIFICATIONS");
            entity.Property(e => e.SubjectSingleNotifications)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'[Aras] Visual Collaboration Notification – new message')")
                .HasColumnName("SUBJECT_SINGLE_NOTIFICATIONS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TimeDigestInterval)
                .HasDefaultValueSql("((24))")
                .HasColumnName("TIME_DIGEST_INTERVAL");
            entity.Property(e => e.UseLegacy3dViewFiles)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_LEGACY_3D_VIEW_FILES");
            entity.Property(e => e.UseStandardToolbarForViewers)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_STANDARD_TOOLBAR_FOR_VIEWERS");
            entity.Property(e => e.ZoomToCursorForMonolithic)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("ZOOM_TO_CURSOR_FOR_MONOLITHIC");

            entity.HasOne(d => d.Source).WithMany(p => p.SsvcPreferences)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SSVC_PREF__SOURC__01A9287E");
        });

        modelBuilder.Entity<Ssvcemaildigestentry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SSVCEMAI__3214EC27B2587CE4");

            entity.ToTable("SSVCEMAILDIGESTENTRY", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(256)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemMajorRev)
                .HasMaxLength(8)
                .HasColumnName("ITEM_MAJOR_REV");
            entity.Property(e => e.ItemState)
                .HasMaxLength(32)
                .HasColumnName("ITEM_STATE");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.ItemVersion).HasColumnName("ITEM_VERSION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MessageClassification)
                .HasMaxLength(256)
                .HasColumnName("MESSAGE_CLASSIFICATION");
            entity.Property(e => e.MessageComments).HasColumnName("MESSAGE_COMMENTS");
            entity.Property(e => e.MessageCreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MESSAGE_CREATED_BY_ID");
            entity.Property(e => e.MessageCreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("MESSAGE_CREATED_ON");
            entity.Property(e => e.MessageCreatedOnTick)
                .HasColumnType("decimal(19, 0)")
                .HasColumnName("MESSAGE_CREATED_ON_TICK");
            entity.Property(e => e.MessageId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MESSAGE_ID");
            entity.Property(e => e.MessageIsReply)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MESSAGE_IS_REPLY");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.NotificationUserId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOTIFICATION_USER_ID");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Ssvcitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SSVCITEMS", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Ssvcpresentationconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SSVCPRES__3214EC27B25C3B9C");

            entity.ToTable("SSVCPRESENTATIONCONFIGURATION", "innovator");

            entity.HasIndex(e => e.Name, "C104").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DiscussionPanelBehavior)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'discPanelOff')")
                .HasColumnName("DISCUSSION_PANEL_BEHAVIOR");
            entity.Property(e => e.FormTooltipTemplate)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'Form of ${ItemType:label} ${Item:keyed_name}')")
                .HasColumnName("FORM_TOOLTIP_TEMPLATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SmTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SM_TEMPLATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<StateDistribution>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__STATE_DI__3214EC270C90D12D");

            entity.ToTable("STATE_DISTRIBUTION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.StateDistributions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__STATE_DIS__RELAT__04EFA97D");

            entity.HasOne(d => d.Source).WithMany(p => p.StateDistributions)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__STATE_DIS__SOURC__03FB8544");
        });

        modelBuilder.Entity<StateEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__STATE_EM__3214EC27A4F8A896");

            entity.ToTable("STATE_EMAIL", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OfItemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OF_ITEMTYPE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.StateEmails)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__STATE_EMA__RELAT__06D7F1EF");

            entity.HasOne(d => d.Source).WithMany(p => p.StateEmails)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__STATE_EMA__SOURC__05E3CDB6");
        });

        modelBuilder.Entity<StateNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__STATE_NO__3214EC2787EFF311");

            entity.ToTable("STATE_NOTIFICATION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Body).HasColumnName("BODY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FromUser)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_USER");
            entity.Property(e => e.FromUserStr)
                .HasMaxLength(128)
                .HasColumnName("FROM_USER_STR");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HtmlBody).HasColumnName("HTML_BODY");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Subject)
                .HasMaxLength(128)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.StateNotifications)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__STATE_NOT__RELAT__08C03A61");

            entity.HasOne(d => d.Source).WithMany(p => p.StateNotifications)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__STATE_NOT__SOURC__07CC1628");
        });

        modelBuilder.Entity<Statistic>(entity =>
        {
            entity.ToTable("STATISTICS", "application");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.CollectedOn)
                .HasColumnType("datetime")
                .HasColumnName("COLLECTED_ON");
            entity.Property(e => e.Payload).HasColumnName("PAYLOAD");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("STATE");
        });

        modelBuilder.Entity<Storedsecuremessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__STOREDSE__3214EC270D650FF7");

            entity.ToTable("STOREDSECUREMESSAGE", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => new { e.ItemConfigId, e.ItemTypeName, e.ItemVersion }, "IX_STOREDSECUREMESSAGE_ITEM_CONFIG_ID_ITEM_TYPE_NAME_VERSION");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.CreatedOnTick)
                .HasColumnType("decimal(19, 0)")
                .HasColumnName("CREATED_ON_TICK");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DisabledById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DISABLED_BY_ID");
            entity.Property(e => e.DisabledOn)
                .HasColumnType("datetime")
                .HasColumnName("DISABLED_ON");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HighlightedText).HasColumnName("HIGHLIGHTED_TEXT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(256)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemMajorRev)
                .HasMaxLength(8)
                .HasColumnName("ITEM_MAJOR_REV");
            entity.Property(e => e.ItemState)
                .HasMaxLength(32)
                .HasColumnName("ITEM_STATE");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_TYPE_NAME");
            entity.Property(e => e.ItemVersion).HasColumnName("ITEM_VERSION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ReplyToId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPLY_TO_ID");
            entity.Property(e => e.SmData).HasColumnName("SM_DATA");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ThreadId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("THREAD_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Storedsecuremessages)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__STOREDSEC__SOURC__029D4CB7");
        });

        modelBuilder.Entity<Systemevent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSTEMEV__3214EC2788B0F1BE");

            entity.ToTable("SYSTEMEVENT", "innovator");

            entity.HasIndex(e => e.EventType, "C14").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Systemeventhandler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSTEMEV__3214EC2706F97499");

            entity.ToTable("SYSTEMEVENTHANDLER", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsEnabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'true')")
                .IsFixedLength()
                .HasColumnName("IS_ENABLED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Systemeventhandlers)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SYSTEMEVE__RELAT__5E94F66B");

            entity.HasOne(d => d.Source).WithMany(p => p.Systemeventhandlers)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SYSTEMEVE__SOURC__5DA0D232");
        });

        modelBuilder.Entity<Systemeventlog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSTEMEV__3214EC279881EBCA");

            entity.ToTable("SYSTEMEVENTLOG", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommentText).HasColumnName("COMMENT_TEXT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IpAddress)
                .HasMaxLength(32)
                .HasColumnName("IP_ADDRESS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.LoginName)
                .HasMaxLength(32)
                .HasColumnName("LOGIN_NAME");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MethodName)
                .HasMaxLength(32)
                .HasColumnName("METHOD_NAME");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SessionId)
                .HasMaxLength(64)
                .HasColumnName("SESSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Systemeventlogdescriptor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSTEMEV__3214EC27076480F6");

            entity.ToTable("SYSTEMEVENTLOGDESCRIPTOR", "innovator");

            entity.HasIndex(e => e.SystemEvent, "C15").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.LogLevel)
                .HasDefaultValueSql("((0))")
                .HasColumnName("LOG_LEVEL");
            entity.Property(e => e.LogMessage)
                .HasMaxLength(256)
                .HasColumnName("LOG_MESSAGE");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SystemEvent)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SYSTEM_EVENT");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Systemfilecontainer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSTEMFI__3214EC276AA9854B");

            entity.ToTable("SYSTEMFILECONTAINER", "innovator");

            entity.HasIndex(e => e.Name, "C28").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Team>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TEAM__3214EC278138EB86");

            entity.ToTable("TEAM", "innovator");

            entity.HasIndex(e => e.Name, "C16").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.Name, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsSystem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_SYSTEM");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<TeamIdentity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TEAM_IDE__3214EC270D57DA9F");

            entity.ToTable("TEAM_IDENTITY", "innovator");

            entity.HasIndex(e => new { e.TeamRole, e.RelatedId, e.SourceId }, "C24").IsUnique();

            entity.HasIndex(e => e.TeamRole, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.SourceId, "I2");

            entity.HasIndex(e => new { e.SourceId, e.RelatedId, e.TeamRole }, "IX_team_identity_columns_source_id_related_id_team_role");

            entity.HasIndex(e => new { e.SourceId, e.TeamRole, e.RelatedId }, "IX_team_identity_columns_source_id_team_role_related_id");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "IX_team_identity_source_id_related_id_team_role");

            entity.HasIndex(e => e.SourceId, "IX_team_identity_source_id_with_include");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TeamRole)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ROLE");

            entity.HasOne(d => d.Related).WithMany(p => p.TeamIdentities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__TEAM_IDEN__RELAT__607D3EDD");

            entity.HasOne(d => d.Source).WithMany(p => p.TeamIdentities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__TEAM_IDEN__SOURC__5F891AA4");
        });

        modelBuilder.Entity<TimeToManufacturing>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TIME_TO___3214EC27A1FB52F7");

            entity.ToTable("TIME_TO_MANUFACTURING", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<TimeZone>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TimeZone");

            entity.ToTable("TIME_ZONE", "tz");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("NAME");
            entity.Property(e => e.OffsetSeconds).HasColumnName("OFFSET_SECONDS");
        });

        modelBuilder.Entity<TimeZoneHistory>(entity =>
        {
            entity.HasKey(e => new { e.TzId, e.TransitionStart, e.TransitionEnd });

            entity.ToTable("TIME_ZONE_HISTORY", "tz");

            entity.Property(e => e.TzId).HasColumnName("TZ_ID");
            entity.Property(e => e.TransitionStart)
                .HasColumnType("datetime")
                .HasColumnName("TRANSITION_START");
            entity.Property(e => e.TransitionEnd)
                .HasColumnType("datetime")
                .HasColumnName("TRANSITION_END");
            entity.Property(e => e.DeltaSeconds).HasColumnName("DELTA_SECONDS");
            entity.Property(e => e.Dst).HasColumnName("DST");

            entity.HasOne(d => d.Tz).WithMany(p => p.TimeZoneHistories)
                .HasForeignKey(d => d.TzId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TimeZoneHistory_TimeZone");
        });

        modelBuilder.Entity<TocAccess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TOC_ACCE__3214EC27F5AA1645");

            entity.ToTable("TOC_ACCESS", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Category)
                .HasMaxLength(256)
                .HasColumnName("CATEGORY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.TocAccesses)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__TOC_ACCES__RELAT__6265874F");

            entity.HasOne(d => d.Source).WithMany(p => p.TocAccesses)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TOC_ACCES__SOURC__61716316");
        });

        modelBuilder.Entity<TocView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TOC_VIEW__3214EC27FAB6855F");

            entity.ToTable("TOC_VIEW", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Form)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FORM");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Parameters)
                .HasMaxLength(128)
                .HasColumnName("PARAMETERS");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartPage)
                .HasMaxLength(64)
                .HasColumnName("START_PAGE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.TocViews)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__TOC_VIEW__RELATE__644DCFC1");

            entity.HasOne(d => d.Source).WithMany(p => p.TocViews)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TOC_VIEW__SOURCE__6359AB88");
        });

        modelBuilder.Entity<TpImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TP_IMAGE__3214EC27648339D5");

            entity.ToTable("TP_IMAGE", "innovator");

            entity.HasIndex(e => new { e.ItemNumber, e.ArasUniquenessHelper }, "C123").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.ItemNumber, "I1");

            entity.HasIndex(e => new { e.ConfigId, e.IsCurrent }, "IX_TP_IMAGE_CONFIG_ID_IS_CURRENT");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_TP_IMAGE_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(64)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.Src)
                .HasMaxLength(128)
                .HasColumnName("SRC");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<TpItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TP_ITEM", "innovator");

            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<TpStylesheet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TP_STYLE__3214EC2739C29F21");

            entity.ToTable("TP_STYLESHEET", "innovator");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C124").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentStylesheet)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_STYLESHEET");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StyleContent).HasColumnName("STYLE_CONTENT");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.TpStylesheets)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__TP_STYLES__SOURC__230A1C49");
        });

        modelBuilder.Entity<TpXmlschema>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TP_XMLSC__3214EC2765C20CA9");

            entity.ToTable("TP_XMLSCHEMA", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Application)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'tp_Block')")
                .HasColumnName("APPLICATION");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Content).HasColumnName("CONTENT");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EditorConfiguration)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EDITOR_CONFIGURATION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<TpXmlschemaelement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TP_XMLSC__3214EC27F477AF61");

            entity.ToTable("TP_XMLSCHEMAELEMENT", "innovator");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C125").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.Name, "I1");

            entity.HasIndex(e => e.SourceId, "I2");

            entity.HasIndex(e => new { e.SourceId, e.DefaultClassification }, "IX_access_source_id_default_classification")
                .IsUnique()
                .HasFilter("([DEFAULT_CLASSIFICATION] IS NOT NULL AND [DEFAULT_CLASSIFICATION]<>'')");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContentGenerator)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTENT_GENERATOR");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultClassification)
                .HasMaxLength(512)
                .HasColumnName("DEFAULT_CLASSIFICATION");
            entity.Property(e => e.EditorParameters).HasColumnName("EDITOR_PARAMETERS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GeneratorParameters).HasColumnName("GENERATOR_PARAMETERS");
            entity.Property(e => e.IsContentDynamic)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CONTENT_DYNAMIC");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Renderer)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RENDERER");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.TpXmlschemaelements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__TP_XMLSCH__SOURC__23FE4082");
        });

        modelBuilder.Entity<TpXmlschemaoutputsetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TP_XMLSC__3214EC27CA6EFE04");

            entity.ToTable("TP_XMLSCHEMAOUTPUTSETTING", "innovator");

            entity.HasIndex(e => new { e.TargetClassification, e.Classification, e.SourceId }, "C126").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Indentation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INDENTATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OmitXmlDeclaration)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OMIT_XML_DECLARATION");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StylesheetId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STYLESHEET_ID");
            entity.Property(e => e.TargetClassification)
                .HasMaxLength(512)
                .HasColumnName("TARGET_CLASSIFICATION");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.TpXmlschemaoutputsettings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__TP_XMLSCH__SOURC__24F264BB");
        });

        modelBuilder.Entity<TransitionDistribution>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TRANSITI__3214EC27C72C8512");

            entity.ToTable("TRANSITION_DISTRIBUTION", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.TransitionDistributions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__TRANSITIO__RELAT__011F1899");

            entity.HasOne(d => d.Source).WithMany(p => p.TransitionDistributions)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TRANSITIO__SOURC__002AF460");
        });

        modelBuilder.Entity<TransitionEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TRANSITI__3214EC2761180DBF");

            entity.ToTable("TRANSITION_EMAIL", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OfItemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OF_ITEMTYPE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.TransitionEmails)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__TRANSITIO__RELAT__7D4E87B5");

            entity.HasOne(d => d.Source).WithMany(p => p.TransitionEmails)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TRANSITIO__SOURC__7C5A637C");
        });

        modelBuilder.Entity<UnidrDeparture>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UNIDR_DEPARTURE", "innovator");

            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<UnidrDestination>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UNIDR_DESTINATION", "innovator");

            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<UnidrRelationship>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UNIDR_RE__3214EC270D55E429");

            entity.ToTable("UNIDR_RELATIONSHIP", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => new { e.DepartureId, e.DrRelationshipId, e.DestinationId }, "IX_unidr_Relationship_reverse");

            entity.HasIndex(e => new { e.DestinationId, e.DrRelationshipId, e.DepartureId }, "UniqueIndex_unidr_Relationship").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DepartureId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEPARTURE_ID");
            entity.Property(e => e.DestinationId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DESTINATION_ID");
            entity.Property(e => e.DrRelationshipId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DR_RELATIONSHIP_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__USER__3214EC272401289E");

            entity.ToTable("USER", "innovator");

            entity.HasIndex(e => e.LoginName, "C17").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.LoginName, "I1");

            entity.HasIndex(e => new { e.LogonEnabled, e.LoginName, e.Password }, "IX_user_logon_enabled_login_name_password");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Cell)
                .HasMaxLength(32)
                .HasColumnName("CELL");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(32)
                .HasColumnName("COMPANY_NAME");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultVault)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'67BBB9204FE84A8981ED8313049BA06C')")
                .IsFixedLength()
                .HasColumnName("DEFAULT_VAULT");
            entity.Property(e => e.Email)
                .HasMaxLength(64)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Esignature)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESIGNATURE");
            entity.Property(e => e.Fax)
                .HasMaxLength(32)
                .HasColumnName("FAX");
            entity.Property(e => e.FirstName)
                .HasMaxLength(32)
                .HasColumnName("FIRST_NAME");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HomePhone)
                .HasMaxLength(32)
                .HasColumnName("HOME_PHONE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LastLoginDate)
                .HasColumnType("datetime")
                .HasColumnName("LAST_LOGIN_DATE");
            entity.Property(e => e.LastName)
                .HasMaxLength(32)
                .HasColumnName("LAST_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.LoginName)
                .HasMaxLength(32)
                .HasColumnName("LOGIN_NAME");
            entity.Property(e => e.LogonEnabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOGON_ENABLED");
            entity.Property(e => e.MailStop)
                .HasMaxLength(16)
                .HasColumnName("MAIL_STOP");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Manager)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGER");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Pager)
                .HasMaxLength(32)
                .HasColumnName("PAGER");
            entity.Property(e => e.Password)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PASSWORD");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Picture)
                .HasMaxLength(128)
                .HasColumnName("PICTURE");
            entity.Property(e => e.PwdIsSetOn)
                .HasColumnType("datetime")
                .HasColumnName("PWD_IS_SET_ON");
            entity.Property(e => e.StartingPage)
                .HasMaxLength(64)
                .HasColumnName("STARTING_PAGE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Telephone)
                .HasMaxLength(32)
                .HasColumnName("TELEPHONE");
            entity.Property(e => e.UserNo)
                .HasMaxLength(15)
                .HasColumnName("USER_NO");
            entity.Property(e => e.WorkingDirectory)
                .HasMaxLength(256)
                .HasColumnName("WORKING_DIRECTORY");
        });

        modelBuilder.Entity<Usermessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__USERMESS__3214EC27E175C2CA");

            entity.ToTable("USERMESSAGE", "innovator");

            entity.HasIndex(e => e.Name, "C18").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Custom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CUSTOM");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Text)
                .HasMaxLength(2048)
                .HasColumnName("TEXT");
        });

        modelBuilder.Entity<UvpUservisibilityrule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UVP_USER__3214EC27682432AD");

            entity.ToTable("UVP_USERVISIBILITYRULE", "innovator");

            entity.HasIndex(e => new { e.AccessIdentityId, e.SourceIdentityId }, "C99").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => new { e.AccessIdentityId, e.SourceIdentityId, e.IsActive }, "IX_uvr_access_identity_id_source_identity_id_is_active");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AccessIdentityId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ACCESS_IDENTITY_ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("IS_ACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SourceIdentityId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_IDENTITY_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Value>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VALUE__3214EC27551F7146");

            entity.ToTable("VALUE", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Inactive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value1)
                .HasMaxLength(256)
                .HasColumnName("VALUE");

            entity.HasOne(d => d.Source).WithMany(p => p.Values)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VALUE__SOURCE_ID__6541F3FA");
        });

        modelBuilder.Entity<Variable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VARIABLE__3214EC27BB7E16BB");

            entity.ToTable("VARIABLE", "innovator");

            entity.HasIndex(e => e.Name, "C19").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I1");

            entity.HasIndex(e => e.Name, "IX_Variable_value");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(256)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value)
                .HasMaxLength(2048)
                .HasColumnName("VALUE");
        });

        modelBuilder.Entity<Variable1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_variable");

            entity.ToTable("VARIABLE", "protected");

            entity.HasIndex(e => e.Name, "AK_variable").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.Value).HasColumnName("VALUE");
        });

        modelBuilder.Entity<Vault>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VAULT__3214EC27EE36F3B6");

            entity.ToTable("VAULT", "innovator");

            entity.HasIndex(e => e.Name, "C20").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => e.KeyedName, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VaultUrlPattern)
                .HasMaxLength(256)
                .HasColumnName("VAULT_URL_PATTERN");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VENDOR__3214EC27BFCD6182");

            entity.ToTable("VENDOR", "innovator");

            entity.HasIndex(e => e.Name, "C145").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Address)
                .HasMaxLength(256)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.AddressState)
                .HasMaxLength(64)
                .HasColumnName("ADDRESS_STATE");
            entity.Property(e => e.City)
                .HasMaxLength(64)
                .HasColumnName("CITY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(64)
                .HasColumnName("CONTACT_NAME");
            entity.Property(e => e.Country)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MainFax)
                .HasMaxLength(32)
                .HasColumnName("MAIN_FAX");
            entity.Property(e => e.MainPhone)
                .HasMaxLength(32)
                .HasColumnName("MAIN_PHONE");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WebSite)
                .HasMaxLength(128)
                .HasColumnName("WEB_SITE");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(32)
                .HasColumnName("ZIP_CODE");
        });

        modelBuilder.Entity<VendorPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VENDOR_P__3214EC2739FA70B7");

            entity.ToTable("VENDOR_PART", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CatalogNumber)
                .HasMaxLength(32)
                .HasColumnName("CATALOG_NUMBER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.VendorParts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__VENDOR_PA__RELAT__007FFA1B");

            entity.HasOne(d => d.Source).WithMany(p => p.VendorParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__VENDOR_PA__SOURC__7F8BD5E2");
        });

        modelBuilder.Entity<View>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VIEW__3214EC27AC88B446");

            entity.ToTable("VIEW", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'js')")
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DisplayPriority).HasColumnName("DISPLAY_PRIORITY");
            entity.Property(e => e.FormClassification)
                .HasMaxLength(512)
                .HasColumnName("FORM_CLASSIFICATION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Method)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("METHOD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'A73B655731924CD0B027E4F4D5FCC0A9')")
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.ShowSsvc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("SHOW_SSVC");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'edit')")
                .HasColumnName("TYPE");
            entity.Property(e => e.Url)
                .HasMaxLength(512)
                .HasColumnName("URL");

            entity.HasOne(d => d.Related).WithMany(p => p.Views)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__VIEW__RELATED_ID__2838E5BA");

            entity.HasOne(d => d.Source).WithMany(p => p.Views)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VIEW__SOURCE_ID__2744C181");
        });

        modelBuilder.Entity<ViewWith>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VIEW_WIT__3214EC27F1E35223");

            entity.ToTable("VIEW_WITH", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Application)
                .HasMaxLength(64)
                .HasColumnName("APPLICATION");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'js')")
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ViewWiths)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__VIEW_WITH__RELAT__672A3C6C");

            entity.HasOne(d => d.Source).WithMany(p => p.ViewWiths)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VIEW_WITH__SOURC__66361833");
        });

        modelBuilder.Entity<Viewer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VIEWER__3214EC274F1978DE");

            entity.ToTable("VIEWER", "innovator");

            entity.HasIndex(e => e.Name, "C21").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => e.KeyedName, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ViewerUrl)
                .HasMaxLength(512)
                .HasColumnName("VIEWER_URL");
        });

        modelBuilder.Entity<Wmconfiguration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WMCONFIGURATION", "innovator");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WatermarkContext)
                .HasMaxLength(64)
                .HasColumnName("WATERMARK_CONTEXT");
        });

        modelBuilder.Entity<Wmitemtype>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WMITEMTYPE", "innovator");

            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Wmset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WMSET__3214EC27D88331D1");

            entity.ToTable("WMSET", "innovator");

            entity.HasIndex(e => new { e.EventContext, e.WmType }, "C128").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EventContext)
                .HasMaxLength(128)
                .HasColumnName("EVENT_CONTEXT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WmType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WM_TYPE");
        });

        modelBuilder.Entity<Wmsetconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WMSETCON__3214EC27190301EA");

            entity.ToTable("WMSETCONFIGURATIONS", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Wmsetconfigurations)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WMSETCONF__SOURC__26DAAD2D");
        });

        modelBuilder.Entity<Wmsetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WMSETTIN__3214EC275ADF7077");

            entity.ToTable("WMSETTINGS", "innovator");

            entity.HasIndex(e => e.ItemType, "C127").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultWmSet)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFAULT_WM_SET");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Wmsettingcontent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WMSETTIN__3214EC27B4DDCC32");

            entity.ToTable("WMSETTINGCONTENT", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WmConfigurationLookupMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WM_CONFIGURATION_LOOKUP_METHOD");
            entity.Property(e => e.WmContentLookupMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WM_CONTENT_LOOKUP_METHOD");
            entity.Property(e => e.WmContentUpdateMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WM_CONTENT_UPDATE_METHOD");
            entity.Property(e => e.WmType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WM_TYPE");

            entity.HasOne(d => d.Source).WithMany(p => p.Wmsettingcontents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WMSETTING__SOURC__27CED166");
        });

        modelBuilder.Entity<Wmsettinglcstate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WMSETTIN__3214EC277086CC92");

            entity.ToTable("WMSETTINGLCSTATES", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Wmsettinglcstates)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WMSETTING__RELAT__29B719D8");

            entity.HasOne(d => d.Source).WithMany(p => p.Wmsettinglcstates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WMSETTING__SOURC__28C2F59F");
        });

        modelBuilder.Entity<Wmtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WMTYPE__3214EC27E9F2D747");

            entity.ToTable("WMTYPE", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ConversionTaskMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONVERSION_TASK_METHOD");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Workflow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27F632ED26");

            entity.ToTable("WORKFLOW", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => new { e.RelatedId, e.Behavior }, "IX_Workflow_related_id_behavior_source_id_source_type");

            entity.HasIndex(e => e.SourceType, "IX_workflow_columns_source_type");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Workflows)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW__RELATE__30CE2BBB");
        });

        modelBuilder.Entity<WorkflowMap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC275B8AF3E6");

            entity.ToTable("WORKFLOW_MAP", "innovator");

            entity.HasIndex(e => new { e.Name, e.ArasUniquenessHelper }, "C45").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => new { e.ConfigId, e.IsCurrent }, "IX_WORKFLOW_MAP_CONFIG_ID_IS_CURRENT");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_WORKFLOW_MAP_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NodeBgColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#FFFFFF')")
                .IsFixedLength()
                .HasColumnName("NODE_BG_COLOR");
            entity.Property(e => e.NodeLabel1Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#808080')")
                .IsFixedLength()
                .HasColumnName("NODE_LABEL1_COLOR");
            entity.Property(e => e.NodeLabel1Font)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Arial-plain-12')")
                .HasColumnName("NODE_LABEL1_FONT");
            entity.Property(e => e.NodeLabel2Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#808080')")
                .IsFixedLength()
                .HasColumnName("NODE_LABEL2_COLOR");
            entity.Property(e => e.NodeLabel2Font)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Arial-plain-12')")
                .HasColumnName("NODE_LABEL2_FONT");
            entity.Property(e => e.NodeNameColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#0000FF')")
                .IsFixedLength()
                .HasColumnName("NODE_NAME_COLOR");
            entity.Property(e => e.NodeNameFont)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Arial-plain-12')")
                .HasColumnName("NODE_NAME_FONT");
            entity.Property(e => e.NodeSize)
                .HasMaxLength(8)
                .HasDefaultValueSql("(N'30')")
                .HasColumnName("NODE_SIZE");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ProcessOwner)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'8FE5430B42014D94AE83246F299D9CC4')")
                .IsFixedLength()
                .HasColumnName("PROCESS_OWNER");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransitionLineColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#000000')")
                .IsFixedLength()
                .HasColumnName("TRANSITION_LINE_COLOR");
            entity.Property(e => e.TransitionNameColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#000000')")
                .IsFixedLength()
                .HasColumnName("TRANSITION_NAME_COLOR");
            entity.Property(e => e.TransitionNameFont)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Arial-plain-10')")
                .HasColumnName("TRANSITION_NAME_FONT");
        });

        modelBuilder.Entity<WorkflowMapActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27BF8DA6B2");

            entity.ToTable("WORKFLOW_MAP_ACTIVITY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowMapActivities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__691284DE");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowMapActivities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__681E60A5");
        });

        modelBuilder.Entity<WorkflowMapPath>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27DD856EA6");

            entity.ToTable("WORKFLOW_MAP_PATH", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Authentication)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'none')")
                .HasColumnName("AUTHENTICATION");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEFAULT");
            entity.Property(e => e.IsOverride)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_OVERRIDE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Segments)
                .HasMaxLength(128)
                .HasColumnName("SEGMENTS");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<WorkflowMapPathPost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27DA42104B");

            entity.ToTable("WORKFLOW_MAP_PATH_POST", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence)
                .HasDefaultValueSql("((1))")
                .HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowMapPathPosts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__170E59B8");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowMapPathPosts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__161A357F");
        });

        modelBuilder.Entity<WorkflowMapPathPre>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27C4BBA5B3");

            entity.ToTable("WORKFLOW_MAP_PATH_PRE", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence)
                .HasDefaultValueSql("((1))")
                .HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowMapPathPres)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__18F6A22A");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowMapPathPres)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__18027DF1");
        });

        modelBuilder.Entity<WorkflowMapVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27B5E18505");

            entity.ToTable("WORKFLOW_MAP_VARIABLE", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Datatype)
                .HasMaxLength(64)
                .HasColumnName("DATATYPE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(80)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.Source)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.WorkflowMapVariables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__6A06A917");
        });

        modelBuilder.Entity<WorkflowProcess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27C357C6EC");

            entity.ToTable("WORKFLOW_PROCESS", "innovator");

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.Name, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ActiveDate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVE_DATE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClosedDate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSED_DATE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CopiedFrom)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COPIED_FROM");
            entity.Property(e => e.CopiedFromString)
                .HasMaxLength(32)
                .HasColumnName("COPIED_FROM_STRING");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NodeBgColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NODE_BG_COLOR");
            entity.Property(e => e.NodeLabel1Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NODE_LABEL1_COLOR");
            entity.Property(e => e.NodeLabel1Font)
                .HasMaxLength(64)
                .HasColumnName("NODE_LABEL1_FONT");
            entity.Property(e => e.NodeLabel2Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NODE_LABEL2_COLOR");
            entity.Property(e => e.NodeLabel2Font)
                .HasMaxLength(64)
                .HasColumnName("NODE_LABEL2_FONT");
            entity.Property(e => e.NodeNameColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NODE_NAME_COLOR");
            entity.Property(e => e.NodeNameFont)
                .HasMaxLength(64)
                .HasColumnName("NODE_NAME_FONT");
            entity.Property(e => e.NodeSize)
                .HasMaxLength(8)
                .HasColumnName("NODE_SIZE");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ProcessOwner)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROCESS_OWNER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SubOf)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUB_OF");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransitionLineColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSITION_LINE_COLOR");
            entity.Property(e => e.TransitionNameColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSITION_NAME_COLOR");
            entity.Property(e => e.TransitionNameFont)
                .HasMaxLength(64)
                .HasColumnName("TRANSITION_NAME_FONT");
        });

        modelBuilder.Entity<WorkflowProcessActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27FC1C0E02");

            entity.ToTable("WORKFLOW_PROCESS_ACTIVITY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.RelatedId, "IX_WORKFLOW_PROCESS_ACTIVITY_RELATED_ID");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowProcessActivities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__1EAF7B80");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowProcessActivities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__1DBB5747");
        });

        modelBuilder.Entity<WorkflowProcessPath>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC278549D121");

            entity.ToTable("WORKFLOW_PROCESS_PATH", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Authentication)
                .HasMaxLength(64)
                .HasColumnName("AUTHENTICATION");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsComplete)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_COMPLETE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEFAULT");
            entity.Property(e => e.IsDisabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DISABLED");
            entity.Property(e => e.IsOverride)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_OVERRIDE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Segments)
                .HasMaxLength(128)
                .HasColumnName("SEGMENTS");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<WorkflowProcessPathPost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27967C32AD");

            entity.ToTable("WORKFLOW_PROCESS_PATH_POST", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence)
                .HasDefaultValueSql("((1))")
                .HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowProcessPathPosts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__22800C64");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowProcessPathPosts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__218BE82B");
        });

        modelBuilder.Entity<WorkflowProcessPathPre>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC2771D0BFAF");

            entity.ToTable("WORKFLOW_PROCESS_PATH_PRE", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence)
                .HasDefaultValueSql("((1))")
                .HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowProcessPathPres)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__2097C3F2");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowProcessPathPres)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__1FA39FB9");
        });

        modelBuilder.Entity<WorkflowProcessVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27F6D5B049");

            entity.ToTable("WORKFLOW_PROCESS_VARIABLE", "innovator");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Datatype)
                .HasMaxLength(64)
                .HasColumnName("DATATYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.Source)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value)
                .HasMaxLength(80)
                .HasColumnName("VALUE");

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.WorkflowProcessVariables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__6AFACD50");
        });

        modelBuilder.Entity<WorkflowTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Workflow_Task", "innovator");

            entity.Property(e => e.AssignedTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ASSIGNED_TO");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Container)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER");
            entity.Property(e => e.ContainerTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("CONTAINER_TYPE_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("DUE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("icon");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Instructions)
                .HasMaxLength(1024)
                .HasColumnName("INSTRUCTIONS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Item)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LanguageCodeFilter)
                .HasMaxLength(3)
                .HasColumnName("language_code_filter");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MyAssignment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MY_ASSIGNMENT");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("START_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(32)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<WorkflowTaskContainerTypeId>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Workflow_Task_Container_Type_Id", "innovator");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ID");
        });

        modelBuilder.Entity<WorkflowTaskItemTypeId>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Workflow_Task_Item_Type_Id", "innovator");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
        });

        modelBuilder.Entity<Xclass>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__XCLASS__3214EC27F38AA8D5");

            entity.ToTable("XCLASS", "innovator");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C63").IsUnique();

            entity.HasIndex(e => e.RefId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.Name, "I2");

            entity.HasIndex(e => e.SourceId, "I3");

            entity.HasIndex(e => new { e.SourceId, e.RefId }, "IX_xclass_source_id_ref_id").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RefId)
                .HasMaxLength(32)
                .HasColumnName("REF_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.XpropertiesSortOrder).HasColumnName("XPROPERTIES_SORT_ORDER");

            entity.HasOne(d => d.Source).WithMany(p => p.Xclasses)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__XCLASS__SOURCE_I__25276EE5");
        });

        modelBuilder.Entity<XclassClassificationPerm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__XCLASS_C__3214EC27644665A3");

            entity.ToTable("XCLASS_CLASSIFICATION_PERM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ItemtypeId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.HasIndex(e => new { e.SourceId, e.ItemtypeId }, "IX_xclass_classification_perm_source_id_itemtype_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMTYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.XclassClassificationPerms)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__XCLASS_CL__RELAT__2AE0483B");

            entity.HasOne(d => d.Source).WithMany(p => p.XclassClassificationPerms)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__XCLASS_CL__SOURC__29EC2402");
        });

        modelBuilder.Entity<XclassXpropertyFlatten>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__XCLASS_X__3214EC27EC18266C");

            entity.ToTable("XCLASS_XPROPERTY_FLATTEN", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C65").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.XclassXpropertyFlattens)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__XCLASS_XP__RELAT__2EB0D91F");

            entity.HasOne(d => d.Source).WithMany(p => p.XclassXpropertyFlattens)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__XCLASS_XP__SOURC__2DBCB4E6");
        });

        modelBuilder.Entity<XclassXpropertyFlattenMatrix>(entity =>
        {
            entity.ToTable("XCLASS_XPROPERTY_FLATTEN_MATRIX", "xp");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
        });

        modelBuilder.Entity<XclassXpropertydefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__XCLASS_X__3214EC275BD1E141");

            entity.ToTable("XCLASS_XPROPERTYDEFINITION", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C66").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(64)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Inactive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OverrideDefaultValue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OVERRIDE_DEFAULT_VALUE");
            entity.Property(e => e.OverrideIsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OVERRIDE_IS_REQUIRED");
            entity.Property(e => e.OverrideLabel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OVERRIDE_LABEL");
            entity.Property(e => e.OverrideReadonly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OVERRIDE_READONLY");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Readonly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("READONLY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.XclassXpropertydefinitions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__XCLASS_XP__RELAT__2CC890AD");

            entity.HasOne(d => d.Source).WithMany(p => p.XclassXpropertydefinitions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__XCLASS_XP__SOURC__2BD46C74");
        });

        modelBuilder.Entity<XclassXpropvaluePerm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__XCLASS_X__3214EC270B586591");

            entity.ToTable("XCLASS_XPROPVALUE_PERM", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ItemtypeId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.HasIndex(e => new { e.SourceId, e.ItemtypeId }, "IX_xclass_xpropvalue_perm_source_id_itemtype_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMTYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.XclassXpropvaluePerms)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__XCLASS_XP__RELAT__30992191");

            entity.HasOne(d => d.Source).WithMany(p => p.XclassXpropvaluePerms)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__XCLASS_XP__SOURC__2FA4FD58");
        });

        modelBuilder.Entity<XclassifiableitemXclass>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("XCLASSIFIABLEITEM_XCLASS", "innovator");

            entity.Property(e => e.Behavior).HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId).HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId).HasColumnName("SOURCE_ID");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Xclassificationtree>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__XCLASSIF__3214EC27331BDA44");

            entity.ToTable("XCLASSIFICATIONTREE", "innovator");

            entity.HasIndex(e => e.ItemNumber, "C60").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.Name, "I1");

            entity.HasIndex(e => e.Name, "IX_xClassificationTree_name").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClassificationHierarchy).HasColumnName("CLASSIFICATION_HIERARCHY");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SelectOnlyLeafClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("SELECT_ONLY_LEAF_CLASS");
            entity.Property(e => e.SelectOnlySingleClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("SELECT_ONLY_SINGLE_CLASS");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<XclassificationtreeItemtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__XCLASSIF__3214EC2704163779");

            entity.ToTable("XCLASSIFICATIONTREE_ITEMTYPE", "innovator");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C64").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.XclassificationtreeItemtypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__XCLASSIFI__RELAT__270FB757");

            entity.HasOne(d => d.Source).WithMany(p => p.XclassificationtreeItemtypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__XCLASSIFI__SOURC__261B931E");
        });

        modelBuilder.Entity<Xitemtypeallowedproperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__XITEMTYP__3214EC27424BAD88");

            entity.ToTable("XITEMTYPEALLOWEDPROPERTY", "innovator");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Xitemtypeallowedproperties)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__XITEMTYPE__RELAT__28F7FFC9");

            entity.HasOne(d => d.Source).WithMany(p => p.Xitemtypeallowedproperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__XITEMTYPE__SOURC__2803DB90");
        });

        modelBuilder.Entity<Xpropertycontaineritem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("XPROPERTYCONTAINERITEM", "innovator");

            entity.Property(e => e.Classification).HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId).HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById).HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn).HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState).HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsCurrent).HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased).HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype).HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName).HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById).HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev).HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById).HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev).HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById).HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn).HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion).HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable).HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById).HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId).HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Xpropertydefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__XPROPERT__3214EC27620760AE");

            entity.ToTable("XPROPERTYDEFINITION", "innovator");

            entity.HasIndex(e => e.Name, "C61").IsUnique();

            entity.HasIndex(e => e.KeyedName, "I0");

            entity.HasIndex(e => e.Name, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ColumnAlignment)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("COLUMN_ALIGNMENT");
            entity.Property(e => e.ColumnWidth).HasColumnName("COLUMN_WIDTH");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DataSource)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DATA_SOURCE");
            entity.Property(e => e.DataType)
                .HasMaxLength(64)
                .HasColumnName("DATA_TYPE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(64)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsIndexed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_INDEXED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Pattern)
                .HasMaxLength(512)
                .HasColumnName("PATTERN");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Prec).HasColumnName("PREC");
            entity.Property(e => e.PrivatePermissionBehavior)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'None')")
                .HasColumnName("PRIVATE_PERMISSION_BEHAVIOR");
            entity.Property(e => e.Readonly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("READONLY");
            entity.Property(e => e.Scale).HasColumnName("SCALE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StoredLength).HasColumnName("STORED_LENGTH");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TrackHistory)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'')")
                .IsFixedLength()
                .HasColumnName("TRACK_HISTORY");
        });

        modelBuilder.Entity<Xpropertyvalue>(entity =>
        {
            entity.HasKey(e => new { e.ItemtypeId, e.ItemId });

            entity.ToTable("XPROPERTYVALUES", "xp");

            entity.HasIndex(e => e.Id, "IX_xpropertyvalues_id").IsUnique();

            entity.Property(e => e.ItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("itemtype_id");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_id");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
